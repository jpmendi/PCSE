
mis_programas/TP_TODO_JUNTO/out/TP_TODO_JUNTO.elf:     file format elf32-littlearm
mis_programas/TP_TODO_JUNTO/out/TP_TODO_JUNTO.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0007ad

Program Header:
0x70000001 off    0x00018f48 vaddr 0x1a008f48 paddr 0x1a008f48 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x000034f8 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00008f50 memsz 0x00008f50 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a008f50 align 2**16
         filesz 0x000000cc memsz 0x000000cc flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008f44  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000cc  10000000  1a008f50  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200cc  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200cc  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200cc  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200cc  2**2
                  CONTENTS
  6 .bss          00003428  100000d0  100000d0  000000d0  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200cc  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200cc  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200cc  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200cc  2**2
                  CONTENTS
 11 .init_array   00000004  1a008f44  1a008f44  00018f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a008f48  1a008f48  00018f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200cc  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200cc  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200cc  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200cc  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200cc  2**2
                  CONTENTS
 18 .noinit       00000000  100034f8  100034f8  000200cc  2**2
                  CONTENTS
 19 .debug_info   0003e170  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 000077d2  00000000  00000000  0005e23c  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00014e37  00000000  00000000  00065a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 000015a8  00000000  00000000  0007a845  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00001640  00000000  00000000  0007bded  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  000139fe  00000000  00000000  0007d42d  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0001bded  00000000  00000000  00090e2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00035d18  00000000  00000000  000acc18  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  000e2930  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  000e29af  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00004088  00000000  00000000  000e29e8  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000d0 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a008f44 l    d  .init_array	00000000 .init_array
1a008f48 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100034f8 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 BT.c
00000000 l    df *ABS*	00000000 PWM.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 userTasks.c
100000d4 l     O .bss	00000064 buf
10000138 l     O .bss	00000250 fp
10000388 l     O .bss	00000238 fs
00000000 l    df *ABS*	00000000 system.c
100005c0 l     O .bss	00000004 heap_end.5778
00000000 l    df *ABS*	00000000 ff.c
1a000900 l     F .text	0000000a ld_word
1a00090a l     F .text	00000016 ld_dword
1a000920 l     F .text	000000a8 ld_qword
1a0009c8 l     F .text	00000008 st_word
1a0009d0 l     F .text	00000014 st_dword
1a0009e4 l     F .text	00000026 st_qword
1a000a0a l     F .text	00000012 mem_cpy
1a000a1c l     F .text	0000000a mem_set
1a000a26 l     F .text	0000001e mem_cmp
1a000a44 l     F .text	00000010 chk_chr
1a000a54 l     F .text	00000004 dbc_1st
1a000a58 l     F .text	000000c0 tchar2uni
1a000b18 l     F .text	00000018 clst2sect
1a000b30 l     F .text	00000026 ld_clust
1a000b56 l     F .text	00000026 st_clust
1a000b7c l     F .text	00000088 pick_lfn
1a000c04 l     F .text	00000078 put_lfn
1a000c7c l     F .text	000000b0 gen_numname
1a000d2c l     F .text	0000001c sum_sfn
1a000d48 l     F .text	00000030 xdir_sum
1a000d78 l     F .text	0000002e init_alloc_info
1a000da8 l     F .text	000000b0 get_ldnumber
1a000e58 l     F .text	00000048 validate
1a000ea0 l     F .text	00000050 sync_window
1a000ef0 l     F .text	00000034 move_window
1a000f24 l     F .text	00000084 check_fs
1a000fa8 l     F .text	000004b4 find_volume
1a00145c l     F .text	00000086 find_bitmap
1a0014e2 l     F .text	00000078 change_bitmap
1a00155a l     F .text	0000011e put_fat
1a001678 l     F .text	00000030 fill_last_frag
1a0016a8 l     F .text	00000032 fill_first_frag
1a0016da l     F .text	00000172 get_fat
1a00184c l     F .text	000000b4 dir_sdi
1a001900 l     F .text	000001cc create_chain
1a001acc l     F .text	0000013e remove_chain
1a001c0a l     F .text	00000052 dir_clear
1a001c5c l     F .text	000000dc dir_next
1a001d38 l     F .text	00000100 load_xdir
1a001e38 l     F .text	0000003a load_obj_xdir
1a001e72 l     F .text	000000ea dir_read
1a001f5c l     F .text	0000006c dir_alloc
1a001fc8 l     F .text	0000005e store_xdir
1a002028 l     F .text	00000244 create_name
1a00226c l     F .text	00000036 xname_sum
1a0022a2 l     F .text	00000082 create_xdir
1a002324 l     F .text	000000a4 cmp_lfn
1a0023c8 l     F .text	0000015c dir_find
1a002524 l     F .text	000000b4 follow_path
1a0025d8 l     F .text	00000208 dir_register
1a0027e0 l     F .text	0000008c sync_fs
100005c4 l     O .bss	00000260 DirBuf
10000824 l     O .bss	00000008 FatFs
1000082c l     O .bss	00000002 Fsid
10000830 l     O .bss	00000200 LfnBuf
1a008434 l     O .text	00000080 ExCvt
1a0084b4 l     O .text	0000000d LfnOfs
1a0084c4 l     O .text	00000008 VolumeStr
00000000 l    df *ABS*	00000000 ffunicode.c
1a008500 l     O .text	000001f2 cvt1.5491
1a0086f4 l     O .text	000000bc cvt2.5492
1a0087b0 l     O .text	00000100 uc850
00000000 l    df *ABS*	00000000 heap_4.c
1a003018 l     F .text	00000064 prvHeapInit
10000a34 l     O .bss	00002000 ucHeap
1a00307c l     F .text	00000058 prvInsertBlockIntoFreeList
10000a30 l     O .bss	00000004 pxEnd
10002a34 l     O .bss	00000004 xBlockAllocatedBit
10002a38 l     O .bss	00000004 xFreeBytesRemaining
10002a3c l     O .bss	00000004 xMinimumEverFreeBytesRemaining
10002a40 l     O .bss	00000008 xStart
00000000 l    df *ABS*	00000000 queue.c
1a003260 l     F .text	00000012 prvGetDisinheritPriorityAfterTimeout
1a003272 l     F .text	0000001e prvIsQueueFull
1a003290 l     F .text	0000001a prvIsQueueEmpty
1a0032aa l     F .text	00000076 prvCopyDataToQueue
1a003320 l     F .text	00000024 prvCopyDataFromQueue
1a003344 l     F .text	0000006e prvUnlockQueue
1a003438 l     F .text	00000022 prvInitialiseNewQueue
1a0036b4 l     F .text	00000018 prvInitialiseMutex
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
10002a48 l     O .bss	00000168 uxIdleTaskStack.10728
10002bb0 l     O .bss	000005a0 uxTimerTaskStack.10735
10003150 l     O .bss	00000060 xIdleTaskTCB.10727
100031b0 l     O .bss	00000060 xTimerTaskTCB.10734
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a003c44 l     F .text	0000002c prvResetNextTaskUnblockTime
1a003c70 l     F .text	00000092 prvInitialiseNewTask
1a003d04 l     F .text	00000068 prvInitialiseTaskLists
1a003d6c l     F .text	000000ac prvAddNewTaskToReadyList
1a003e18 l     F .text	00000038 prvDeleteTCB
1a003e50 l     F .text	0000004c prvCheckTasksWaitingTermination
1a003e9c l     F .text	00000028 prvIdleTask
1a003ec4 l     F .text	00000098 prvAddCurrentTaskToDelayedList
10003214 l     O .bss	00000004 pxDelayedTaskList
10003218 l     O .bss	00000004 pxOverflowDelayedTaskList
1000321c l     O .bss	0000008c pxReadyTasksLists
100032a8 l     O .bss	00000004 uxCurrentNumberOfTasks
100032ac l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
100032b0 l     O .bss	00000004 uxPendedTicks
100032b4 l     O .bss	00000004 uxSchedulerSuspended
100032b8 l     O .bss	00000004 uxTaskNumber
100032bc l     O .bss	00000004 uxTopReadyPriority
100032c0 l     O .bss	00000014 xDelayedTaskList1
100032d4 l     O .bss	00000014 xDelayedTaskList2
100032e8 l     O .bss	00000004 xNextTaskUnblockTime
100032ec l     O .bss	00000004 xNumOfOverflows
100032f0 l     O .bss	00000014 xPendingReadyList
10003304 l     O .bss	00000004 xSchedulerRunning
10003308 l     O .bss	00000014 xSuspendedTaskList
1000331c l     O .bss	00000014 xTasksWaitingTermination
10003330 l     O .bss	00000004 xTickCount
10003334 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a004858 l     F .text	00000020 prvGetNextExpireTime
1a004878 l     F .text	00000048 prvInsertTimerInActiveList
1a0048c0 l     F .text	00000070 prvCheckForValidListAndQueue
1a004c74 l     F .text	00000016 prvTimerTask
1a004a00 l     F .text	00000078 prvSwitchTimerLists
1a004a78 l     F .text	0000002c prvSampleTimeNow
1a004aa4 l     F .text	00000060 prvProcessExpiredTimer
1a004b04 l     F .text	00000074 prvProcessTimerOrBlockTask
1a004b78 l     F .text	000000fc prvProcessReceivedCommands
10003338 l     O .bss	00000004 pxCurrentTimerList
1000333c l     O .bss	00000004 pxOverflowTimerList
10003340 l     O .bss	000000a0 ucStaticTimerQueueStorage.11828
100033e0 l     O .bss	00000014 xActiveTimerList1
100033f4 l     O .bss	00000014 xActiveTimerList2
10003408 l     O .bss	00000004 xLastTime.11777
1000340c l     O .bss	00000050 xStaticTimerQueue.11827
1000345c l     O .bss	00000004 xTimerQueue
10003460 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a004c8c l     F .text	00000040 prvTaskExitError
1a004ccc l     F .text	00000022 prvPortStartFirstTask
1a004cf4 l     F .text	0000000e vPortEnableVFP
1a004d60 l       .text	00000000 pxCurrentTCBConst2
1a004e40 l       .text	00000000 pxCurrentTCBConst
10003464 l     O .bss	00000001 ucMaxSysCallPriority
10003468 l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 fssdc.c
1a005034 l     F .text	00000018 newCardStatus
1a00504c l     F .text	00000004 chk_power
1a005050 l     F .text	00000024 SSPSend
1a005074 l     F .text	00000018 xmit_spi
1a0050b0 l     F .text	0000001c rcvr_spi
1a0050cc l     F .text	00000024 wait_ready
1a0050f0 l     F .text	00000018 deselect
1a005108 l     F .text	00000024 select_
1a00512c l     F .text	00000084 send_cmd
1a0051b0 l     F .text	0000005c xmit_datablock
1a00520c l     F .text	00000060 rcvr_datablock
10003470 l     O .bss	00000001 CardType
10003471 l     O .bss	00000001 Timer1
10003472 l     O .bss	00000001 Timer2
10003474 l     O .bss	00000004 g_statusUpdateCallback
10000004 l     O .data	00000001 g_cardStatus
10000005 l     O .data	00000001 g_diskStats
10000008 l     O .data	00000004 g_spiFastClock
1000000c l     O .data	00000004 g_spiSlowClock
00000000 l    df *ABS*	00000000 ffdisks.c
00000000 l    df *ABS*	00000000 board.c
1a00598c l     F .text	00000044 Board_LED_Init
1a0059d0 l     F .text	00000040 Board_TEC_Init
1a005a10 l     F .text	00000040 Board_GPIO_Init
1a005a50 l     F .text	00000030 Board_ADC_Init
1a005a80 l     F .text	00000038 Board_SPI_Init
1a005ab8 l     F .text	00000024 Board_I2C_Init
1a008b98 l     O .text	00000008 GpioButtons
1a008ba0 l     O .text	0000000c GpioLeds
1a008bac l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a008bc4 l     O .text	00000004 InitClkStates
1a008bc8 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000014 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a005cbc l     F .text	0000002c Chip_UART_GetIndex
1a008c3c l     O .text	00000008 UART_BClock
1a008c44 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a005e64 l     F .text	00000014 Chip_ADC_GetClockIndex
1a005e78 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a005f2c l     F .text	000000a4 pll_calc_divs
1a005fd0 l     F .text	0000010c pll_get_frac
1a0060dc l     F .text	0000004c Chip_Clock_FindBaseClock
1a006350 l     F .text	00000022 Chip_Clock_GetDivRate
10003478 l     O .bss	00000008 audio_usb_pll_freq
1a008c58 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 rtc_18xx_43xx.c
00000000 l    df *ABS*	00000000 sct_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a008cc4 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 sct_pwm_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0066f2 l     F .text	0000001a SSP_Write2BFifo
1a00670c l     F .text	00000018 SSP_Write1BFifo
1a006724 l     F .text	00000042 SSP_Read2BFifo
1a006766 l     F .text	00000040 SSP_Read1BFifo
1a0067a8 l     F .text	00000014 Chip_SSP_GetClockIndex
1a0067bc l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000004c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_sct.c
1a008d0c l     O .text	0000001c SCTdataList
00000000 l    df *ABS*	00000000 sapi_uart.c
1a008d28 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_spi.c
00000000 l    df *ABS*	00000000 sapi_pwm.c
1a006b94 l     F .text	0000000c pwmInitTimers
1a006c08 l     F .text	00000034 pwmAttach
1a006c3c l     F .text	0000001c pwmDetach
10000050 l     O .data	0000000b AttachedPWMList
1a008d70 l     O .text	0000000b pwmMap
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a006c88 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10003480 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_convert.c
10003484 l     O .bss	00000014 result.11556
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a0075cc l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a007cec l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 impure.c
1000006c l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a008f48 l       .init_array	00000000 __init_array_end
1a008f44 l       .bss_RAM5	00000000 __preinit_array_end
1a008f44 l       .init_array	00000000 __init_array_start
1a008f44 l       .bss_RAM5	00000000 __preinit_array_start
1a006174 g     F .text	0000001c Chip_Clock_GetDividerSource
1a00084c g     F .text	00000012 _isatty_r
1a007950 g     F .text	000000b8 _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a006a50 g     F .text	00000014 uartRxRead
1a00085e g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a00526c g     F .text	0000000c FSSDC_FatFs_DiskStatus
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a006bec g     F .text	0000001c pwmRead
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a007010 g     F .text	00000090 int64ToString
1a004da8 g     F .text	0000002c vPortExitCritical
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a006af4 g     F .text	0000001e uartReadByte
1a007920 g     F .text	00000030 printf
1a005b86 g     F .text	00000008 __stdio_init
100000d0 g     O .bss	00000001 control
1a0064d0 g     F .text	0000002e Chip_RTC_GetFullTime
1a007a72 g     F .text	00000024 __sseek
1a00764c g     F .text	00000060 __sinit
1a007aa0 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a003acc g     F .text	00000052 vQueueWaitForMessageRestricted
1a007620 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a005f1e g     F .text	0000000c Chip_ADC_SetResolution
1a007cea g     F .text	00000002 __malloc_unlock
1a005b30 g     F .text	00000014 Board_UARTPutSTR
1a004e44 g     F .text	0000002c SysTick_Handler
1a005d3c g     F .text	00000040 Chip_UART_SetBaud
1a0007a8  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a005b14 g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a004de0 g     F .text	00000064 PendSV_Handler
1a0036e2 g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a008f50 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0064fe g     F .text	00000010 Chip_SCT_Init
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
10003210 g     O .bss	00000004 pxCurrentTCB
1a000842 g     F .text	0000000a _fstat_r
53ff70e2 g       *ABS*	00000000 __valid_user_code_checksum
1a008f50 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a002f7c g     F .text	0000009c ff_wtoupper
1a004550 g     F .text	00000018 vTaskInternalSetTimeOutState
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a0063f2 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a004ea8 g     F .text	00000110 xPortStartScheduler
1a0077a8 g     F .text	00000016 memcpy
1a00445c g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a007614 g     F .text	0000000c _cleanup_r
1a004e70  w    F .text	00000038 vPortSetupTimerInterrupt
1a00592a g     F .text	0000000e disk_initialize
1a00716c g     F .text	00000000 .hidden __aeabi_uldivmod
100034f8 g       .noinit	00000000 _noinit
1a007a08 g     F .text	00000010 puts
1a0031f0 g     F .text	00000070 vPortFree
1a006b2c g     F .text	00000018 uartWriteString
100034f0 g     O .bss	00000004 SystemCoreClock
1a0003e8 g     F .text	000001d4 pwmMotor
1a005ce8 g     F .text	00000054 Chip_UART_Init
1a003908 g     F .text	0000019c xQueueSemaphoreTake
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a004fb8 g     F .text	0000005c vPortValidateInterruptPriority
1a000180  w    F .text	00000002 UsageFault_Handler
1a006470 g     F .text	0000004c Chip_Clock_GetRate
1a003b3a g     F .text	00000018 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a00591c g     F .text	0000000e disk_status
1a005bc8 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a00719c g     F .text	000002cc .hidden __udivmoddi4
1a0008e0 g     F .text	00000020 _sbrk_r
1a008b94 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a0069b4 g     F .text	0000004c Sct_EnablePwmFor
1a000868 g     F .text	0000004e _read_r
1a003b34 g     F .text	00000006 vListInitialiseItem
1a005978 g     F .text	00000012 disk_ioctl
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a0037b0 g     F .text	00000158 xQueueReceive
100034b0 g     O .bss	00000040 xQueueRegistry
1a003bc8 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a006a20 g     F .text	00000018 uartRxReady
1a008f48 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a008f0c g     O .text	00000004 _global_impure_ptr
1a0054b0 g     F .text	000000b4 FSSDC_FatFs_DiskWrite
10000010 g     O .data	00000004 VolToPart
1a007760 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a0030d4 g     F .text	0000011c pvPortMalloc
1a00695c g     F .text	00000024 Sct_Init
1a005b44 g     F .text	00000030 Board_Init
1a000836  w    F .text	00000002 _init
1a003b1e g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a0067e6 g     F .text	000000aa Chip_SSP_RWFrames_Blocking
1a0040d8 g     F .text	0000000c xTaskGetTickCount
1a003538 g     F .text	0000017c xQueueGenericSend
1a002f3c g     F .text	00000040 ff_uni2oem
1a0001ba  w    F .text	00000002 RTC_IRQHandler
100034f8 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a00542c g     F .text	00000084 FSSDC_FatFs_DiskRead
1a0007ac g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a005564 g     F .text	000002e8 FSSDC_FatFs_DiskIoCtl
1a0066a8 g     F .text	0000004a Chip_SCTPWM_SetRate
1a005c84 g     F .text	00000038 Chip_I2C_SetClockRate
1a0046cc g     F .text	000000b0 xTaskPriorityDisinherit
1a000300 g     F .text	000000e8 ReceiveBT
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a006128 g     F .text	0000004c Chip_Clock_EnableCrystal
1a005278 g     F .text	000001b4 FSSDC_FatFs_DiskInitialize
1a00584c g     F .text	00000060 FSSDC_InitSPI
10008000 g       *ABS*	00000000 __top_RamLoc32
1a0044c4 g     F .text	0000008c xTaskRemoveFromEventList
1a003c0c  w    F .text	0000001c vApplicationMallocFailedHook
1a00018a g     F .text	0000001e data_init
1a0006a0 g     F .text	00000108 saveInSd
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a008eac g     O .text	00000020 __sf_fake_stderr
1a005c60 g     F .text	00000024 Chip_I2C_Init
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a0062e4 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a008d7c g     O .text	000000e6 gpioPinsInit
1a003be0  w    F .text	0000002c vAssertCalled
1a00483c g     F .text	0000001c pvTaskIncrementMutexHeldCount
1a006b12 g     F .text	0000001a uartWriteByte
1a0067d4 g     F .text	00000012 Chip_SSP_SetClockRate
1a006f3a g     F .text	00000016 gpioToggle
1a007d1a g     F .text	00000024 __sfputs_r
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a008280 g     F .text	00000000 memchr
1a004568 g     F .text	00000080 xTaskCheckForTimeOut
1a0077d0 g     F .text	0000009c _free_r
1a0063cc g     F .text	00000026 Chip_Clock_GetBaseClock
1a004614 g     F .text	000000b8 xTaskPriorityInherit
1a005914 g     F .text	00000008 disk_timerproc
100000d0 g       .bss	00000000 _bss
1a005eec g     F .text	00000032 Chip_ADC_SetSampleRate
1a002f14 g     F .text	00000028 f_close
1000346c g     O .bss	00000004 freeRtosInterruptCallback
1a0040c8 g     F .text	00000010 vTaskSuspendAll
1a00508c g     F .text	00000024 SSPReceive
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a006890 g     F .text	0000003e Chip_SSP_SetBitRate
1a003b86 g     F .text	00000028 uxListRemove
1a00650e g     F .text	00000002 Chip_GPIO_Init
1a008bc0 g     O .text	00000004 OscRateIn
1a006a78 g     F .text	0000007c uartInit
1a003f5c g     F .text	00000072 xTaskCreateStatic
100034f8 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a004394 g     F .text	000000c8 vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a00345a g     F .text	00000090 xQueueGenericCreateStatic
1a00448c g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a000838 g     F .text	0000000a _close_r
1a006cbc g     F .text	000001ac gpioInit
1a003bb0 g     F .text	00000018 vApplicationGetIdleTaskMemory
100034a0 g     O .bss	00000004 TiempoPulsado
1a006c58 g     F .text	00000024 pwmInit
1a004994 g     F .text	0000006c xTimerGenericCommand
1a007b44 g     F .text	000000dc __swsetup_r
1a003c28  w    F .text	0000001c vApplicationStackOverflowHook
1a007468  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0076ac g     F .text	00000078 __sfp
1a007a18 g     F .text	00000022 __sread
1a0058d8 g     F .text	0000003c get_fattime
1a006f50 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a007ce8 g     F .text	00000002 __malloc_lock
1a005b00 g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a007578 g     F .text	00000054 _fflush_r
1a008ecc g     O .text	00000020 __sf_fake_stdin
1a006190 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a0077be g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a0005bc g     F .text	000000cc main
1a002db4 g     F .text	00000160 f_sync
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a006b44 g     F .text	00000050 spiInit
1a003b52 g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a004d40 g     F .text	00000024 SVC_Handler
1a007a96 g     F .text	00000008 __sclose
1a004930 g     F .text	00000064 xTimerCreateTimerTask
1a00699c g     F .text	00000018 Sct_SetDutyCycle
1a00786c g     F .text	000000b4 _malloc_r
1a006a38 g     F .text	00000018 uartTxReady
1a00286c g     F .text	00000050 f_mount
1a0042f0 g     F .text	000000a4 vTaskDelayUntil
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a006400 g     F .text	0000003c Chip_Clock_EnableOpts
1a005b7e g     F .text	00000008 __stdio_getchar
1a0034ea g     F .text	0000004e xQueueGenericCreate
1a0061ac g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a006264 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a006908 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a006fd8 g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a006e68 g     F .text	0000006a gpioWrite
1a000834  w    F .text	00000002 _fini
1a007920 g     F .text	00000030 iprintf
1a0041fc g     F .text	000000f4 xTaskResumeAll
1a004034 g     F .text	00000094 vTaskStartScheduler
1a005eac g     F .text	00000040 Chip_ADC_Init
100034f4 g     O .bss	00000004 g_pUsbApi
1a005b90 g     F .text	00000038 Board_SetupMuxing
1a005d7c g     F .text	000000e8 Chip_UART_SetBaudFDR
1a006c7c g     F .text	0000000a tickRead
1a0008b6 g     F .text	00000028 _write_r
10000060 g     O .data	00000008 tickRateMS
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a007f6c g     F .text	000000ea _printf_common
10000068 g     O .data	00000004 _impure_ptr
1a00746c g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
100034a4 g     O .bss	00000004 Mutex_UART
1a006980 g     F .text	0000001c Sct_Uint8ToTicks
1a006a64 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a0045e8 g     F .text	0000000c vTaskMissedYield
100034f8 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a0068d0 g     F .text	00000038 Chip_SSP_Init
1a003aa4 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0040e4 g     F .text	00000118 xTaskIncrementTick
1a007c20 g     F .text	00000048 __swhatbuf_r
1a005014 g     F .text	00000020 DAC_IRQHandler
1a005adc g     F .text	00000024 Board_Debug_Init
1a005b74 g     F .text	0000000a __stdio_putchar
1a0033b4 g     F .text	00000084 xQueueGenericReset
100000cc g       .data	00000000 _edata
1a005c40 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a002b74 g     F .text	00000240 f_write
1a003fce g     F .text	00000066 xTaskCreate
1a006664 g     F .text	00000044 Chip_SCTPWM_SetOutPin
1a000688 g     F .text	00000018 disk
1a006510 g     F .text	00000154 Chip_SetupCoreClock
1a007a3a g     F .text	00000038 __swrite
1a006a00 g     F .text	0000001e Sct_GetDutyCycle
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a0028bc g     F .text	000002b8 f_open
1a005958 g     F .text	00000020 disk_write
1a007d40 g     F .text	0000022c _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a007724 g     F .text	0000003c _fwalk_reent
1a0064bc g     F .text	00000014 SystemCoreClockUpdate
1a006ba0 g     F .text	00000028 pwmIsAttached
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a008eec g     O .text	00000020 __sf_fake_stdout
1a0045f4 g     F .text	00000020 xTaskGetSchedulerState
1a00477c g     F .text	000000c0 vTaskPriorityDisinheritAfterTimeout
1a007468  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a007c68 g     F .text	00000080 __smakebuf_r
1a005938 g     F .text	00000020 disk_read
1a004d08 g     F .text	0000002c pxPortInitialiseStack
1a008058 g     F .text	00000224 _printf_i
1a006bc8 g     F .text	00000024 pwmWrite
1a00643c g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1000349c g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a006ed2 g     F .text	00000068 gpioRead
1a006f6c g     F .text	0000006c boardInit
1a004d64 g     F .text	00000044 vPortEnterCritical
10003498 g     O .bss	00000004 __malloc_free_list
1a0070a0 g     F .text	0000002c intToString
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a007d40 g     F .text	0000022c _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a0070cc g     F .text	00000000 .hidden __aeabi_ldivmod
100034a8 g     O .bss	00000004 Mutex_t_pulsado
1a0036cc g     F .text	00000016 xQueueCreateMutex
1a0058ac g     F .text	0000002c FSSDC_Update
1a006374 g     F .text	00000058 Chip_Clock_SetBaseClock
1a006940 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
100034ac g     O .bss	00000004 Evento_pulsado
1a005c34 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 ad 07 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a e2 70 ff 53     }............p.S
	...
1a00002c:	41 4d 00 1a 85 01 00 1a 00 00 00 00 e1 4d 00 1a     AM...........M..
1a00003c:	45 4e 00 1a                                         EN..

1a000040 <g_pfnVendorVectors>:
1a000040:	15 50 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     .P..............
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	51 6f 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     Qo..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a008f50 	.word	0x1a008f50
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000cc 	.word	0x000000cc
1a000120:	1a008f50 	.word	0x1a008f50
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a008f50 	.word	0x1a008f50
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a008f50 	.word	0x1a008f50
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a008f50 	.word	0x1a008f50
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000d0 	.word	0x100000d0
1a000154:	00003428 	.word	0x00003428
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <ReceiveBT>:


// Implementacion de funcion de la tarea ReceiveBT

void ReceiveBT ( void* taskParmPtr )
{
1a000300:	b500      	push	{lr}
1a000302:	b083      	sub	sp, #12
	   uint8_t data = 0; //variable para registrar la entrada desde el celular por BT
1a000304:	2300      	movs	r3, #0
1a000306:	f88d 3007 	strb.w	r3, [sp, #7]
1a00030a:	e005      	b.n	1a000318 <ReceiveBT+0x18>
     if( uartReadByte( UART_PC, &data ) )   //para ver lo que envia el BT
       {
	    uartWriteByte( UART_BLUETOOTH, data );
       }

   if( uartReadByte( UART_BLUETOOTH, &data ) ) //Si se Reciben de datos por BT en cada caso utilizo el semaforo
1a00030c:	f10d 0107 	add.w	r1, sp, #7
1a000310:	2005      	movs	r0, #5
1a000312:	f006 fbef 	bl	1a006af4 <uartReadByte>
1a000316:	b960      	cbnz	r0, 1a000332 <ReceiveBT+0x32>
     if( uartReadByte( UART_PC, &data ) )   //para ver lo que envia el BT
1a000318:	f10d 0107 	add.w	r1, sp, #7
1a00031c:	2003      	movs	r0, #3
1a00031e:	f006 fbe9 	bl	1a006af4 <uartReadByte>
1a000322:	2800      	cmp	r0, #0
1a000324:	d0f2      	beq.n	1a00030c <ReceiveBT+0xc>
	    uartWriteByte( UART_BLUETOOTH, data );
1a000326:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a00032a:	2005      	movs	r0, #5
1a00032c:	f006 fbf1 	bl	1a006b12 <uartWriteByte>
1a000330:	e7ec      	b.n	1a00030c <ReceiveBT+0xc>
	    //para modificar la variable y luego lo libero.
     {
      if( data == 'C' )
1a000332:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000336:	2b43      	cmp	r3, #67	; 0x43
1a000338:	d011      	beq.n	1a00035e <ReceiveBT+0x5e>
         xSemaphoreTake(Mutex_UART,portMAX_DELAY);
         control = 1;
         xSemaphoreGive(Mutex_UART);
      }

      if( data == 'A' )
1a00033a:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a00033e:	2b41      	cmp	r3, #65	; 0x41
1a000340:	d01d      	beq.n	1a00037e <ReceiveBT+0x7e>
          xSemaphoreTake(Mutex_UART,portMAX_DELAY);
          control = 2;
          xSemaphoreGive(Mutex_UART);
      }

      if( data == 'B' )
1a000342:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000346:	2b42      	cmp	r3, #66	; 0x42
1a000348:	d029      	beq.n	1a00039e <ReceiveBT+0x9e>
      	  xSemaphoreTake(Mutex_UART,portMAX_DELAY);
          control = 3;
          xSemaphoreGive(Mutex_UART);
      }

      if( data == 'D' )
1a00034a:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a00034e:	2b44      	cmp	r3, #68	; 0x44
1a000350:	d035      	beq.n	1a0003be <ReceiveBT+0xbe>
      {
          xSemaphoreTake(Mutex_UART,portMAX_DELAY);
          control = 4;
          xSemaphoreGive(Mutex_UART);
      }
      uartWriteByte( UART_PC, data );
1a000352:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a000356:	2003      	movs	r0, #3
1a000358:	f006 fbdb 	bl	1a006b12 <uartWriteByte>
1a00035c:	e7dc      	b.n	1a000318 <ReceiveBT+0x18>
         xSemaphoreTake(Mutex_UART,portMAX_DELAY);
1a00035e:	4c20      	ldr	r4, [pc, #128]	; (1a0003e0 <ReceiveBT+0xe0>)
1a000360:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000364:	6820      	ldr	r0, [r4, #0]
1a000366:	f003 facf 	bl	1a003908 <xQueueSemaphoreTake>
         control = 1;
1a00036a:	4b1e      	ldr	r3, [pc, #120]	; (1a0003e4 <ReceiveBT+0xe4>)
1a00036c:	2201      	movs	r2, #1
1a00036e:	701a      	strb	r2, [r3, #0]
         xSemaphoreGive(Mutex_UART);
1a000370:	2300      	movs	r3, #0
1a000372:	461a      	mov	r2, r3
1a000374:	4619      	mov	r1, r3
1a000376:	6820      	ldr	r0, [r4, #0]
1a000378:	f003 f8de 	bl	1a003538 <xQueueGenericSend>
1a00037c:	e7dd      	b.n	1a00033a <ReceiveBT+0x3a>
          xSemaphoreTake(Mutex_UART,portMAX_DELAY);
1a00037e:	4c18      	ldr	r4, [pc, #96]	; (1a0003e0 <ReceiveBT+0xe0>)
1a000380:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000384:	6820      	ldr	r0, [r4, #0]
1a000386:	f003 fabf 	bl	1a003908 <xQueueSemaphoreTake>
          control = 2;
1a00038a:	4b16      	ldr	r3, [pc, #88]	; (1a0003e4 <ReceiveBT+0xe4>)
1a00038c:	2202      	movs	r2, #2
1a00038e:	701a      	strb	r2, [r3, #0]
          xSemaphoreGive(Mutex_UART);
1a000390:	2300      	movs	r3, #0
1a000392:	461a      	mov	r2, r3
1a000394:	4619      	mov	r1, r3
1a000396:	6820      	ldr	r0, [r4, #0]
1a000398:	f003 f8ce 	bl	1a003538 <xQueueGenericSend>
1a00039c:	e7d1      	b.n	1a000342 <ReceiveBT+0x42>
      	  xSemaphoreTake(Mutex_UART,portMAX_DELAY);
1a00039e:	4c10      	ldr	r4, [pc, #64]	; (1a0003e0 <ReceiveBT+0xe0>)
1a0003a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0003a4:	6820      	ldr	r0, [r4, #0]
1a0003a6:	f003 faaf 	bl	1a003908 <xQueueSemaphoreTake>
          control = 3;
1a0003aa:	4b0e      	ldr	r3, [pc, #56]	; (1a0003e4 <ReceiveBT+0xe4>)
1a0003ac:	2203      	movs	r2, #3
1a0003ae:	701a      	strb	r2, [r3, #0]
          xSemaphoreGive(Mutex_UART);
1a0003b0:	2300      	movs	r3, #0
1a0003b2:	461a      	mov	r2, r3
1a0003b4:	4619      	mov	r1, r3
1a0003b6:	6820      	ldr	r0, [r4, #0]
1a0003b8:	f003 f8be 	bl	1a003538 <xQueueGenericSend>
1a0003bc:	e7c5      	b.n	1a00034a <ReceiveBT+0x4a>
          xSemaphoreTake(Mutex_UART,portMAX_DELAY);
1a0003be:	4c08      	ldr	r4, [pc, #32]	; (1a0003e0 <ReceiveBT+0xe0>)
1a0003c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0003c4:	6820      	ldr	r0, [r4, #0]
1a0003c6:	f003 fa9f 	bl	1a003908 <xQueueSemaphoreTake>
          control = 4;
1a0003ca:	4b06      	ldr	r3, [pc, #24]	; (1a0003e4 <ReceiveBT+0xe4>)
1a0003cc:	2204      	movs	r2, #4
1a0003ce:	701a      	strb	r2, [r3, #0]
          xSemaphoreGive(Mutex_UART);
1a0003d0:	2300      	movs	r3, #0
1a0003d2:	461a      	mov	r2, r3
1a0003d4:	4619      	mov	r1, r3
1a0003d6:	6820      	ldr	r0, [r4, #0]
1a0003d8:	f003 f8ae 	bl	1a003538 <xQueueGenericSend>
1a0003dc:	e7b9      	b.n	1a000352 <ReceiveBT+0x52>
1a0003de:	bf00      	nop
1a0003e0:	100034a4 	.word	0x100034a4
1a0003e4:	100000d0 	.word	0x100000d0

1a0003e8 <pwmMotor>:
/*==================[funcion principal]======================================*/


// Implementacion de funcion de la tarea pwmMotor
void pwmMotor(void* taskParmPtr)
	{
1a0003e8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0003ea:	b083      	sub	sp, #12
	int16_t pwmVal = 0; // otra variale por si quiero leer el valor del pin
	int16_t control2 = 0; //variable que indica la instruccion en el switch


	   portTickType xPeriodicity =  400 / portTICK_RATE_MS;
	   portTickType xLastWakeTime = xTaskGetTickCount();
1a0003ec:	f003 fe74 	bl	1a0040d8 <xTaskGetTickCount>
1a0003f0:	9001      	str	r0, [sp, #4]

	/* Configurar PWM */

	initTim = pwmConfig( 0, PWM_ENABLE ); //inicializa el timer para los pulsos con Frecuencia predet 1Khz
1a0003f2:	2100      	movs	r1, #0
1a0003f4:	4608      	mov	r0, r1
1a0003f6:	f006 fc2f 	bl	1a006c58 <pwmInit>
	int16_t  dutyCycle0 = 0; // ciclo transitorio
1a0003fa:	2700      	movs	r7, #0
	bool_t fT1 = 1,fT2 = 0,fT3 = 0,fT4 = 0;
1a0003fc:	2601      	movs	r6, #1
1a0003fe:	e011      	b.n	1a000424 <pwmMotor+0x3c>
		switch (control2)
		  {

		    case 1: //Se presionó la tecla deshabilitar por mas que se presionen
		    	    //las otras no deberia funcionar el PWM
		   	  gpioWrite( LED2, FALSE); //apago led de maximo pwm
1a000400:	2100      	movs	r1, #0
1a000402:	202c      	movs	r0, #44	; 0x2c
1a000404:	f006 fd30 	bl	1a006e68 <gpioWrite>
		   	  pwmWrite( PWM6, dutyCycleInit ); //primero lo pongo en cero por si venia con algun valor
1a000408:	2100      	movs	r1, #0
1a00040a:	2006      	movs	r0, #6
1a00040c:	f006 fbdc 	bl	1a006bc8 <pwmWrite>
		      dutyCycle0 = 0;
		      test1 = pwmConfig( PWM6, PWM_DISABLE_OUTPUT );// deshabilito PWM
1a000410:	2103      	movs	r1, #3
1a000412:	2006      	movs	r0, #6
1a000414:	f006 fc20 	bl	1a006c58 <pwmInit>
		      if (test1) //verifica que se deshabilito y prende un led y apaga el de habilitado
1a000418:	2800      	cmp	r0, #0
1a00041a:	d13b      	bne.n	1a000494 <pwmMotor+0xac>
		          {
		    	  gpioWrite( LED1, TRUE); //pwm deshabilitado
	              gpioWrite( LED3, FALSE);
		          }
			  fT1 = TRUE;  //es un flag de estado
			  control = 0;  //vuelvo a cero para reiniciar
1a00041c:	2700      	movs	r7, #0
1a00041e:	4b65      	ldr	r3, [pc, #404]	; (1a0005b4 <pwmMotor+0x1cc>)
1a000420:	701f      	strb	r7, [r3, #0]
			  fT1 = TRUE;  //es un flag de estado
1a000422:	2601      	movs	r6, #1
		valor0 = !gpioRead( TEC1 ); //valor = true (!false), si la tecla esta a GD es decir presionada la (si la tecla esta en true=1, esta levantada)
1a000424:	2024      	movs	r0, #36	; 0x24
1a000426:	f006 fd54 	bl	1a006ed2 <gpioRead>
		if (valor0)
1a00042a:	b910      	cbnz	r0, 1a000432 <pwmMotor+0x4a>
			control = 1;
1a00042c:	4b61      	ldr	r3, [pc, #388]	; (1a0005b4 <pwmMotor+0x1cc>)
1a00042e:	2201      	movs	r2, #1
1a000430:	701a      	strb	r2, [r3, #0]
		valor1 = !gpioRead( TEC2 ); //valor = true (!false), si la tecla esta a GD es decir presionada la (si la tecla esta en true=1, esta levantada)
1a000432:	2025      	movs	r0, #37	; 0x25
1a000434:	f006 fd4d 	bl	1a006ed2 <gpioRead>
		if (valor1)
1a000438:	b910      	cbnz	r0, 1a000440 <pwmMotor+0x58>
			control = 2;
1a00043a:	4b5e      	ldr	r3, [pc, #376]	; (1a0005b4 <pwmMotor+0x1cc>)
1a00043c:	2202      	movs	r2, #2
1a00043e:	701a      	strb	r2, [r3, #0]
		valor0 = !gpioRead( TEC3 ); //valor = true (!false), si la tecla esta a GD es decir presionada la (si la tecla esta en true=1, esta levantada)
1a000440:	2026      	movs	r0, #38	; 0x26
1a000442:	f006 fd46 	bl	1a006ed2 <gpioRead>
		if (valor0)
1a000446:	b910      	cbnz	r0, 1a00044e <pwmMotor+0x66>
			control = 3;
1a000448:	4b5a      	ldr	r3, [pc, #360]	; (1a0005b4 <pwmMotor+0x1cc>)
1a00044a:	2203      	movs	r2, #3
1a00044c:	701a      	strb	r2, [r3, #0]
		valor1 = !gpioRead( TEC4 ); //valor = true (!false), si la tecla esta a GD es decir presionada la (si la tecla esta en true=1, esta levantada)
1a00044e:	2027      	movs	r0, #39	; 0x27
1a000450:	f006 fd3f 	bl	1a006ed2 <gpioRead>
		if (valor1)
1a000454:	b910      	cbnz	r0, 1a00045c <pwmMotor+0x74>
			control = 4;
1a000456:	4b57      	ldr	r3, [pc, #348]	; (1a0005b4 <pwmMotor+0x1cc>)
1a000458:	2204      	movs	r2, #4
1a00045a:	701a      	strb	r2, [r3, #0]
        xSemaphoreTake(Mutex_UART,portMAX_DELAY);
1a00045c:	4d56      	ldr	r5, [pc, #344]	; (1a0005b8 <pwmMotor+0x1d0>)
1a00045e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000462:	6828      	ldr	r0, [r5, #0]
1a000464:	f003 fa50 	bl	1a003908 <xQueueSemaphoreTake>
		control2 = control;
1a000468:	4b52      	ldr	r3, [pc, #328]	; (1a0005b4 <pwmMotor+0x1cc>)
1a00046a:	781c      	ldrb	r4, [r3, #0]
		xSemaphoreGive(Mutex_UART);
1a00046c:	2300      	movs	r3, #0
1a00046e:	461a      	mov	r2, r3
1a000470:	4619      	mov	r1, r3
1a000472:	6828      	ldr	r0, [r5, #0]
1a000474:	f003 f860 	bl	1a003538 <xQueueGenericSend>
		switch (control2)
1a000478:	1e63      	subs	r3, r4, #1
1a00047a:	2b03      	cmp	r3, #3
1a00047c:	d8d2      	bhi.n	1a000424 <pwmMotor+0x3c>
1a00047e:	a201      	add	r2, pc, #4	; (adr r2, 1a000484 <pwmMotor+0x9c>)
1a000480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a000484:	1a000401 	.word	0x1a000401
1a000488:	1a0004a7 	.word	0x1a0004a7
1a00048c:	1a0004e9 	.word	0x1a0004e9
1a000490:	1a000553 	.word	0x1a000553
		    	  gpioWrite( LED1, TRUE); //pwm deshabilitado
1a000494:	2101      	movs	r1, #1
1a000496:	202b      	movs	r0, #43	; 0x2b
1a000498:	f006 fce6 	bl	1a006e68 <gpioWrite>
	              gpioWrite( LED3, FALSE);
1a00049c:	2100      	movs	r1, #0
1a00049e:	202d      	movs	r0, #45	; 0x2d
1a0004a0:	f006 fce2 	bl	1a006e68 <gpioWrite>
1a0004a4:	e7ba      	b.n	1a00041c <pwmMotor+0x34>
			break;

		    case 2:       //esta funcion habilita el PWM y lo pone en cero
		    	          //activa un flag que permite luego acelerar desacelerar

		      gpioWrite( LED2, FALSE); //apago led de maximo pwm
1a0004a6:	2100      	movs	r1, #0
1a0004a8:	202c      	movs	r0, #44	; 0x2c
1a0004aa:	f006 fcdd 	bl	1a006e68 <gpioWrite>
			  test2 = pwmConfig( PWM6, PWM_ENABLE_OUTPUT ); // testeo de que se habilitó
1a0004ae:	2102      	movs	r1, #2
1a0004b0:	2006      	movs	r0, #6
1a0004b2:	f006 fbd1 	bl	1a006c58 <pwmInit>
1a0004b6:	4604      	mov	r4, r0
		   	  pwmWrite( PWM6, dutyCycleInit ); // pone PWM en cero
1a0004b8:	2100      	movs	r1, #0
1a0004ba:	2006      	movs	r0, #6
1a0004bc:	f006 fb84 	bl	1a006bc8 <pwmWrite>
		      dutyCycle0 = 0;
		      vTaskDelayUntil( &xLastWakeTime, xPeriodicity ); // espera 400ms para que se establezca el PWM
1a0004c0:	f44f 71c8 	mov.w	r1, #400	; 0x190
1a0004c4:	a801      	add	r0, sp, #4
1a0004c6:	f003 ff13 	bl	1a0042f0 <vTaskDelayUntil>

		      if (test2) //verifica que se habilito y prende un led y apaga el de deshabilitado
1a0004ca:	b924      	cbnz	r4, 1a0004d6 <pwmMotor+0xee>
		          {
		    	  gpioWrite( LED3, TRUE); //PWM Habilitado
	              gpioWrite( LED1, FALSE);
		          }
			  fT1 = FALSE;  // NO ESTA DESHABILITADO
			  control = 0; //vuelvo a cero para reiniciar
1a0004cc:	2600      	movs	r6, #0
1a0004ce:	4b39      	ldr	r3, [pc, #228]	; (1a0005b4 <pwmMotor+0x1cc>)
1a0004d0:	701e      	strb	r6, [r3, #0]
		      dutyCycle0 = 0;
1a0004d2:	4637      	mov	r7, r6

			break;
1a0004d4:	e7a6      	b.n	1a000424 <pwmMotor+0x3c>
		    	  gpioWrite( LED3, TRUE); //PWM Habilitado
1a0004d6:	2101      	movs	r1, #1
1a0004d8:	202d      	movs	r0, #45	; 0x2d
1a0004da:	f006 fcc5 	bl	1a006e68 <gpioWrite>
	              gpioWrite( LED1, FALSE);
1a0004de:	2100      	movs	r1, #0
1a0004e0:	202b      	movs	r0, #43	; 0x2b
1a0004e2:	f006 fcc1 	bl	1a006e68 <gpioWrite>
1a0004e6:	e7f1      	b.n	1a0004cc <pwmMotor+0xe4>

		    case 3:

		      if(fT1 == FALSE)  //esta habilitado para incrementar,
1a0004e8:	2e00      	cmp	r6, #0
1a0004ea:	d19b      	bne.n	1a000424 <pwmMotor+0x3c>
			    {
				   if(dutyCycle0 == 0) //si el estado anterior era cero establece un PWM inicial
1a0004ec:	b1d7      	cbz	r7, 1a000524 <pwmMotor+0x13c>
					  dutyCycle0 = 10;              //es el valor inicial luego de que pwm sea cero
				      vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
				   }
				   else
					{
					  if(dutyCycle0 < 250) //si tenia un valor mayor a cero y menor a 250(deberia ser siempre menor)
1a0004ee:	2ff9      	cmp	r7, #249	; 0xf9
1a0004f0:	dc2a      	bgt.n	1a000548 <pwmMotor+0x160>
						  {
							gpioWrite( LED1, FALSE);  //Apago el pwm deshabilitado
1a0004f2:	2100      	movs	r1, #0
1a0004f4:	202b      	movs	r0, #43	; 0x2b
1a0004f6:	f006 fcb7 	bl	1a006e68 <gpioWrite>
							gpioWrite( LED2, FALSE); //apago led de maximo pwm
1a0004fa:	2100      	movs	r1, #0
1a0004fc:	202c      	movs	r0, #44	; 0x2c
1a0004fe:	f006 fcb3 	bl	1a006e68 <gpioWrite>
							dutyCycle0 = dutyCycle0 + 10;
1a000502:	f107 010a 	add.w	r1, r7, #10
1a000506:	b289      	uxth	r1, r1
1a000508:	b20f      	sxth	r7, r1
							pwmWrite( PWM6, dutyCycle0 );
1a00050a:	b2c9      	uxtb	r1, r1
1a00050c:	2006      	movs	r0, #6
1a00050e:	f006 fb5b 	bl	1a006bc8 <pwmWrite>
							control = 0;
1a000512:	4b28      	ldr	r3, [pc, #160]	; (1a0005b4 <pwmMotor+0x1cc>)
1a000514:	2200      	movs	r2, #0
1a000516:	701a      	strb	r2, [r3, #0]
						    vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a000518:	f44f 71c8 	mov.w	r1, #400	; 0x190
1a00051c:	a801      	add	r0, sp, #4
1a00051e:	f003 fee7 	bl	1a0042f0 <vTaskDelayUntil>
1a000522:	e77f      	b.n	1a000424 <pwmMotor+0x3c>
					  gpioWrite( LED1, FALSE);   //Apaga el de led deshabilitado
1a000524:	2100      	movs	r1, #0
1a000526:	202b      	movs	r0, #43	; 0x2b
1a000528:	f006 fc9e 	bl	1a006e68 <gpioWrite>
				      vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a00052c:	f44f 71c8 	mov.w	r1, #400	; 0x190
1a000530:	a801      	add	r0, sp, #4
1a000532:	f003 fedd 	bl	1a0042f0 <vTaskDelayUntil>
	 	               else
	 	            	  gpioWrite( LED2, TRUE);
			            	break;
					}

				gpioWrite( LEDR, dutyCycle0);
1a000536:	210a      	movs	r1, #10
1a000538:	2028      	movs	r0, #40	; 0x28
1a00053a:	f006 fc95 	bl	1a006e68 <gpioWrite>
				control = 0;
1a00053e:	4b1d      	ldr	r3, [pc, #116]	; (1a0005b4 <pwmMotor+0x1cc>)
1a000540:	2200      	movs	r2, #0
1a000542:	701a      	strb	r2, [r3, #0]
					  dutyCycle0 = 10;              //es el valor inicial luego de que pwm sea cero
1a000544:	270a      	movs	r7, #10
1a000546:	e76d      	b.n	1a000424 <pwmMotor+0x3c>
	 	            	  gpioWrite( LED2, TRUE);
1a000548:	2101      	movs	r1, #1
1a00054a:	202c      	movs	r0, #44	; 0x2c
1a00054c:	f006 fc8c 	bl	1a006e68 <gpioWrite>
1a000550:	e768      	b.n	1a000424 <pwmMotor+0x3c>
   			break;


		    case 4:

			  if(fT1 == FALSE)  //idem anterior pero para desacelerar
1a000552:	2e00      	cmp	r6, #0
1a000554:	f47f af66 	bne.w	1a000424 <pwmMotor+0x3c>
			  {
				  if(dutyCycle0 <= 10)
1a000558:	2f0a      	cmp	r7, #10
1a00055a:	dc10      	bgt.n	1a00057e <pwmMotor+0x196>
				     {
					  pwmWrite( PWM6, dutyCycleInit );
1a00055c:	2100      	movs	r1, #0
1a00055e:	2006      	movs	r0, #6
1a000560:	f006 fb32 	bl	1a006bc8 <pwmWrite>
					  gpioWrite( LED1, dutyCycle0);  // Me indica que llegue al PWM minimo
1a000564:	b2f9      	uxtb	r1, r7
1a000566:	202b      	movs	r0, #43	; 0x2b
1a000568:	f006 fc7e 	bl	1a006e68 <gpioWrite>
					  vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a00056c:	f44f 71c8 	mov.w	r1, #400	; 0x190
1a000570:	a801      	add	r0, sp, #4
1a000572:	f003 febd 	bl	1a0042f0 <vTaskDelayUntil>
					  control = 0;
1a000576:	4b0f      	ldr	r3, [pc, #60]	; (1a0005b4 <pwmMotor+0x1cc>)
1a000578:	2200      	movs	r2, #0
1a00057a:	701a      	strb	r2, [r3, #0]
					  break;            //no se puede desacelerar menos de cero
1a00057c:	e752      	b.n	1a000424 <pwmMotor+0x3c>
				     }
				  else
				  {
					    gpioWrite( LED2, FALSE);
1a00057e:	2100      	movs	r1, #0
1a000580:	202c      	movs	r0, #44	; 0x2c
1a000582:	f006 fc71 	bl	1a006e68 <gpioWrite>
					    dutyCycle0 = dutyCycle0 - 10;
1a000586:	f1a7 040a 	sub.w	r4, r7, #10
1a00058a:	b2a4      	uxth	r4, r4
1a00058c:	b227      	sxth	r7, r4
						pwmWrite( PWM6, dutyCycle0 );
1a00058e:	b2e4      	uxtb	r4, r4
1a000590:	4621      	mov	r1, r4
1a000592:	2006      	movs	r0, #6
1a000594:	f006 fb18 	bl	1a006bc8 <pwmWrite>
					    vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a000598:	f44f 71c8 	mov.w	r1, #400	; 0x190
1a00059c:	a801      	add	r0, sp, #4
1a00059e:	f003 fea7 	bl	1a0042f0 <vTaskDelayUntil>
				  }
				gpioWrite( LEDR, dutyCycle0);
1a0005a2:	4621      	mov	r1, r4
1a0005a4:	2028      	movs	r0, #40	; 0x28
1a0005a6:	f006 fc5f 	bl	1a006e68 <gpioWrite>
				control = 0;
1a0005aa:	4b02      	ldr	r3, [pc, #8]	; (1a0005b4 <pwmMotor+0x1cc>)
1a0005ac:	2200      	movs	r2, #0
1a0005ae:	701a      	strb	r2, [r3, #0]
1a0005b0:	e738      	b.n	1a000424 <pwmMotor+0x3c>
1a0005b2:	bf00      	nop
1a0005b4:	100000d0 	.word	0x100000d0
1a0005b8:	100034a4 	.word	0x100034a4

1a0005bc <main>:
/*=====[Main function, program entry point after power on or reset]==========*/

DEBUG_PRINT_ENABLE;  //Para configurar los mensajes por monitor

int main( void )
{
1a0005bc:	b530      	push	{r4, r5, lr}
1a0005be:	b083      	sub	sp, #12
	uint8_t Error_state = 0;

	   // ---------- CONFIGURACIONES ------------------------------
	   // Inicializar y configurar la plataforma
	   boardConfig();
1a0005c0:	f006 fcd4 	bl	1a006f6c <boardInit>

	   // Inicializar UART_USB para conectar a la PC
	   uartConfig( UART_PC, 9600 );
1a0005c4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
1a0005c8:	2003      	movs	r0, #3
1a0005ca:	f006 fa55 	bl	1a006a78 <uartInit>
	   uartWriteString( UART_PC, "UART_PC configurada.\r\n" );
1a0005ce:	4921      	ldr	r1, [pc, #132]	; (1a000654 <main+0x98>)
1a0005d0:	2003      	movs	r0, #3
1a0005d2:	f006 faab 	bl	1a006b2c <uartWriteString>

	   // Inicializar UART_232 para conectar al modulo bluetooth
	   uartConfig( UART_BLUETOOTH, 9600 );
1a0005d6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
1a0005da:	2005      	movs	r0, #5
1a0005dc:	f006 fa4c 	bl	1a006a78 <uartInit>
	   uartWriteString( UART_PC, "UART_BLUETOOTH para modulo Bluetooth configurada.\r\n" );
1a0005e0:	491d      	ldr	r1, [pc, #116]	; (1a000658 <main+0x9c>)
1a0005e2:	2003      	movs	r0, #3
1a0005e4:	f006 faa2 	bl	1a006b2c <uartWriteString>


	   /* Attempt to create a semaphore. */
	   if (NULL == (Evento_pulsado = xSemaphoreCreateBinary()))   // la crea y comprueba al mismo tiempo
1a0005e8:	2203      	movs	r2, #3
1a0005ea:	2100      	movs	r1, #0
1a0005ec:	2001      	movs	r0, #1
1a0005ee:	f002 ff7c 	bl	1a0034ea <xQueueGenericCreate>
1a0005f2:	4b1a      	ldr	r3, [pc, #104]	; (1a00065c <main+0xa0>)
1a0005f4:	6018      	str	r0, [r3, #0]
	   {
		   Error_state =1;
	   }

	   if (NULL == (Mutex_t_pulsado = xSemaphoreCreateMutex()))
1a0005f6:	2001      	movs	r0, #1
1a0005f8:	f003 f868 	bl	1a0036cc <xQueueCreateMutex>
1a0005fc:	4b18      	ldr	r3, [pc, #96]	; (1a000660 <main+0xa4>)
1a0005fe:	6018      	str	r0, [r3, #0]
	   {
	   	   Error_state =1;
	   }

	   if (NULL == (Mutex_UART = xSemaphoreCreateMutex()))
1a000600:	2001      	movs	r0, #1
1a000602:	f003 f863 	bl	1a0036cc <xQueueCreateMutex>
1a000606:	4b17      	ldr	r3, [pc, #92]	; (1a000664 <main+0xa8>)
1a000608:	6018      	str	r0, [r3, #0]
	   }


   // Create a task in freeRTOS with dynamic memory

   xTaskCreate(
1a00060a:	2400      	movs	r4, #0
1a00060c:	9401      	str	r4, [sp, #4]
1a00060e:	2501      	movs	r5, #1
1a000610:	9500      	str	r5, [sp, #0]
1a000612:	4623      	mov	r3, r4
1a000614:	22b4      	movs	r2, #180	; 0xb4
1a000616:	4914      	ldr	r1, [pc, #80]	; (1a000668 <main+0xac>)
1a000618:	4814      	ldr	r0, [pc, #80]	; (1a00066c <main+0xb0>)
1a00061a:	f003 fcd8 	bl	1a003fce <xTaskCreate>
      0,                          // Parameter passed into the task.
      tskIDLE_PRIORITY+1,         // Priority at which the task is created.
      0                           // Pointer to the task created in the system
   );

   xTaskCreate(
1a00061e:	9401      	str	r4, [sp, #4]
1a000620:	9500      	str	r5, [sp, #0]
1a000622:	4623      	mov	r3, r4
1a000624:	22b4      	movs	r2, #180	; 0xb4
1a000626:	4912      	ldr	r1, [pc, #72]	; (1a000670 <main+0xb4>)
1a000628:	4812      	ldr	r0, [pc, #72]	; (1a000674 <main+0xb8>)
1a00062a:	f003 fcd0 	bl	1a003fce <xTaskCreate>
      0,                          // Parameter passed into the task.
      tskIDLE_PRIORITY+1,         // Priority at which the task is created.
      0                           // Pointer to the task created in the system
   );

   xTaskCreate(
1a00062e:	9401      	str	r4, [sp, #4]
1a000630:	9500      	str	r5, [sp, #0]
1a000632:	4623      	mov	r3, r4
1a000634:	22b4      	movs	r2, #180	; 0xb4
1a000636:	4910      	ldr	r1, [pc, #64]	; (1a000678 <main+0xbc>)
1a000638:	4810      	ldr	r0, [pc, #64]	; (1a00067c <main+0xc0>)
1a00063a:	f003 fcc8 	bl	1a003fce <xTaskCreate>
      0,                          // Parameter passed into the task.
      tskIDLE_PRIORITY+1,         // Priority at which the task is created.
      0                           // Pointer to the task created in the system
   );

   xTaskCreate(
1a00063e:	9401      	str	r4, [sp, #4]
1a000640:	9500      	str	r5, [sp, #0]
1a000642:	4623      	mov	r3, r4
1a000644:	22b4      	movs	r2, #180	; 0xb4
1a000646:	490e      	ldr	r1, [pc, #56]	; (1a000680 <main+0xc4>)
1a000648:	480e      	ldr	r0, [pc, #56]	; (1a000684 <main+0xc8>)
1a00064a:	f003 fcc0 	bl	1a003fce <xTaskCreate>
      0                           // Pointer to the task created in the system
   );



   vTaskStartScheduler(); // Initialize scheduler
1a00064e:	f003 fcf1 	bl	1a004034 <vTaskStartScheduler>
1a000652:	e7fe      	b.n	1a000652 <main+0x96>
1a000654:	1a008320 	.word	0x1a008320
1a000658:	1a008338 	.word	0x1a008338
1a00065c:	100034ac 	.word	0x100034ac
1a000660:	100034a8 	.word	0x100034a8
1a000664:	100034a4 	.word	0x100034a4
1a000668:	1a00836c 	.word	0x1a00836c
1a00066c:	1a000301 	.word	0x1a000301
1a000670:	1a008378 	.word	0x1a008378
1a000674:	1a0003e9 	.word	0x1a0003e9
1a000678:	1a008384 	.word	0x1a008384
1a00067c:	1a000689 	.word	0x1a000689
1a000680:	1a00838c 	.word	0x1a00838c
1a000684:	1a0006a1 	.word	0x1a0006a1

1a000688 <disk>:
   }
}

// Task implementation
void disk( void* taskParmPtr )
{
1a000688:	b500      	push	{lr}
1a00068a:	b083      	sub	sp, #12
   // ----- Task setup -----------------------------------


   // Periodic task every 10 ms
   portTickType xPeriodicity =  10 / portTICK_RATE_MS;
   portTickType xLastWakeTime = xTaskGetTickCount();
1a00068c:	f003 fd24 	bl	1a0040d8 <xTaskGetTickCount>
1a000690:	9001      	str	r0, [sp, #4]

   // ----- Task repeat for ever -------------------------
   while(TRUE) {
      disk_timerproc();   // Disk timer process
1a000692:	f005 f93f 	bl	1a005914 <disk_timerproc>

      // Send the task to the locked state during xPeriodicity
      // (periodical delay)
      vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a000696:	210a      	movs	r1, #10
1a000698:	a801      	add	r0, sp, #4
1a00069a:	f003 fe29 	bl	1a0042f0 <vTaskDelayUntil>
1a00069e:	e7f8      	b.n	1a000692 <disk+0xa>

1a0006a0 <saveInSd>:
   }
}

// Task implementation
void saveInSd( void* taskParmPtr )
{
1a0006a0:	b530      	push	{r4, r5, lr}
1a0006a2:	b083      	sub	sp, #12
   // ----- Task setup -----------------------------------
   // SPI configuration
   spiConfig( SPI0 );
1a0006a4:	2000      	movs	r0, #0
1a0006a6:	f006 fa4d 	bl	1a006b44 <spiInit>

   uartWriteString( UART_USB, "Inicializando\r\n" );
1a0006aa:	4934      	ldr	r1, [pc, #208]	; (1a00077c <saveInSd+0xdc>)
1a0006ac:	2003      	movs	r0, #3
1a0006ae:	f006 fa3d 	bl	1a006b2c <uartWriteString>
   FSSDC_InitSPI ();
1a0006b2:	f005 f8cb 	bl	1a00584c <FSSDC_InitSPI>
   if( f_mount( &fs, "SDC:", 0 ) != FR_OK ){
1a0006b6:	2200      	movs	r2, #0
1a0006b8:	4931      	ldr	r1, [pc, #196]	; (1a000780 <saveInSd+0xe0>)
1a0006ba:	4832      	ldr	r0, [pc, #200]	; (1a000784 <saveInSd+0xe4>)
1a0006bc:	f002 f8d6 	bl	1a00286c <f_mount>
1a0006c0:	b160      	cbz	r0, 1a0006dc <saveInSd+0x3c>
      while (1) {
         gpioToggle( LEDR );
1a0006c2:	2028      	movs	r0, #40	; 0x28
1a0006c4:	f006 fc39 	bl	1a006f3a <gpioToggle>
         uartWriteString( UART_USB, "SD no disponible\r\n" );
1a0006c8:	492f      	ldr	r1, [pc, #188]	; (1a000788 <saveInSd+0xe8>)
1a0006ca:	2003      	movs	r0, #3
1a0006cc:	f006 fa2e 	bl	1a006b2c <uartWriteString>
         delay(1000);
1a0006d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a0006d4:	2100      	movs	r1, #0
1a0006d6:	f006 fc7f 	bl	1a006fd8 <delay>
1a0006da:	e7f2      	b.n	1a0006c2 <saveInSd+0x22>
      }
   }

   // Periodic task every 1 s
   portTickType xPeriodicity =  500 / portTICK_RATE_MS;
   portTickType xLastWakeTime = xTaskGetTickCount();
1a0006dc:	f003 fcfc 	bl	1a0040d8 <xTaskGetTickCount>
1a0006e0:	9001      	str	r0, [sp, #4]
   
   uint8_t i = 0;
   int n = 0;
   int nbytes = 0;
1a0006e2:	2300      	movs	r3, #0
1a0006e4:	9300      	str	r3, [sp, #0]
1a0006e6:	e043      	b.n	1a000770 <saveInSd+0xd0>
   while(TRUE)
   {
	  	 pwmR = pwmRead( PWM6 );
	     for(i = 0; i < 4 ;i++)
	     {
	  	 buf[i] = intToString( pwmR );
1a0006e8:	b2e8      	uxtb	r0, r5
1a0006ea:	2100      	movs	r1, #0
1a0006ec:	f006 fcd8 	bl	1a0070a0 <intToString>
1a0006f0:	4b26      	ldr	r3, [pc, #152]	; (1a00078c <saveInSd+0xec>)
1a0006f2:	5518      	strb	r0, [r3, r4]
	     for(i = 0; i < 4 ;i++)
1a0006f4:	3401      	adds	r4, #1
1a0006f6:	b2e4      	uxtb	r4, r4
1a0006f8:	2c03      	cmp	r4, #3
1a0006fa:	d9f5      	bls.n	1a0006e8 <saveInSd+0x48>
	     }

         printf( "Valor PWM:%d \r\n",pwmR);
1a0006fc:	4629      	mov	r1, r5
1a0006fe:	4824      	ldr	r0, [pc, #144]	; (1a000790 <saveInSd+0xf0>)
1a000700:	f007 f90e 	bl	1a007920 <iprintf>
         uartWriteString( UART_BLUETOOTH, ("PWM:%d \r\n",buf) );
1a000704:	4921      	ldr	r1, [pc, #132]	; (1a00078c <saveInSd+0xec>)
1a000706:	2005      	movs	r0, #5
1a000708:	f006 fa10 	bl	1a006b2c <uartWriteString>


      if( f_open( &fp, "SDC:/log.txt", FA_WRITE | FA_OPEN_APPEND ) == FR_OK )
1a00070c:	2232      	movs	r2, #50	; 0x32
1a00070e:	4921      	ldr	r1, [pc, #132]	; (1a000794 <saveInSd+0xf4>)
1a000710:	4821      	ldr	r0, [pc, #132]	; (1a000798 <saveInSd+0xf8>)
1a000712:	f002 f8d3 	bl	1a0028bc <f_open>
1a000716:	b9f0      	cbnz	r0, 1a000756 <saveInSd+0xb6>
      {
         n = 24;
         f_write( &fp, buf, n, &nbytes );
1a000718:	4c1f      	ldr	r4, [pc, #124]	; (1a000798 <saveInSd+0xf8>)
1a00071a:	466b      	mov	r3, sp
1a00071c:	2218      	movs	r2, #24
1a00071e:	491b      	ldr	r1, [pc, #108]	; (1a00078c <saveInSd+0xec>)
1a000720:	4620      	mov	r0, r4
1a000722:	f002 fa27 	bl	1a002b74 <f_write>
         f_close(&fp);
1a000726:	4620      	mov	r0, r4
1a000728:	f002 fbf4 	bl	1a002f14 <f_close>

           if( nbytes == n )
1a00072c:	9b00      	ldr	r3, [sp, #0]
1a00072e:	2b18      	cmp	r3, #24
1a000730:	d008      	beq.n	1a000744 <saveInSd+0xa4>
            gpioWrite( LEDG, ON );
           }

           else
           {
            gpioWrite( LEDR, ON );
1a000732:	2101      	movs	r1, #1
1a000734:	2028      	movs	r0, #40	; 0x28
1a000736:	f006 fb97 	bl	1a006e68 <gpioWrite>
            uartWriteString( UART_USB, "Error al escribir\r\n ");
1a00073a:	4918      	ldr	r1, [pc, #96]	; (1a00079c <saveInSd+0xfc>)
1a00073c:	2003      	movs	r0, #3
1a00073e:	f006 f9f5 	bl	1a006b2c <uartWriteString>
1a000742:	e010      	b.n	1a000766 <saveInSd+0xc6>
            uartWriteString( UART_USB, "Escribio correctamente\r\n ");
1a000744:	4916      	ldr	r1, [pc, #88]	; (1a0007a0 <saveInSd+0x100>)
1a000746:	2003      	movs	r0, #3
1a000748:	f006 f9f0 	bl	1a006b2c <uartWriteString>
            gpioWrite( LEDG, ON );
1a00074c:	2101      	movs	r1, #1
1a00074e:	2029      	movs	r0, #41	; 0x29
1a000750:	f006 fb8a 	bl	1a006e68 <gpioWrite>
1a000754:	e007      	b.n	1a000766 <saveInSd+0xc6>

      }

      else
        {
         uartWriteString( UART_USB, "Error al abrir el archivo\r\n" );
1a000756:	4913      	ldr	r1, [pc, #76]	; (1a0007a4 <saveInSd+0x104>)
1a000758:	2003      	movs	r0, #3
1a00075a:	f006 f9e7 	bl	1a006b2c <uartWriteString>
         gpioWrite( LEDR, ON );
1a00075e:	2101      	movs	r1, #1
1a000760:	2028      	movs	r0, #40	; 0x28
1a000762:	f006 fb81 	bl	1a006e68 <gpioWrite>
        }

      // Send the task to the locked state during xPeriodicity
      // (periodical delay)
      vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a000766:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
1a00076a:	a801      	add	r0, sp, #4
1a00076c:	f003 fdc0 	bl	1a0042f0 <vTaskDelayUntil>
	  	 pwmR = pwmRead( PWM6 );
1a000770:	2006      	movs	r0, #6
1a000772:	f006 fa3b 	bl	1a006bec <pwmRead>
1a000776:	4605      	mov	r5, r0
	     for(i = 0; i < 4 ;i++)
1a000778:	2400      	movs	r4, #0
1a00077a:	e7bd      	b.n	1a0006f8 <saveInSd+0x58>
1a00077c:	1a008398 	.word	0x1a008398
1a000780:	1a0083a8 	.word	0x1a0083a8
1a000784:	10000388 	.word	0x10000388
1a000788:	1a0083b0 	.word	0x1a0083b0
1a00078c:	100000d4 	.word	0x100000d4
1a000790:	1a0083c4 	.word	0x1a0083c4
1a000794:	1a0083d4 	.word	0x1a0083d4
1a000798:	10000138 	.word	0x10000138
1a00079c:	1a008400 	.word	0x1a008400
1a0007a0:	1a0083e4 	.word	0x1a0083e4
1a0007a4:	1a008418 	.word	0x1a008418

1a0007a8 <initialise_monitor_handles>:
}
1a0007a8:	4770      	bx	lr
1a0007aa:	Address 0x000000001a0007aa is out of bounds.


1a0007ac <Reset_Handler>:
void Reset_Handler(void) {
1a0007ac:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a0007ae:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0007b0:	4b19      	ldr	r3, [pc, #100]	; (1a000818 <Reset_Handler+0x6c>)
1a0007b2:	4a1a      	ldr	r2, [pc, #104]	; (1a00081c <Reset_Handler+0x70>)
1a0007b4:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0007b6:	3304      	adds	r3, #4
1a0007b8:	4a19      	ldr	r2, [pc, #100]	; (1a000820 <Reset_Handler+0x74>)
1a0007ba:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0007bc:	2300      	movs	r3, #0
1a0007be:	e005      	b.n	1a0007cc <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0007c0:	4a18      	ldr	r2, [pc, #96]	; (1a000824 <Reset_Handler+0x78>)
1a0007c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0007c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0007ca:	3301      	adds	r3, #1
1a0007cc:	2b07      	cmp	r3, #7
1a0007ce:	d9f7      	bls.n	1a0007c0 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a0007d0:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a0007d2:	4b15      	ldr	r3, [pc, #84]	; (1a000828 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0007d4:	e007      	b.n	1a0007e6 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a0007d6:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0007da:	689a      	ldr	r2, [r3, #8]
1a0007dc:	6859      	ldr	r1, [r3, #4]
1a0007de:	6818      	ldr	r0, [r3, #0]
1a0007e0:	f7ff fcd3 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0007e4:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0007e6:	4a11      	ldr	r2, [pc, #68]	; (1a00082c <Reset_Handler+0x80>)
1a0007e8:	4293      	cmp	r3, r2
1a0007ea:	d3f4      	bcc.n	1a0007d6 <Reset_Handler+0x2a>
1a0007ec:	e006      	b.n	1a0007fc <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a0007ee:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0007f0:	6859      	ldr	r1, [r3, #4]
1a0007f2:	f854 0b08 	ldr.w	r0, [r4], #8
1a0007f6:	f7ff fcd7 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0007fa:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0007fc:	4a0c      	ldr	r2, [pc, #48]	; (1a000830 <Reset_Handler+0x84>)
1a0007fe:	4293      	cmp	r3, r2
1a000800:	d3f5      	bcc.n	1a0007ee <Reset_Handler+0x42>
    SystemInit();
1a000802:	f006 f881 	bl	1a006908 <SystemInit>
    __libc_init_array();
1a000806:	f006 ffab 	bl	1a007760 <__libc_init_array>
    initialise_monitor_handles();
1a00080a:	f7ff ffcd 	bl	1a0007a8 <initialise_monitor_handles>
    main();
1a00080e:	f7ff fed5 	bl	1a0005bc <main>
        __asm__ volatile("wfi");
1a000812:	bf30      	wfi
1a000814:	e7fd      	b.n	1a000812 <Reset_Handler+0x66>
1a000816:	bf00      	nop
1a000818:	40053100 	.word	0x40053100
1a00081c:	10df1000 	.word	0x10df1000
1a000820:	01dff7ff 	.word	0x01dff7ff
1a000824:	e000e280 	.word	0xe000e280
1a000828:	1a000114 	.word	0x1a000114
1a00082c:	1a000150 	.word	0x1a000150
1a000830:	1a000178 	.word	0x1a000178

1a000834 <_fini>:
void _fini(void) {}
1a000834:	4770      	bx	lr

1a000836 <_init>:
void _init(void) {}
1a000836:	4770      	bx	lr

1a000838 <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a000838:	2309      	movs	r3, #9
1a00083a:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00083c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000840:	4770      	bx	lr

1a000842 <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a000842:	2358      	movs	r3, #88	; 0x58
1a000844:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000846:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00084a:	4770      	bx	lr

1a00084c <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a00084c:	2902      	cmp	r1, #2
1a00084e:	d801      	bhi.n	1a000854 <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a000850:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a000852:	4770      	bx	lr
       SET_ERR(EBADF);
1a000854:	2309      	movs	r3, #9
1a000856:	6003      	str	r3, [r0, #0]
       return -1;
1a000858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00085c:	4770      	bx	lr

1a00085e <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a00085e:	2358      	movs	r3, #88	; 0x58
1a000860:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000862:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000866:	4770      	bx	lr

1a000868 <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a000868:	2902      	cmp	r1, #2
1a00086a:	d81f      	bhi.n	1a0008ac <_read_r+0x44>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a00086c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000870:	461d      	mov	r5, r3
1a000872:	4617      	mov	r7, r2
1a000874:	4606      	mov	r6, r0
  size_t i = 0;
1a000876:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a000878:	42ac      	cmp	r4, r5
1a00087a:	d211      	bcs.n	1a0008a0 <_read_r+0x38>
         int c = __stdio_getchar();
1a00087c:	f005 f97f 	bl	1a005b7e <__stdio_getchar>
         if( c != -1 ){
1a000880:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a000884:	d0f8      	beq.n	1a000878 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a000886:	f104 0801 	add.w	r8, r4, #1
1a00088a:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a00088c:	280d      	cmp	r0, #13
1a00088e:	d003      	beq.n	1a000898 <_read_r+0x30>
1a000890:	280a      	cmp	r0, #10
1a000892:	d001      	beq.n	1a000898 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a000894:	4644      	mov	r4, r8
1a000896:	e7ef      	b.n	1a000878 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a000898:	f005 f971 	bl	1a005b7e <__stdio_getchar>
               return i;
1a00089c:	4640      	mov	r0, r8
1a00089e:	e003      	b.n	1a0008a8 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a0008a0:	2313      	movs	r3, #19
1a0008a2:	6033      	str	r3, [r6, #0]
      return -1;
1a0008a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a0008a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a0008ac:	2313      	movs	r3, #19
1a0008ae:	6003      	str	r3, [r0, #0]
      return -1;
1a0008b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0008b4:	4770      	bx	lr

1a0008b6 <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a0008b6:	2902      	cmp	r1, #2
1a0008b8:	d80c      	bhi.n	1a0008d4 <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a0008ba:	b570      	push	{r4, r5, r6, lr}
1a0008bc:	461d      	mov	r5, r3
1a0008be:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a0008c0:	2400      	movs	r4, #0
1a0008c2:	e003      	b.n	1a0008cc <_write_r+0x16>
           __stdio_putchar(((char*) b)[i]);
1a0008c4:	5d30      	ldrb	r0, [r6, r4]
1a0008c6:	f005 f955 	bl	1a005b74 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a0008ca:	3401      	adds	r4, #1
1a0008cc:	42ac      	cmp	r4, r5
1a0008ce:	d3f9      	bcc.n	1a0008c4 <_write_r+0xe>
       return n;
1a0008d0:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a0008d2:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a0008d4:	2313      	movs	r3, #19
1a0008d6:	6003      	str	r3, [r0, #0]
       return -1;
1a0008d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0008dc:	4770      	bx	lr
1a0008de:	Address 0x000000001a0008de is out of bounds.


1a0008e0 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a0008e0:	4b05      	ldr	r3, [pc, #20]	; (1a0008f8 <_sbrk_r+0x18>)
1a0008e2:	681b      	ldr	r3, [r3, #0]
1a0008e4:	b123      	cbz	r3, 1a0008f0 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a0008e6:	4b04      	ldr	r3, [pc, #16]	; (1a0008f8 <_sbrk_r+0x18>)
1a0008e8:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a0008ea:	4401      	add	r1, r0
1a0008ec:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a0008ee:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a0008f0:	4b01      	ldr	r3, [pc, #4]	; (1a0008f8 <_sbrk_r+0x18>)
1a0008f2:	4a02      	ldr	r2, [pc, #8]	; (1a0008fc <_sbrk_r+0x1c>)
1a0008f4:	601a      	str	r2, [r3, #0]
1a0008f6:	e7f6      	b.n	1a0008e6 <_sbrk_r+0x6>
1a0008f8:	100005c0 	.word	0x100005c0
1a0008fc:	100034f8 	.word	0x100034f8

1a000900 <ld_word>:

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
1a000900:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
1a000902:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
1a000904:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
1a000908:	4770      	bx	lr

1a00090a <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
1a00090a:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
1a00090c:	7883      	ldrb	r3, [r0, #2]
1a00090e:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
1a000912:	7843      	ldrb	r3, [r0, #1]
1a000914:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
1a000918:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
1a00091a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
1a00091e:	4770      	bx	lr

1a000920 <ld_qword>:

#if FF_FS_EXFAT
static QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
1a000920:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
	QWORD rv;

	rv = ptr[7];
1a000924:	79c2      	ldrb	r2, [r0, #7]
	rv = rv << 8 | ptr[6];
1a000926:	2500      	movs	r5, #0
1a000928:	0214      	lsls	r4, r2, #8
1a00092a:	7982      	ldrb	r2, [r0, #6]
1a00092c:	2300      	movs	r3, #0
1a00092e:	ea44 0b02 	orr.w	fp, r4, r2
1a000932:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[5];
1a000936:	ea4f 230c 	mov.w	r3, ip, lsl #8
1a00093a:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
1a00093e:	ea4f 220b 	mov.w	r2, fp, lsl #8
1a000942:	7944      	ldrb	r4, [r0, #5]
1a000944:	2500      	movs	r5, #0
1a000946:	ea44 0b02 	orr.w	fp, r4, r2
1a00094a:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[4];
1a00094e:	ea4f 230c 	mov.w	r3, ip, lsl #8
1a000952:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
1a000956:	ea4f 220b 	mov.w	r2, fp, lsl #8
1a00095a:	7904      	ldrb	r4, [r0, #4]
1a00095c:	2500      	movs	r5, #0
1a00095e:	ea44 0b02 	orr.w	fp, r4, r2
1a000962:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[3];
1a000966:	ea4f 230c 	mov.w	r3, ip, lsl #8
1a00096a:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
1a00096e:	ea4f 220b 	mov.w	r2, fp, lsl #8
1a000972:	78c4      	ldrb	r4, [r0, #3]
1a000974:	2500      	movs	r5, #0
1a000976:	ea44 0b02 	orr.w	fp, r4, r2
1a00097a:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[2];
1a00097e:	ea4f 230c 	mov.w	r3, ip, lsl #8
1a000982:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
1a000986:	ea4f 220b 	mov.w	r2, fp, lsl #8
1a00098a:	7884      	ldrb	r4, [r0, #2]
1a00098c:	2500      	movs	r5, #0
1a00098e:	ea44 0602 	orr.w	r6, r4, r2
1a000992:	ea45 0703 	orr.w	r7, r5, r3
	rv = rv << 8 | ptr[1];
1a000996:	ea4f 2c07 	mov.w	ip, r7, lsl #8
1a00099a:	ea4c 6c16 	orr.w	ip, ip, r6, lsr #24
1a00099e:	ea4f 2b06 	mov.w	fp, r6, lsl #8
1a0009a2:	7844      	ldrb	r4, [r0, #1]
1a0009a4:	2500      	movs	r5, #0
1a0009a6:	ea4b 0204 	orr.w	r2, fp, r4
1a0009aa:	ea4c 0305 	orr.w	r3, ip, r5
	rv = rv << 8 | ptr[0];
1a0009ae:	021d      	lsls	r5, r3, #8
1a0009b0:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
1a0009b4:	0214      	lsls	r4, r2, #8
1a0009b6:	7802      	ldrb	r2, [r0, #0]
1a0009b8:	2300      	movs	r3, #0
	return rv;
}
1a0009ba:	ea42 0004 	orr.w	r0, r2, r4
1a0009be:	ea43 0105 	orr.w	r1, r3, r5
1a0009c2:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
1a0009c6:	4770      	bx	lr

1a0009c8 <st_word>:
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
1a0009c8:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
1a0009ca:	0a09      	lsrs	r1, r1, #8
1a0009cc:	7041      	strb	r1, [r0, #1]
}
1a0009ce:	4770      	bx	lr

1a0009d0 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
1a0009d0:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
1a0009d2:	f3c1 2307 	ubfx	r3, r1, #8, #8
1a0009d6:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
1a0009d8:	f3c1 4307 	ubfx	r3, r1, #16, #8
1a0009dc:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
1a0009de:	0e09      	lsrs	r1, r1, #24
1a0009e0:	70c1      	strb	r1, [r0, #3]
}
1a0009e2:	4770      	bx	lr

1a0009e4 <st_qword>:

#if FF_FS_EXFAT
static void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
1a0009e4:	7002      	strb	r2, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
1a0009e6:	f3c2 2107 	ubfx	r1, r2, #8, #8
1a0009ea:	7041      	strb	r1, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
1a0009ec:	f3c2 4107 	ubfx	r1, r2, #16, #8
1a0009f0:	7081      	strb	r1, [r0, #2]
	*ptr++ = (BYTE)val; val >>= 8;
1a0009f2:	0e12      	lsrs	r2, r2, #24
1a0009f4:	70c2      	strb	r2, [r0, #3]
	*ptr++ = (BYTE)val; val >>= 8;
1a0009f6:	7103      	strb	r3, [r0, #4]
	*ptr++ = (BYTE)val; val >>= 8;
1a0009f8:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a0009fc:	7142      	strb	r2, [r0, #5]
	*ptr++ = (BYTE)val; val >>= 8;
1a0009fe:	f3c3 4207 	ubfx	r2, r3, #16, #8
1a000a02:	7182      	strb	r2, [r0, #6]
	*ptr++ = (BYTE)val;
1a000a04:	0e1b      	lsrs	r3, r3, #24
1a000a06:	71c3      	strb	r3, [r0, #7]
}
1a000a08:	4770      	bx	lr

1a000a0a <mem_cpy>:
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt != 0) {
1a000a0a:	4613      	mov	r3, r2
1a000a0c:	b12a      	cbz	r2, 1a000a1a <mem_cpy+0x10>
		do {
			*d++ = *s++;
1a000a0e:	780a      	ldrb	r2, [r1, #0]
1a000a10:	7002      	strb	r2, [r0, #0]
1a000a12:	3001      	adds	r0, #1
1a000a14:	3101      	adds	r1, #1
		} while (--cnt);
1a000a16:	3b01      	subs	r3, #1
1a000a18:	d1f9      	bne.n	1a000a0e <mem_cpy+0x4>
	}
}
1a000a1a:	4770      	bx	lr

1a000a1c <mem_set>:
static void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
1a000a1c:	7001      	strb	r1, [r0, #0]
1a000a1e:	3001      	adds	r0, #1
	} while (--cnt);
1a000a20:	3a01      	subs	r2, #1
1a000a22:	d1fb      	bne.n	1a000a1c <mem_set>
}
1a000a24:	4770      	bx	lr

1a000a26 <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
1a000a26:	b430      	push	{r4, r5}
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
1a000a28:	1c45      	adds	r5, r0, #1
1a000a2a:	7803      	ldrb	r3, [r0, #0]
1a000a2c:	7808      	ldrb	r0, [r1, #0]
1a000a2e:	1a1b      	subs	r3, r3, r0
	} while (--cnt && r == 0);
1a000a30:	3a01      	subs	r2, #1
1a000a32:	d004      	beq.n	1a000a3e <mem_cmp+0x18>
1a000a34:	1c4c      	adds	r4, r1, #1
		r = *d++ - *s++;
1a000a36:	4628      	mov	r0, r5
1a000a38:	4621      	mov	r1, r4
	} while (--cnt && r == 0);
1a000a3a:	2b00      	cmp	r3, #0
1a000a3c:	d0f4      	beq.n	1a000a28 <mem_cmp+0x2>

	return r;
}
1a000a3e:	4618      	mov	r0, r3
1a000a40:	bc30      	pop	{r4, r5}
1a000a42:	4770      	bx	lr

1a000a44 <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
	while (*str && *str != chr) str++;
1a000a44:	e000      	b.n	1a000a48 <chk_chr+0x4>
1a000a46:	3001      	adds	r0, #1
1a000a48:	7803      	ldrb	r3, [r0, #0]
1a000a4a:	b10b      	cbz	r3, 1a000a50 <chk_chr+0xc>
1a000a4c:	428b      	cmp	r3, r1
1a000a4e:	d1fa      	bne.n	1a000a46 <chk_chr+0x2>
	return *str;
}
1a000a50:	4618      	mov	r0, r3
1a000a52:	4770      	bx	lr

1a000a54 <dbc_1st>:
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
}
1a000a54:	2000      	movs	r0, #0
1a000a56:	4770      	bx	lr

1a000a58 <tchar2uni>:
static DWORD tchar2uni (	/* Returns character in UTF-16 encoding (>=0x10000 on double encoding unit, 0xFFFFFFFF on decode error) */
	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
)
{
	DWORD uc;
	const TCHAR *p = *str;
1a000a58:	6802      	ldr	r2, [r0, #0]

#elif FF_LFN_UNICODE == 2	/* UTF-8 input */
	BYTE b;
	int nf;

	uc = (BYTE)*p++;	/* Get a unit */
1a000a5a:	1c53      	adds	r3, r2, #1
1a000a5c:	7811      	ldrb	r1, [r2, #0]
1a000a5e:	460a      	mov	r2, r1
	if (uc & 0x80) {	/* Multiple byte code? */
1a000a60:	f011 0f80 	tst.w	r1, #128	; 0x80
1a000a64:	d101      	bne.n	1a000a6a <tchar2uni+0x12>
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
	}
	uc = wc;

#endif
	*str = p;	/* Next read pointer */
1a000a66:	6003      	str	r3, [r0, #0]
1a000a68:	e046      	b.n	1a000af8 <tchar2uni+0xa0>
		if ((uc & 0xE0) == 0xC0) {	/* 2-byte sequence? */
1a000a6a:	f001 02e0 	and.w	r2, r1, #224	; 0xe0
1a000a6e:	2ac0      	cmp	r2, #192	; 0xc0
1a000a70:	d00b      	beq.n	1a000a8a <tchar2uni+0x32>
			if ((uc & 0xF0) == 0xE0) {	/* 3-byte sequence? */
1a000a72:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
1a000a76:	2ae0      	cmp	r2, #224	; 0xe0
1a000a78:	d036      	beq.n	1a000ae8 <tchar2uni+0x90>
				if ((uc & 0xF8) == 0xF0) {	/* 4-byte sequence? */
1a000a7a:	f001 02f8 	and.w	r2, r1, #248	; 0xf8
1a000a7e:	2af0      	cmp	r2, #240	; 0xf0
1a000a80:	d138      	bne.n	1a000af4 <tchar2uni+0x9c>
					uc &= 0x07; nf = 3;
1a000a82:	f001 0207 	and.w	r2, r1, #7
1a000a86:	2103      	movs	r1, #3
1a000a88:	e002      	b.n	1a000a90 <tchar2uni+0x38>
			uc &= 0x1F; nf = 1;
1a000a8a:	f001 021f 	and.w	r2, r1, #31
1a000a8e:	2101      	movs	r1, #1
{
1a000a90:	b430      	push	{r4, r5}
			b = (BYTE)*p++;
1a000a92:	1c5d      	adds	r5, r3, #1
1a000a94:	781b      	ldrb	r3, [r3, #0]
			if ((b & 0xC0) != 0x80) return 0xFFFFFFFF;	/* Wrong sequence? */
1a000a96:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
1a000a9a:	2c80      	cmp	r4, #128	; 0x80
1a000a9c:	d12e      	bne.n	1a000afc <tchar2uni+0xa4>
			uc = uc << 6 | (b & 0x3F);
1a000a9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
1a000aa2:	ea43 1282 	orr.w	r2, r3, r2, lsl #6
			b = (BYTE)*p++;
1a000aa6:	462b      	mov	r3, r5
		} while (--nf != 0);
1a000aa8:	3901      	subs	r1, #1
1a000aaa:	d1f2      	bne.n	1a000a92 <tchar2uni+0x3a>
		if (uc < 0x80 || IsSurrogate(uc) || uc >= 0x110000) return 0xFFFFFFFF;	/* Wrong code? */
1a000aac:	2a7f      	cmp	r2, #127	; 0x7f
1a000aae:	d928      	bls.n	1a000b02 <tchar2uni+0xaa>
1a000ab0:	f5a2 4358 	sub.w	r3, r2, #55296	; 0xd800
1a000ab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
1a000ab8:	d326      	bcc.n	1a000b08 <tchar2uni+0xb0>
1a000aba:	f5b2 1f88 	cmp.w	r2, #1114112	; 0x110000
1a000abe:	d226      	bcs.n	1a000b0e <tchar2uni+0xb6>
		if (uc >= 0x010000) uc = 0xD800DC00 | ((uc - 0x10000) << 6 & 0x3FF0000) | (uc & 0x3FF);	/* Make a surrogate pair if needed */
1a000ac0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
1a000ac4:	d314      	bcc.n	1a000af0 <tchar2uni+0x98>
1a000ac6:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
1a000aca:	4b12      	ldr	r3, [pc, #72]	; (1a000b14 <tchar2uni+0xbc>)
1a000acc:	ea03 1381 	and.w	r3, r3, r1, lsl #6
1a000ad0:	f3c2 0209 	ubfx	r2, r2, #0, #10
1a000ad4:	431a      	orrs	r2, r3
1a000ad6:	f042 4258 	orr.w	r2, r2, #3623878656	; 0xd8000000
1a000ada:	f442 425c 	orr.w	r2, r2, #56320	; 0xdc00
			b = (BYTE)*p++;
1a000ade:	462b      	mov	r3, r5
	*str = p;	/* Next read pointer */
1a000ae0:	6003      	str	r3, [r0, #0]
	return uc;
}
1a000ae2:	4610      	mov	r0, r2
1a000ae4:	bc30      	pop	{r4, r5}
1a000ae6:	4770      	bx	lr
				uc &= 0x0F; nf = 2;
1a000ae8:	f001 020f 	and.w	r2, r1, #15
1a000aec:	2102      	movs	r1, #2
1a000aee:	e7cf      	b.n	1a000a90 <tchar2uni+0x38>
			b = (BYTE)*p++;
1a000af0:	462b      	mov	r3, r5
1a000af2:	e7f5      	b.n	1a000ae0 <tchar2uni+0x88>
					return 0xFFFFFFFF;
1a000af4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
}
1a000af8:	4610      	mov	r0, r2
1a000afa:	4770      	bx	lr
			if ((b & 0xC0) != 0x80) return 0xFFFFFFFF;	/* Wrong sequence? */
1a000afc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000b00:	e7ef      	b.n	1a000ae2 <tchar2uni+0x8a>
		if (uc < 0x80 || IsSurrogate(uc) || uc >= 0x110000) return 0xFFFFFFFF;	/* Wrong code? */
1a000b02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000b06:	e7ec      	b.n	1a000ae2 <tchar2uni+0x8a>
1a000b08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000b0c:	e7e9      	b.n	1a000ae2 <tchar2uni+0x8a>
1a000b0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000b12:	e7e6      	b.n	1a000ae2 <tchar2uni+0x8a>
1a000b14:	03ff0000 	.word	0x03ff0000

1a000b18 <clst2sect>:
static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
1a000b18:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
1a000b1a:	69c3      	ldr	r3, [r0, #28]
1a000b1c:	3b02      	subs	r3, #2
1a000b1e:	428b      	cmp	r3, r1
1a000b20:	d904      	bls.n	1a000b2c <clst2sect+0x14>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
1a000b22:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a000b24:	8940      	ldrh	r0, [r0, #10]
1a000b26:	fb01 3000 	mla	r0, r1, r0, r3
1a000b2a:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
1a000b2c:	2000      	movs	r0, #0
}
1a000b2e:	4770      	bx	lr

1a000b30 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
1a000b30:	b570      	push	{r4, r5, r6, lr}
1a000b32:	4606      	mov	r6, r0
1a000b34:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
1a000b36:	f101 001a 	add.w	r0, r1, #26
1a000b3a:	f7ff fee1 	bl	1a000900 <ld_word>
	if (fs->fs_type == FS_FAT32) {
1a000b3e:	7833      	ldrb	r3, [r6, #0]
1a000b40:	2b03      	cmp	r3, #3
1a000b42:	d000      	beq.n	1a000b46 <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
1a000b44:	bd70      	pop	{r4, r5, r6, pc}
1a000b46:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
1a000b48:	f105 0014 	add.w	r0, r5, #20
1a000b4c:	f7ff fed8 	bl	1a000900 <ld_word>
1a000b50:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
1a000b54:	e7f6      	b.n	1a000b44 <ld_clust+0x14>

1a000b56 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
1a000b56:	b570      	push	{r4, r5, r6, lr}
1a000b58:	4606      	mov	r6, r0
1a000b5a:	460c      	mov	r4, r1
1a000b5c:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
1a000b5e:	b291      	uxth	r1, r2
1a000b60:	f104 001a 	add.w	r0, r4, #26
1a000b64:	f7ff ff30 	bl	1a0009c8 <st_word>
	if (fs->fs_type == FS_FAT32) {
1a000b68:	7833      	ldrb	r3, [r6, #0]
1a000b6a:	2b03      	cmp	r3, #3
1a000b6c:	d000      	beq.n	1a000b70 <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
1a000b6e:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
1a000b70:	0c29      	lsrs	r1, r5, #16
1a000b72:	f104 0014 	add.w	r0, r4, #20
1a000b76:	f7ff ff27 	bl	1a0009c8 <st_word>
}
1a000b7a:	e7f8      	b.n	1a000b6e <st_clust+0x18>

1a000b7c <pick_lfn>:

static int pick_lfn (	/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
1a000b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000b80:	4607      	mov	r7, r0
1a000b82:	460e      	mov	r6, r1
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
1a000b84:	f101 001a 	add.w	r0, r1, #26
1a000b88:	f7ff feba 	bl	1a000900 <ld_word>
1a000b8c:	bb60      	cbnz	r0, 1a000be8 <pick_lfn+0x6c>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
1a000b8e:	7835      	ldrb	r5, [r6, #0]
1a000b90:	f025 0540 	bic.w	r5, r5, #64	; 0x40
1a000b94:	3d01      	subs	r5, #1
1a000b96:	eb05 0345 	add.w	r3, r5, r5, lsl #1
1a000b9a:	eb05 0583 	add.w	r5, r5, r3, lsl #2

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1a000b9e:	f04f 0801 	mov.w	r8, #1
1a000ba2:	2400      	movs	r4, #0
1a000ba4:	e004      	b.n	1a000bb0 <pick_lfn+0x34>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc != 0) {
			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
1a000ba6:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a000baa:	4298      	cmp	r0, r3
1a000bac:	d121      	bne.n	1a000bf2 <pick_lfn+0x76>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1a000bae:	3401      	adds	r4, #1
1a000bb0:	2c0c      	cmp	r4, #12
1a000bb2:	d80e      	bhi.n	1a000bd2 <pick_lfn+0x56>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1a000bb4:	4b12      	ldr	r3, [pc, #72]	; (1a000c00 <pick_lfn+0x84>)
1a000bb6:	5d18      	ldrb	r0, [r3, r4]
1a000bb8:	4430      	add	r0, r6
1a000bba:	f7ff fea1 	bl	1a000900 <ld_word>
		if (wc != 0) {
1a000bbe:	f1b8 0f00 	cmp.w	r8, #0
1a000bc2:	d0f0      	beq.n	1a000ba6 <pick_lfn+0x2a>
			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
1a000bc4:	2dfe      	cmp	r5, #254	; 0xfe
1a000bc6:	d812      	bhi.n	1a000bee <pick_lfn+0x72>
			lfnbuf[i++] = wc = uc;			/* Store it */
1a000bc8:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
1a000bcc:	4680      	mov	r8, r0
1a000bce:	3501      	adds	r5, #1
1a000bd0:	e7ed      	b.n	1a000bae <pick_lfn+0x32>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
1a000bd2:	7833      	ldrb	r3, [r6, #0]
1a000bd4:	f013 0f40 	tst.w	r3, #64	; 0x40
1a000bd8:	d00d      	beq.n	1a000bf6 <pick_lfn+0x7a>
		if (i >= FF_MAX_LFN) return 0;		/* Buffer overflow? */
1a000bda:	2dfe      	cmp	r5, #254	; 0xfe
1a000bdc:	d80d      	bhi.n	1a000bfa <pick_lfn+0x7e>
		lfnbuf[i] = 0;
1a000bde:	2300      	movs	r3, #0
1a000be0:	f827 3015 	strh.w	r3, [r7, r5, lsl #1]
	}

	return 1;		/* The part of LFN is valid */
1a000be4:	2001      	movs	r0, #1
1a000be6:	e000      	b.n	1a000bea <pick_lfn+0x6e>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
1a000be8:	2000      	movs	r0, #0
}
1a000bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
1a000bee:	2000      	movs	r0, #0
1a000bf0:	e7fb      	b.n	1a000bea <pick_lfn+0x6e>
			if (uc != 0xFFFF) return 0;		/* Check filler */
1a000bf2:	2000      	movs	r0, #0
1a000bf4:	e7f9      	b.n	1a000bea <pick_lfn+0x6e>
	return 1;		/* The part of LFN is valid */
1a000bf6:	2001      	movs	r0, #1
1a000bf8:	e7f7      	b.n	1a000bea <pick_lfn+0x6e>
		if (i >= FF_MAX_LFN) return 0;		/* Buffer overflow? */
1a000bfa:	2000      	movs	r0, #0
1a000bfc:	e7f5      	b.n	1a000bea <pick_lfn+0x6e>
1a000bfe:	bf00      	nop
1a000c00:	1a0084b4 	.word	0x1a0084b4

1a000c04 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
1a000c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a000c08:	4680      	mov	r8, r0
1a000c0a:	460f      	mov	r7, r1
1a000c0c:	4691      	mov	r9, r2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
1a000c0e:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
1a000c10:	230f      	movs	r3, #15
1a000c12:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
1a000c14:	2400      	movs	r4, #0
1a000c16:	730c      	strb	r4, [r1, #12]
	st_word(dir + LDIR_FstClusLO, 0);
1a000c18:	4621      	mov	r1, r4
1a000c1a:	f107 001a 	add.w	r0, r7, #26
1a000c1e:	f7ff fed3 	bl	1a0009c8 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
1a000c22:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
1a000c26:	eb06 0346 	add.w	r3, r6, r6, lsl #1
1a000c2a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	s = wc = 0;
1a000c2e:	4625      	mov	r5, r4
1a000c30:	e002      	b.n	1a000c38 <put_lfn+0x34>
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
	} while (++s < 13);
1a000c32:	3401      	adds	r4, #1
1a000c34:	2c0c      	cmp	r4, #12
1a000c36:	d811      	bhi.n	1a000c5c <put_lfn+0x58>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
1a000c38:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a000c3c:	429d      	cmp	r5, r3
1a000c3e:	d002      	beq.n	1a000c46 <put_lfn+0x42>
1a000c40:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
1a000c44:	3601      	adds	r6, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
1a000c46:	4b0c      	ldr	r3, [pc, #48]	; (1a000c78 <put_lfn+0x74>)
1a000c48:	5d18      	ldrb	r0, [r3, r4]
1a000c4a:	4629      	mov	r1, r5
1a000c4c:	4438      	add	r0, r7
1a000c4e:	f7ff febb 	bl	1a0009c8 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
1a000c52:	2d00      	cmp	r5, #0
1a000c54:	d1ed      	bne.n	1a000c32 <put_lfn+0x2e>
1a000c56:	f64f 75ff 	movw	r5, #65535	; 0xffff
1a000c5a:	e7ea      	b.n	1a000c32 <put_lfn+0x2e>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
1a000c5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a000c60:	429d      	cmp	r5, r3
1a000c62:	d002      	beq.n	1a000c6a <put_lfn+0x66>
1a000c64:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
1a000c68:	b90b      	cbnz	r3, 1a000c6e <put_lfn+0x6a>
1a000c6a:	f049 0940 	orr.w	r9, r9, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
1a000c6e:	f887 9000 	strb.w	r9, [r7]
}
1a000c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a000c76:	bf00      	nop
1a000c78:	1a0084b4 	.word	0x1a0084b4

1a000c7c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
1a000c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000c7e:	b083      	sub	sp, #12
1a000c80:	4607      	mov	r7, r0
1a000c82:	4615      	mov	r5, r2
1a000c84:	461c      	mov	r4, r3
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
1a000c86:	220b      	movs	r2, #11
1a000c88:	f7ff febf 	bl	1a000a0a <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
1a000c8c:	2c05      	cmp	r4, #5
1a000c8e:	d811      	bhi.n	1a000cb4 <gen_numname+0x38>
		sr = seq;
		while (*lfn) {	/* Create a CRC as hash value */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
1a000c90:	2607      	movs	r6, #7
1a000c92:	e01d      	b.n	1a000cd0 <gen_numname+0x54>
1a000c94:	3201      	adds	r2, #1
1a000c96:	2a0f      	cmp	r2, #15
1a000c98:	d80c      	bhi.n	1a000cb4 <gen_numname+0x38>
				sr = (sr << 1) + (wc & 1);
1a000c9a:	f003 0101 	and.w	r1, r3, #1
1a000c9e:	eb01 0444 	add.w	r4, r1, r4, lsl #1
				wc >>= 1;
1a000ca2:	085b      	lsrs	r3, r3, #1
				if (sr & 0x10000) sr ^= 0x11021;
1a000ca4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
1a000ca8:	d0f4      	beq.n	1a000c94 <gen_numname+0x18>
1a000caa:	f484 3488 	eor.w	r4, r4, #69632	; 0x11000
1a000cae:	f084 0421 	eor.w	r4, r4, #33	; 0x21
1a000cb2:	e7ef      	b.n	1a000c94 <gen_numname+0x18>
		while (*lfn) {	/* Create a CRC as hash value */
1a000cb4:	882b      	ldrh	r3, [r5, #0]
1a000cb6:	2b00      	cmp	r3, #0
1a000cb8:	d0ea      	beq.n	1a000c90 <gen_numname+0x14>
			wc = *lfn++;
1a000cba:	3502      	adds	r5, #2
			for (i = 0; i < 16; i++) {
1a000cbc:	2200      	movs	r2, #0
1a000cbe:	e7ea      	b.n	1a000c96 <gen_numname+0x1a>
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (BYTE)((seq % 16) + '0');
		if (c > '9') c += 7;
		ns[i--] = c;
1a000cc0:	1e75      	subs	r5, r6, #1
1a000cc2:	aa02      	add	r2, sp, #8
1a000cc4:	4432      	add	r2, r6
1a000cc6:	f802 3c08 	strb.w	r3, [r2, #-8]
		seq /= 16;
	} while (seq);
1a000cca:	0924      	lsrs	r4, r4, #4
1a000ccc:	d009      	beq.n	1a000ce2 <gen_numname+0x66>
		ns[i--] = c;
1a000cce:	462e      	mov	r6, r5
		c = (BYTE)((seq % 16) + '0');
1a000cd0:	f004 020f 	and.w	r2, r4, #15
1a000cd4:	f102 0330 	add.w	r3, r2, #48	; 0x30
		if (c > '9') c += 7;
1a000cd8:	2b39      	cmp	r3, #57	; 0x39
1a000cda:	d9f1      	bls.n	1a000cc0 <gen_numname+0x44>
1a000cdc:	f102 0337 	add.w	r3, r2, #55	; 0x37
1a000ce0:	e7ee      	b.n	1a000cc0 <gen_numname+0x44>
	ns[i] = '~';
1a000ce2:	227e      	movs	r2, #126	; 0x7e
1a000ce4:	ab02      	add	r3, sp, #8
1a000ce6:	442b      	add	r3, r5
1a000ce8:	f803 2c08 	strb.w	r2, [r3, #-8]

	/* Append the number to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {
1a000cec:	e000      	b.n	1a000cf0 <gen_numname+0x74>
1a000cee:	3401      	adds	r4, #1
1a000cf0:	42ac      	cmp	r4, r5
1a000cf2:	d211      	bcs.n	1a000d18 <gen_numname+0x9c>
1a000cf4:	5d38      	ldrb	r0, [r7, r4]
1a000cf6:	2820      	cmp	r0, #32
1a000cf8:	d00e      	beq.n	1a000d18 <gen_numname+0x9c>
		if (dbc_1st(dst[j])) {
1a000cfa:	f7ff feab 	bl	1a000a54 <dbc_1st>
1a000cfe:	2800      	cmp	r0, #0
1a000d00:	d0f5      	beq.n	1a000cee <gen_numname+0x72>
			if (j == i - 1) break;
1a000d02:	1eb3      	subs	r3, r6, #2
1a000d04:	42a3      	cmp	r3, r4
1a000d06:	d007      	beq.n	1a000d18 <gen_numname+0x9c>
			j++;
1a000d08:	3401      	adds	r4, #1
1a000d0a:	e7f0      	b.n	1a000cee <gen_numname+0x72>
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
1a000d0c:	2220      	movs	r2, #32
1a000d0e:	1c63      	adds	r3, r4, #1
1a000d10:	553a      	strb	r2, [r7, r4]
	} while (j < 8);
1a000d12:	2b07      	cmp	r3, #7
1a000d14:	d808      	bhi.n	1a000d28 <gen_numname+0xac>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
1a000d16:	461c      	mov	r4, r3
1a000d18:	2d07      	cmp	r5, #7
1a000d1a:	d8f7      	bhi.n	1a000d0c <gen_numname+0x90>
1a000d1c:	ab02      	add	r3, sp, #8
1a000d1e:	442b      	add	r3, r5
1a000d20:	f813 2c08 	ldrb.w	r2, [r3, #-8]
1a000d24:	3501      	adds	r5, #1
1a000d26:	e7f2      	b.n	1a000d0e <gen_numname+0x92>
}
1a000d28:	b003      	add	sp, #12
1a000d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a000d2c <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
1a000d2c:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
1a000d2e:	220b      	movs	r2, #11
	BYTE sum = 0;
1a000d30:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
1a000d32:	01c3      	lsls	r3, r0, #7
1a000d34:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
1a000d38:	7808      	ldrb	r0, [r1, #0]
1a000d3a:	fa50 f383 	uxtab	r3, r0, r3
1a000d3e:	b2d8      	uxtb	r0, r3
1a000d40:	3101      	adds	r1, #1
	} while (--n);
1a000d42:	3a01      	subs	r2, #1
1a000d44:	d1f5      	bne.n	1a000d32 <sum_sfn+0x6>
	return sum;
}
1a000d46:	4770      	bx	lr

1a000d48 <xdir_sum>:
/*-----------------------------------------------------------------------*/

static WORD xdir_sum (	/* Get checksum of the directoly entry block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
1a000d48:	b430      	push	{r4, r5}
1a000d4a:	4605      	mov	r5, r0
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
1a000d4c:	7841      	ldrb	r1, [r0, #1]
1a000d4e:	3101      	adds	r1, #1
1a000d50:	0149      	lsls	r1, r1, #5
	for (i = sum = 0; i < szblk; i++) {
1a000d52:	2000      	movs	r0, #0
1a000d54:	4603      	mov	r3, r0
1a000d56:	e001      	b.n	1a000d5c <xdir_sum+0x14>
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
			i++;
1a000d58:	3301      	adds	r3, #1
	for (i = sum = 0; i < szblk; i++) {
1a000d5a:	3301      	adds	r3, #1
1a000d5c:	428b      	cmp	r3, r1
1a000d5e:	d209      	bcs.n	1a000d74 <xdir_sum+0x2c>
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
1a000d60:	2b02      	cmp	r3, #2
1a000d62:	d0f9      	beq.n	1a000d58 <xdir_sum+0x10>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
1a000d64:	0842      	lsrs	r2, r0, #1
1a000d66:	eb02 32c0 	add.w	r2, r2, r0, lsl #15
1a000d6a:	5cec      	ldrb	r4, [r5, r3]
1a000d6c:	fa14 f282 	uxtah	r2, r4, r2
1a000d70:	b290      	uxth	r0, r2
1a000d72:	e7f2      	b.n	1a000d5a <xdir_sum+0x12>
		}
	}
	return sum;
}
1a000d74:	bc30      	pop	{r4, r5}
1a000d76:	4770      	bx	lr

1a000d78 <init_alloc_info>:

static void init_alloc_info (
	FATFS* fs,		/* Filesystem object */
	FFOBJID* obj	/* Object allocation information to be initialized */
)
{
1a000d78:	b538      	push	{r3, r4, r5, lr}
1a000d7a:	4605      	mov	r5, r0
1a000d7c:	460c      	mov	r4, r1
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
1a000d7e:	6900      	ldr	r0, [r0, #16]
1a000d80:	3034      	adds	r0, #52	; 0x34
1a000d82:	f7ff fdc2 	bl	1a00090a <ld_dword>
1a000d86:	60a0      	str	r0, [r4, #8]
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
1a000d88:	6928      	ldr	r0, [r5, #16]
1a000d8a:	3038      	adds	r0, #56	; 0x38
1a000d8c:	f7ff fdc8 	bl	1a000920 <ld_qword>
1a000d90:	e9c4 0104 	strd	r0, r1, [r4, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
1a000d94:	692b      	ldr	r3, [r5, #16]
1a000d96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
1a000d9a:	f003 0302 	and.w	r3, r3, #2
1a000d9e:	71e3      	strb	r3, [r4, #7]
	obj->n_frag = 0;										/* No last fragment info */
1a000da0:	2300      	movs	r3, #0
1a000da2:	61e3      	str	r3, [r4, #28]
}
1a000da4:	bd38      	pop	{r3, r4, r5, pc}
1a000da6:	Address 0x000000001a000da6 is out of bounds.


1a000da8 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
1a000da8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
1a000daa:	6807      	ldr	r7, [r0, #0]
	if (!tp) return vol;	/* Invalid path name? */
1a000dac:	2f00      	cmp	r7, #0
1a000dae:	d04a      	beq.n	1a000e46 <get_ldnumber+0x9e>
	tt = tp = *path;
1a000db0:	463a      	mov	r2, r7
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
1a000db2:	1c54      	adds	r4, r2, #1
1a000db4:	7813      	ldrb	r3, [r2, #0]
1a000db6:	2b1f      	cmp	r3, #31
1a000db8:	d902      	bls.n	1a000dc0 <get_ldnumber+0x18>
1a000dba:	4622      	mov	r2, r4
1a000dbc:	2b3a      	cmp	r3, #58	; 0x3a
1a000dbe:	d1f8      	bne.n	1a000db2 <get_ldnumber+0xa>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
1a000dc0:	2b3a      	cmp	r3, #58	; 0x3a
1a000dc2:	d003      	beq.n	1a000dcc <get_ldnumber+0x24>
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
1a000dc4:	f04f 0e00 	mov.w	lr, #0
}
1a000dc8:	4670      	mov	r0, lr
1a000dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
1a000dcc:	f897 e000 	ldrb.w	lr, [r7]
1a000dd0:	f1ae 0330 	sub.w	r3, lr, #48	; 0x30
1a000dd4:	b2db      	uxtb	r3, r3
1a000dd6:	2b09      	cmp	r3, #9
1a000dd8:	d808      	bhi.n	1a000dec <get_ldnumber+0x44>
1a000dda:	1cbb      	adds	r3, r7, #2
1a000ddc:	42a3      	cmp	r3, r4
1a000dde:	d002      	beq.n	1a000de6 <get_ldnumber+0x3e>
1a000de0:	f04f 0e00 	mov.w	lr, #0
1a000de4:	e004      	b.n	1a000df0 <get_ldnumber+0x48>
			i = (int)*tp - '0';	/* Get the LD number */
1a000de6:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
1a000dea:	e027      	b.n	1a000e3c <get_ldnumber+0x94>
1a000dec:	f04f 0e00 	mov.w	lr, #0
				sp = VolumeStr[i]; tp = *path;	/* This string volume ID and path name */
1a000df0:	4b18      	ldr	r3, [pc, #96]	; (1a000e54 <get_ldnumber+0xac>)
1a000df2:	f853 502e 	ldr.w	r5, [r3, lr, lsl #2]
1a000df6:	4639      	mov	r1, r7
1a000df8:	e004      	b.n	1a000e04 <get_ldnumber+0x5c>
				} while (c && (TCHAR)c == tc);
1a000dfa:	b1bb      	cbz	r3, 1a000e2c <get_ldnumber+0x84>
					c = *sp++; tc = *tp++;
1a000dfc:	4631      	mov	r1, r6
1a000dfe:	4665      	mov	r5, ip
				} while (c && (TCHAR)c == tc);
1a000e00:	429a      	cmp	r2, r3
1a000e02:	d113      	bne.n	1a000e2c <get_ldnumber+0x84>
					c = *sp++; tc = *tp++;
1a000e04:	f105 0c01 	add.w	ip, r5, #1
1a000e08:	782b      	ldrb	r3, [r5, #0]
1a000e0a:	1c4e      	adds	r6, r1, #1
1a000e0c:	780a      	ldrb	r2, [r1, #0]
					if (IsLower(c)) c -= 0x20;
1a000e0e:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
1a000e12:	b2c9      	uxtb	r1, r1
1a000e14:	2919      	cmp	r1, #25
1a000e16:	d801      	bhi.n	1a000e1c <get_ldnumber+0x74>
1a000e18:	3b20      	subs	r3, #32
1a000e1a:	b2db      	uxtb	r3, r3
					if (IsLower(tc)) tc -= 0x20;
1a000e1c:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
1a000e20:	b2c9      	uxtb	r1, r1
1a000e22:	2919      	cmp	r1, #25
1a000e24:	d8e9      	bhi.n	1a000dfa <get_ldnumber+0x52>
1a000e26:	3a20      	subs	r2, #32
1a000e28:	b2d2      	uxtb	r2, r2
1a000e2a:	e7e6      	b.n	1a000dfa <get_ldnumber+0x52>
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
1a000e2c:	b90b      	cbnz	r3, 1a000e32 <get_ldnumber+0x8a>
1a000e2e:	42b4      	cmp	r4, r6
1a000e30:	d004      	beq.n	1a000e3c <get_ldnumber+0x94>
1a000e32:	f10e 0e01 	add.w	lr, lr, #1
1a000e36:	f1be 0f01 	cmp.w	lr, #1
1a000e3a:	ddd9      	ble.n	1a000df0 <get_ldnumber+0x48>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
1a000e3c:	f1be 0f01 	cmp.w	lr, #1
1a000e40:	dc04      	bgt.n	1a000e4c <get_ldnumber+0xa4>
			*path = tt;		/* Snip the drive prefix off */
1a000e42:	6004      	str	r4, [r0, #0]
1a000e44:	e7c0      	b.n	1a000dc8 <get_ldnumber+0x20>
	if (!tp) return vol;	/* Invalid path name? */
1a000e46:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
1a000e4a:	e7bd      	b.n	1a000dc8 <get_ldnumber+0x20>
	int i, vol = -1;
1a000e4c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
1a000e50:	e7ba      	b.n	1a000dc8 <get_ldnumber+0x20>
1a000e52:	bf00      	nop
1a000e54:	1a0084c4 	.word	0x1a0084c4

1a000e58 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
1a000e58:	b538      	push	{r3, r4, r5, lr}
1a000e5a:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
1a000e5c:	b1a8      	cbz	r0, 1a000e8a <validate+0x32>
1a000e5e:	4604      	mov	r4, r0
1a000e60:	6803      	ldr	r3, [r0, #0]
1a000e62:	b1ab      	cbz	r3, 1a000e90 <validate+0x38>
1a000e64:	781a      	ldrb	r2, [r3, #0]
1a000e66:	b1aa      	cbz	r2, 1a000e94 <validate+0x3c>
1a000e68:	8881      	ldrh	r1, [r0, #4]
1a000e6a:	88da      	ldrh	r2, [r3, #6]
1a000e6c:	4291      	cmp	r1, r2
1a000e6e:	d003      	beq.n	1a000e78 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
1a000e70:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a000e72:	2300      	movs	r3, #0
1a000e74:	602b      	str	r3, [r5, #0]
	return res;
}
1a000e76:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
1a000e78:	7858      	ldrb	r0, [r3, #1]
1a000e7a:	f004 fd4f 	bl	1a00591c <disk_status>
1a000e7e:	f010 0f01 	tst.w	r0, #1
1a000e82:	d10a      	bne.n	1a000e9a <validate+0x42>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a000e84:	6823      	ldr	r3, [r4, #0]
			res = FR_OK;
1a000e86:	2000      	movs	r0, #0
1a000e88:	e7f4      	b.n	1a000e74 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
1a000e8a:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a000e8c:	2300      	movs	r3, #0
1a000e8e:	e7f1      	b.n	1a000e74 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
1a000e90:	2009      	movs	r0, #9
1a000e92:	e7ef      	b.n	1a000e74 <validate+0x1c>
1a000e94:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a000e96:	2300      	movs	r3, #0
1a000e98:	e7ec      	b.n	1a000e74 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
1a000e9a:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a000e9c:	2300      	movs	r3, #0
1a000e9e:	e7e9      	b.n	1a000e74 <validate+0x1c>

1a000ea0 <sync_window>:
{
1a000ea0:	b538      	push	{r3, r4, r5, lr}
	if (fs->wflag) {	/* Is the disk access window dirty */
1a000ea2:	78c3      	ldrb	r3, [r0, #3]
1a000ea4:	b90b      	cbnz	r3, 1a000eaa <sync_window+0xa>
	FRESULT res = FR_OK;
1a000ea6:	2000      	movs	r0, #0
}
1a000ea8:	bd38      	pop	{r3, r4, r5, pc}
1a000eaa:	4604      	mov	r4, r0
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
1a000eac:	f100 0538 	add.w	r5, r0, #56	; 0x38
1a000eb0:	2301      	movs	r3, #1
1a000eb2:	6b42      	ldr	r2, [r0, #52]	; 0x34
1a000eb4:	4629      	mov	r1, r5
1a000eb6:	7840      	ldrb	r0, [r0, #1]
1a000eb8:	f004 fd4e 	bl	1a005958 <disk_write>
1a000ebc:	b9a0      	cbnz	r0, 1a000ee8 <sync_window+0x48>
			fs->wflag = 0;	/* Clear window dirty flag */
1a000ebe:	2300      	movs	r3, #0
1a000ec0:	70e3      	strb	r3, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
1a000ec2:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a000ec4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1a000ec6:	1acb      	subs	r3, r1, r3
1a000ec8:	6a22      	ldr	r2, [r4, #32]
1a000eca:	4293      	cmp	r3, r2
1a000ecc:	d20e      	bcs.n	1a000eec <sync_window+0x4c>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
1a000ece:	78a3      	ldrb	r3, [r4, #2]
1a000ed0:	2b02      	cmp	r3, #2
1a000ed2:	d001      	beq.n	1a000ed8 <sync_window+0x38>
	FRESULT res = FR_OK;
1a000ed4:	2000      	movs	r0, #0
1a000ed6:	e7e7      	b.n	1a000ea8 <sync_window+0x8>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
1a000ed8:	2301      	movs	r3, #1
1a000eda:	440a      	add	r2, r1
1a000edc:	4629      	mov	r1, r5
1a000ede:	7860      	ldrb	r0, [r4, #1]
1a000ee0:	f004 fd3a 	bl	1a005958 <disk_write>
	FRESULT res = FR_OK;
1a000ee4:	2000      	movs	r0, #0
1a000ee6:	e7df      	b.n	1a000ea8 <sync_window+0x8>
			res = FR_DISK_ERR;
1a000ee8:	2001      	movs	r0, #1
1a000eea:	e7dd      	b.n	1a000ea8 <sync_window+0x8>
	FRESULT res = FR_OK;
1a000eec:	2000      	movs	r0, #0
1a000eee:	e7db      	b.n	1a000ea8 <sync_window+0x8>

1a000ef0 <move_window>:
{
1a000ef0:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
1a000ef2:	6b43      	ldr	r3, [r0, #52]	; 0x34
1a000ef4:	428b      	cmp	r3, r1
1a000ef6:	d012      	beq.n	1a000f1e <move_window+0x2e>
1a000ef8:	4604      	mov	r4, r0
1a000efa:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
1a000efc:	f7ff ffd0 	bl	1a000ea0 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
1a000f00:	4606      	mov	r6, r0
1a000f02:	b968      	cbnz	r0, 1a000f20 <move_window+0x30>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
1a000f04:	2301      	movs	r3, #1
1a000f06:	462a      	mov	r2, r5
1a000f08:	f104 0138 	add.w	r1, r4, #56	; 0x38
1a000f0c:	7860      	ldrb	r0, [r4, #1]
1a000f0e:	f004 fd13 	bl	1a005938 <disk_read>
1a000f12:	b110      	cbz	r0, 1a000f1a <move_window+0x2a>
				res = FR_DISK_ERR;
1a000f14:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
1a000f16:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
			fs->winsect = sector;
1a000f1a:	6365      	str	r5, [r4, #52]	; 0x34
1a000f1c:	e000      	b.n	1a000f20 <move_window+0x30>
	FRESULT res = FR_OK;
1a000f1e:	2600      	movs	r6, #0
}
1a000f20:	4630      	mov	r0, r6
1a000f22:	bd70      	pop	{r4, r5, r6, pc}

1a000f24 <check_fs>:
{
1a000f24:	b510      	push	{r4, lr}
1a000f26:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
1a000f28:	2300      	movs	r3, #0
1a000f2a:	70c3      	strb	r3, [r0, #3]
1a000f2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a000f30:	6343      	str	r3, [r0, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
1a000f32:	f7ff ffdd 	bl	1a000ef0 <move_window>
1a000f36:	bb30      	cbnz	r0, 1a000f86 <check_fs+0x62>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
1a000f38:	f204 2036 	addw	r0, r4, #566	; 0x236
1a000f3c:	f7ff fce0 	bl	1a000900 <ld_word>
1a000f40:	f64a 2355 	movw	r3, #43605	; 0xaa55
1a000f44:	4298      	cmp	r0, r3
1a000f46:	d120      	bne.n	1a000f8a <check_fs+0x66>
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
1a000f48:	220b      	movs	r2, #11
1a000f4a:	4914      	ldr	r1, [pc, #80]	; (1a000f9c <check_fs+0x78>)
1a000f4c:	f104 0038 	add.w	r0, r4, #56	; 0x38
1a000f50:	f7ff fd69 	bl	1a000a26 <mem_cmp>
1a000f54:	b1d8      	cbz	r0, 1a000f8e <check_fs+0x6a>
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
1a000f56:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
1a000f5a:	2be9      	cmp	r3, #233	; 0xe9
1a000f5c:	d003      	beq.n	1a000f66 <check_fs+0x42>
1a000f5e:	2beb      	cmp	r3, #235	; 0xeb
1a000f60:	d001      	beq.n	1a000f66 <check_fs+0x42>
1a000f62:	2be8      	cmp	r3, #232	; 0xe8
1a000f64:	d115      	bne.n	1a000f92 <check_fs+0x6e>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
1a000f66:	2203      	movs	r2, #3
1a000f68:	490d      	ldr	r1, [pc, #52]	; (1a000fa0 <check_fs+0x7c>)
1a000f6a:	f104 006e 	add.w	r0, r4, #110	; 0x6e
1a000f6e:	f7ff fd5a 	bl	1a000a26 <mem_cmp>
1a000f72:	b180      	cbz	r0, 1a000f96 <check_fs+0x72>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
1a000f74:	2205      	movs	r2, #5
1a000f76:	490b      	ldr	r1, [pc, #44]	; (1a000fa4 <check_fs+0x80>)
1a000f78:	f104 008a 	add.w	r0, r4, #138	; 0x8a
1a000f7c:	f7ff fd53 	bl	1a000a26 <mem_cmp>
1a000f80:	b120      	cbz	r0, 1a000f8c <check_fs+0x68>
	return 2;	/* Valid BS but not FAT */
1a000f82:	2002      	movs	r0, #2
1a000f84:	e002      	b.n	1a000f8c <check_fs+0x68>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
1a000f86:	2004      	movs	r0, #4
1a000f88:	e000      	b.n	1a000f8c <check_fs+0x68>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
1a000f8a:	2003      	movs	r0, #3
}
1a000f8c:	bd10      	pop	{r4, pc}
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
1a000f8e:	2001      	movs	r0, #1
1a000f90:	e7fc      	b.n	1a000f8c <check_fs+0x68>
	return 2;	/* Valid BS but not FAT */
1a000f92:	2002      	movs	r0, #2
1a000f94:	e7fa      	b.n	1a000f8c <check_fs+0x68>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
1a000f96:	2000      	movs	r0, #0
1a000f98:	e7f8      	b.n	1a000f8c <check_fs+0x68>
1a000f9a:	bf00      	nop
1a000f9c:	1a0084cc 	.word	0x1a0084cc
1a000fa0:	1a0084d8 	.word	0x1a0084d8
1a000fa4:	1a0084dc 	.word	0x1a0084dc

1a000fa8 <find_volume>:
{
1a000fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a000fac:	b084      	sub	sp, #16
1a000fae:	460d      	mov	r5, r1
1a000fb0:	4617      	mov	r7, r2
	*rfs = 0;
1a000fb2:	2300      	movs	r3, #0
1a000fb4:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
1a000fb6:	f7ff fef7 	bl	1a000da8 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
1a000fba:	1e06      	subs	r6, r0, #0
1a000fbc:	f2c0 8205 	blt.w	1a0013ca <find_volume+0x422>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
1a000fc0:	4bbf      	ldr	r3, [pc, #764]	; (1a0012c0 <find_volume+0x318>)
1a000fc2:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
1a000fc6:	2c00      	cmp	r4, #0
1a000fc8:	f000 8203 	beq.w	1a0013d2 <find_volume+0x42a>
	*rfs = fs;							/* Return pointer to the filesystem object */
1a000fcc:	602c      	str	r4, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
1a000fce:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
1a000fd2:	7823      	ldrb	r3, [r4, #0]
1a000fd4:	b173      	cbz	r3, 1a000ff4 <find_volume+0x4c>
		stat = disk_status(fs->pdrv);
1a000fd6:	7860      	ldrb	r0, [r4, #1]
1a000fd8:	f004 fca0 	bl	1a00591c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
1a000fdc:	f010 0f01 	tst.w	r0, #1
1a000fe0:	d108      	bne.n	1a000ff4 <find_volume+0x4c>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
1a000fe2:	2f00      	cmp	r7, #0
1a000fe4:	f000 81f7 	beq.w	1a0013d6 <find_volume+0x42e>
1a000fe8:	f010 0f04 	tst.w	r0, #4
1a000fec:	f040 81f5 	bne.w	1a0013da <find_volume+0x432>
			return FR_OK;				/* The filesystem object is valid */
1a000ff0:	2000      	movs	r0, #0
1a000ff2:	e1eb      	b.n	1a0013cc <find_volume+0x424>
	fs->fs_type = 0;					/* Clear the filesystem object */
1a000ff4:	2300      	movs	r3, #0
1a000ff6:	7023      	strb	r3, [r4, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
1a000ff8:	4bb2      	ldr	r3, [pc, #712]	; (1a0012c4 <find_volume+0x31c>)
1a000ffa:	f813 0016 	ldrb.w	r0, [r3, r6, lsl #1]
1a000ffe:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
1a001000:	f004 fc93 	bl	1a00592a <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
1a001004:	f010 0f01 	tst.w	r0, #1
1a001008:	f040 81e9 	bne.w	1a0013de <find_volume+0x436>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
1a00100c:	b11f      	cbz	r7, 1a001016 <find_volume+0x6e>
1a00100e:	f010 0f04 	tst.w	r0, #4
1a001012:	f040 81e6 	bne.w	1a0013e2 <find_volume+0x43a>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
1a001016:	2100      	movs	r1, #0
1a001018:	4620      	mov	r0, r4
1a00101a:	f7ff ff83 	bl	1a000f24 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
1a00101e:	2802      	cmp	r0, #2
1a001020:	f000 8095 	beq.w	1a00114e <find_volume+0x1a6>
1a001024:	2801      	cmp	r0, #1
1a001026:	d975      	bls.n	1a001114 <find_volume+0x16c>
	bsect = 0;
1a001028:	2700      	movs	r7, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
1a00102a:	2804      	cmp	r0, #4
1a00102c:	f000 81db 	beq.w	1a0013e6 <find_volume+0x43e>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
1a001030:	2801      	cmp	r0, #1
1a001032:	f200 81da 	bhi.w	1a0013ea <find_volume+0x442>
	if (fmt == 1) {
1a001036:	f000 8120 	beq.w	1a00127a <find_volume+0x2d2>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
1a00103a:	f104 0043 	add.w	r0, r4, #67	; 0x43
1a00103e:	f7ff fc5f 	bl	1a000900 <ld_word>
1a001042:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
1a001046:	f040 81e6 	bne.w	1a001416 <find_volume+0x46e>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
1a00104a:	f104 004e 	add.w	r0, r4, #78	; 0x4e
1a00104e:	f7ff fc57 	bl	1a000900 <ld_word>
1a001052:	4606      	mov	r6, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
1a001054:	b920      	cbnz	r0, 1a001060 <find_volume+0xb8>
1a001056:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a00105a:	f7ff fc56 	bl	1a00090a <ld_dword>
1a00105e:	4606      	mov	r6, r0
		fs->fsize = fasize;
1a001060:	6226      	str	r6, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
1a001062:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
1a001066:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
1a001068:	1e53      	subs	r3, r2, #1
1a00106a:	b2db      	uxtb	r3, r3
1a00106c:	2b01      	cmp	r3, #1
1a00106e:	f200 81d4 	bhi.w	1a00141a <find_volume+0x472>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
1a001072:	fb06 f502 	mul.w	r5, r6, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
1a001076:	f894 8045 	ldrb.w	r8, [r4, #69]	; 0x45
1a00107a:	f8a4 800a 	strh.w	r8, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
1a00107e:	f1b8 0f00 	cmp.w	r8, #0
1a001082:	f000 81cc 	beq.w	1a00141e <find_volume+0x476>
1a001086:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a00108a:	ea18 0f03 	tst.w	r8, r3
1a00108e:	f040 81c8 	bne.w	1a001422 <find_volume+0x47a>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
1a001092:	f104 0049 	add.w	r0, r4, #73	; 0x49
1a001096:	f7ff fc33 	bl	1a000900 <ld_word>
1a00109a:	4682      	mov	sl, r0
1a00109c:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
1a00109e:	f010 0f0f 	tst.w	r0, #15
1a0010a2:	f040 81c0 	bne.w	1a001426 <find_volume+0x47e>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
1a0010a6:	f104 004b 	add.w	r0, r4, #75	; 0x4b
1a0010aa:	f7ff fc29 	bl	1a000900 <ld_word>
1a0010ae:	4681      	mov	r9, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
1a0010b0:	b920      	cbnz	r0, 1a0010bc <find_volume+0x114>
1a0010b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a0010b6:	f7ff fc28 	bl	1a00090a <ld_dword>
1a0010ba:	4681      	mov	r9, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
1a0010bc:	f104 0046 	add.w	r0, r4, #70	; 0x46
1a0010c0:	f7ff fc1e 	bl	1a000900 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
1a0010c4:	4601      	mov	r1, r0
1a0010c6:	2800      	cmp	r0, #0
1a0010c8:	f000 81af 	beq.w	1a00142a <find_volume+0x482>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
1a0010cc:	1942      	adds	r2, r0, r5
1a0010ce:	eb02 121a 	add.w	r2, r2, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
1a0010d2:	4591      	cmp	r9, r2
1a0010d4:	f0c0 81ab 	bcc.w	1a00142e <find_volume+0x486>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
1a0010d8:	eba9 0302 	sub.w	r3, r9, r2
1a0010dc:	fbb3 f3f8 	udiv	r3, r3, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
1a0010e0:	2b00      	cmp	r3, #0
1a0010e2:	f000 81a6 	beq.w	1a001432 <find_volume+0x48a>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
1a0010e6:	4878      	ldr	r0, [pc, #480]	; (1a0012c8 <find_volume+0x320>)
1a0010e8:	4283      	cmp	r3, r0
1a0010ea:	f240 80e5 	bls.w	1a0012b8 <find_volume+0x310>
		fmt = 0;
1a0010ee:	f04f 0900 	mov.w	r9, #0
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
1a0010f2:	f64f 70f5 	movw	r0, #65525	; 0xfff5
1a0010f6:	4283      	cmp	r3, r0
1a0010f8:	d801      	bhi.n	1a0010fe <find_volume+0x156>
1a0010fa:	f04f 0902 	mov.w	r9, #2
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
1a0010fe:	f640 70f5 	movw	r0, #4085	; 0xff5
1a001102:	4283      	cmp	r3, r0
1a001104:	f240 80e4 	bls.w	1a0012d0 <find_volume+0x328>
		if (fmt == 0) return FR_NO_FILESYSTEM;
1a001108:	f1b9 0f00 	cmp.w	r9, #0
1a00110c:	f040 80e2 	bne.w	1a0012d4 <find_volume+0x32c>
1a001110:	200d      	movs	r0, #13
1a001112:	e15b      	b.n	1a0013cc <find_volume+0x424>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
1a001114:	4b6b      	ldr	r3, [pc, #428]	; (1a0012c4 <find_volume+0x31c>)
1a001116:	eb03 0346 	add.w	r3, r3, r6, lsl #1
1a00111a:	785b      	ldrb	r3, [r3, #1]
1a00111c:	b9cb      	cbnz	r3, 1a001152 <find_volume+0x1aa>
	bsect = 0;
1a00111e:	2700      	movs	r7, #0
1a001120:	e783      	b.n	1a00102a <find_volume+0x82>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
1a001122:	2000      	movs	r0, #0
1a001124:	ab04      	add	r3, sp, #16
1a001126:	eb03 0385 	add.w	r3, r3, r5, lsl #2
1a00112a:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
1a00112e:	3501      	adds	r5, #1
1a001130:	2d03      	cmp	r5, #3
1a001132:	d810      	bhi.n	1a001156 <find_volume+0x1ae>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
1a001134:	f104 0038 	add.w	r0, r4, #56	; 0x38
1a001138:	012b      	lsls	r3, r5, #4
1a00113a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
1a00113e:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
1a001140:	7903      	ldrb	r3, [r0, #4]
1a001142:	2b00      	cmp	r3, #0
1a001144:	d0ed      	beq.n	1a001122 <find_volume+0x17a>
1a001146:	3008      	adds	r0, #8
1a001148:	f7ff fbdf 	bl	1a00090a <ld_dword>
1a00114c:	e7ea      	b.n	1a001124 <find_volume+0x17c>
1a00114e:	2500      	movs	r5, #0
1a001150:	e7ee      	b.n	1a001130 <find_volume+0x188>
1a001152:	2500      	movs	r5, #0
1a001154:	e7ec      	b.n	1a001130 <find_volume+0x188>
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
1a001156:	4b5b      	ldr	r3, [pc, #364]	; (1a0012c4 <find_volume+0x31c>)
1a001158:	eb03 0346 	add.w	r3, r3, r6, lsl #1
1a00115c:	785d      	ldrb	r5, [r3, #1]
		if (i != 0) i--;
1a00115e:	b19d      	cbz	r5, 1a001188 <find_volume+0x1e0>
1a001160:	3d01      	subs	r5, #1
1a001162:	e011      	b.n	1a001188 <find_volume+0x1e0>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
1a001164:	4639      	mov	r1, r7
1a001166:	4620      	mov	r0, r4
1a001168:	f7ff fedc 	bl	1a000f24 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
1a00116c:	4b55      	ldr	r3, [pc, #340]	; (1a0012c4 <find_volume+0x31c>)
1a00116e:	eb03 0346 	add.w	r3, r3, r6, lsl #1
1a001172:	785b      	ldrb	r3, [r3, #1]
1a001174:	2b00      	cmp	r3, #0
1a001176:	f47f af58 	bne.w	1a00102a <find_volume+0x82>
1a00117a:	2801      	cmp	r0, #1
1a00117c:	f67f af55 	bls.w	1a00102a <find_volume+0x82>
1a001180:	3501      	adds	r5, #1
1a001182:	2d03      	cmp	r5, #3
1a001184:	f63f af51 	bhi.w	1a00102a <find_volume+0x82>
			bsect = br[i];
1a001188:	ab04      	add	r3, sp, #16
1a00118a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
1a00118e:	f853 7c10 	ldr.w	r7, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
1a001192:	2f00      	cmp	r7, #0
1a001194:	d1e6      	bne.n	1a001164 <find_volume+0x1bc>
1a001196:	2003      	movs	r0, #3
1a001198:	e7e8      	b.n	1a00116c <find_volume+0x1c4>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
1a00119a:	3301      	adds	r3, #1
1a00119c:	2b3f      	cmp	r3, #63	; 0x3f
1a00119e:	d804      	bhi.n	1a0011aa <find_volume+0x202>
1a0011a0:	18e2      	adds	r2, r4, r3
1a0011a2:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
1a0011a6:	2a00      	cmp	r2, #0
1a0011a8:	d0f7      	beq.n	1a00119a <find_volume+0x1f2>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
1a0011aa:	2b3f      	cmp	r3, #63	; 0x3f
1a0011ac:	f240 811f 	bls.w	1a0013ee <find_volume+0x446>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
1a0011b0:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
1a0011b4:	f7ff fba4 	bl	1a000900 <ld_word>
1a0011b8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
1a0011bc:	f040 8119 	bne.w	1a0013f2 <find_volume+0x44a>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
1a0011c0:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
1a0011c4:	2b09      	cmp	r3, #9
1a0011c6:	f040 8116 	bne.w	1a0013f6 <find_volume+0x44e>
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
1a0011ca:	f104 0080 	add.w	r0, r4, #128	; 0x80
1a0011ce:	f7ff fba7 	bl	1a000920 <ld_qword>
1a0011d2:	eb10 0807 	adds.w	r8, r0, r7
1a0011d6:	f141 0900 	adc.w	r9, r1, #0
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
1a0011da:	f1b9 0f01 	cmp.w	r9, #1
1a0011de:	bf08      	it	eq
1a0011e0:	f1b8 0f00 	cmpeq.w	r8, #0
1a0011e4:	f080 8109 	bcs.w	1a0013fa <find_volume+0x452>
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
1a0011e8:	f104 008c 	add.w	r0, r4, #140	; 0x8c
1a0011ec:	f7ff fb8d 	bl	1a00090a <ld_dword>
1a0011f0:	6220      	str	r0, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
1a0011f2:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
1a0011f6:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
1a0011f8:	2b01      	cmp	r3, #1
1a0011fa:	f040 8100 	bne.w	1a0013fe <find_volume+0x456>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
1a0011fe:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
1a001202:	2501      	movs	r5, #1
1a001204:	409d      	lsls	r5, r3
1a001206:	b2ad      	uxth	r5, r5
1a001208:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
1a00120a:	2d00      	cmp	r5, #0
1a00120c:	f000 80f9 	beq.w	1a001402 <find_volume+0x45a>
		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
1a001210:	f104 0094 	add.w	r0, r4, #148	; 0x94
1a001214:	f7ff fb79 	bl	1a00090a <ld_dword>
1a001218:	4682      	mov	sl, r0
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
1a00121a:	4b2c      	ldr	r3, [pc, #176]	; (1a0012cc <find_volume+0x324>)
1a00121c:	4298      	cmp	r0, r3
1a00121e:	f200 80f2 	bhi.w	1a001406 <find_volume+0x45e>
		fs->n_fatent = nclst + 2;
1a001222:	1c83      	adds	r3, r0, #2
1a001224:	61e3      	str	r3, [r4, #28]
		fs->volbase = bsect;
1a001226:	6267      	str	r7, [r4, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
1a001228:	f104 0090 	add.w	r0, r4, #144	; 0x90
1a00122c:	f7ff fb6d 	bl	1a00090a <ld_dword>
1a001230:	19c6      	adds	r6, r0, r7
1a001232:	6326      	str	r6, [r4, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
1a001234:	f104 0088 	add.w	r0, r4, #136	; 0x88
1a001238:	f7ff fb67 	bl	1a00090a <ld_dword>
1a00123c:	4438      	add	r0, r7
1a00123e:	62a0      	str	r0, [r4, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
1a001240:	fb0a f205 	mul.w	r2, sl, r5
1a001244:	2100      	movs	r1, #0
1a001246:	1992      	adds	r2, r2, r6
1a001248:	f141 0300 	adc.w	r3, r1, #0
1a00124c:	4599      	cmp	r9, r3
1a00124e:	bf08      	it	eq
1a001250:	4590      	cmpeq	r8, r2
1a001252:	f0c0 80da 	bcc.w	1a00140a <find_volume+0x462>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
1a001256:	f104 0098 	add.w	r0, r4, #152	; 0x98
1a00125a:	f7ff fb56 	bl	1a00090a <ld_dword>
1a00125e:	4601      	mov	r1, r0
1a001260:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (move_window(fs, clst2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
1a001262:	4620      	mov	r0, r4
1a001264:	f7ff fc58 	bl	1a000b18 <clst2sect>
1a001268:	4601      	mov	r1, r0
1a00126a:	4620      	mov	r0, r4
1a00126c:	f7ff fe40 	bl	1a000ef0 <move_window>
1a001270:	2800      	cmp	r0, #0
1a001272:	f040 80cc 	bne.w	1a00140e <find_volume+0x466>
		for (i = 0; i < SS(fs); i += SZDIRE) {
1a001276:	2500      	movs	r5, #0
1a001278:	e002      	b.n	1a001280 <find_volume+0x2d8>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
1a00127a:	230b      	movs	r3, #11
1a00127c:	e78e      	b.n	1a00119c <find_volume+0x1f4>
		for (i = 0; i < SS(fs); i += SZDIRE) {
1a00127e:	3520      	adds	r5, #32
1a001280:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
1a001284:	d20d      	bcs.n	1a0012a2 <find_volume+0x2fa>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
1a001286:	1963      	adds	r3, r4, r5
1a001288:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
1a00128c:	2b81      	cmp	r3, #129	; 0x81
1a00128e:	d1f6      	bne.n	1a00127e <find_volume+0x2d6>
1a001290:	f104 0338 	add.w	r3, r4, #56	; 0x38
1a001294:	f105 0014 	add.w	r0, r5, #20
1a001298:	4418      	add	r0, r3
1a00129a:	f7ff fb36 	bl	1a00090a <ld_dword>
1a00129e:	2802      	cmp	r0, #2
1a0012a0:	d1ed      	bne.n	1a00127e <find_volume+0x2d6>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
1a0012a2:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
1a0012a6:	f000 80b4 	beq.w	1a001412 <find_volume+0x46a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
1a0012aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0012ae:	61a3      	str	r3, [r4, #24]
1a0012b0:	6163      	str	r3, [r4, #20]
		fmt = FS_EXFAT;			/* FAT sub-type */
1a0012b2:	f04f 0904 	mov.w	r9, #4
1a0012b6:	e037      	b.n	1a001328 <find_volume+0x380>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
1a0012b8:	f04f 0903 	mov.w	r9, #3
1a0012bc:	e719      	b.n	1a0010f2 <find_volume+0x14a>
1a0012be:	bf00      	nop
1a0012c0:	10000824 	.word	0x10000824
1a0012c4:	10000010 	.word	0x10000010
1a0012c8:	0ffffff5 	.word	0x0ffffff5
1a0012cc:	7ffffffd 	.word	0x7ffffffd
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
1a0012d0:	f04f 0901 	mov.w	r9, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
1a0012d4:	f103 0802 	add.w	r8, r3, #2
1a0012d8:	f8c4 801c 	str.w	r8, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
1a0012dc:	6267      	str	r7, [r4, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
1a0012de:	19cb      	adds	r3, r1, r7
1a0012e0:	62a3      	str	r3, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
1a0012e2:	443a      	add	r2, r7
1a0012e4:	6322      	str	r2, [r4, #48]	; 0x30
		if (fmt == FS_FAT32) {
1a0012e6:	f1b9 0f03 	cmp.w	r9, #3
1a0012ea:	d02b      	beq.n	1a001344 <find_volume+0x39c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
1a0012ec:	f1ba 0f00 	cmp.w	sl, #0
1a0012f0:	f000 80a5 	beq.w	1a00143e <find_volume+0x496>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
1a0012f4:	442b      	add	r3, r5
1a0012f6:	62e3      	str	r3, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
1a0012f8:	f1b9 0f02 	cmp.w	r9, #2
1a0012fc:	d033      	beq.n	1a001366 <find_volume+0x3be>
1a0012fe:	eb08 0248 	add.w	r2, r8, r8, lsl #1
1a001302:	f008 0301 	and.w	r3, r8, #1
1a001306:	eb03 0352 	add.w	r3, r3, r2, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
1a00130a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
1a00130e:	ebb6 2f53 	cmp.w	r6, r3, lsr #9
1a001312:	f0c0 8096 	bcc.w	1a001442 <find_volume+0x49a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
1a001316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a00131a:	61a3      	str	r3, [r4, #24]
1a00131c:	6163      	str	r3, [r4, #20]
		fs->fsi_flag = 0x80;
1a00131e:	2380      	movs	r3, #128	; 0x80
1a001320:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
1a001322:	f1b9 0f03 	cmp.w	r9, #3
1a001326:	d021      	beq.n	1a00136c <find_volume+0x3c4>
	fs->fs_type = fmt;		/* FAT sub-type */
1a001328:	f884 9000 	strb.w	r9, [r4]
	fs->id = ++Fsid;		/* Volume mount ID */
1a00132c:	4a46      	ldr	r2, [pc, #280]	; (1a001448 <find_volume+0x4a0>)
1a00132e:	8813      	ldrh	r3, [r2, #0]
1a001330:	3301      	adds	r3, #1
1a001332:	b29b      	uxth	r3, r3
1a001334:	8013      	strh	r3, [r2, #0]
1a001336:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
1a001338:	4b44      	ldr	r3, [pc, #272]	; (1a00144c <find_volume+0x4a4>)
1a00133a:	60e3      	str	r3, [r4, #12]
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
1a00133c:	4b44      	ldr	r3, [pc, #272]	; (1a001450 <find_volume+0x4a8>)
1a00133e:	6123      	str	r3, [r4, #16]
	return FR_OK;
1a001340:	2000      	movs	r0, #0
1a001342:	e043      	b.n	1a0013cc <find_volume+0x424>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
1a001344:	f104 0062 	add.w	r0, r4, #98	; 0x62
1a001348:	f7ff fada 	bl	1a000900 <ld_word>
1a00134c:	2800      	cmp	r0, #0
1a00134e:	d172      	bne.n	1a001436 <find_volume+0x48e>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
1a001350:	f1ba 0f00 	cmp.w	sl, #0
1a001354:	d171      	bne.n	1a00143a <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
1a001356:	f104 0064 	add.w	r0, r4, #100	; 0x64
1a00135a:	f7ff fad6 	bl	1a00090a <ld_dword>
1a00135e:	62e0      	str	r0, [r4, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
1a001360:	ea4f 0388 	mov.w	r3, r8, lsl #2
1a001364:	e7d1      	b.n	1a00130a <find_volume+0x362>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
1a001366:	ea4f 0348 	mov.w	r3, r8, lsl #1
1a00136a:	e7ce      	b.n	1a00130a <find_volume+0x362>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
1a00136c:	f104 0068 	add.w	r0, r4, #104	; 0x68
1a001370:	f7ff fac6 	bl	1a000900 <ld_word>
1a001374:	2801      	cmp	r0, #1
1a001376:	d1d7      	bne.n	1a001328 <find_volume+0x380>
			&& move_window(fs, bsect + 1) == FR_OK)
1a001378:	1c79      	adds	r1, r7, #1
1a00137a:	4620      	mov	r0, r4
1a00137c:	f7ff fdb8 	bl	1a000ef0 <move_window>
1a001380:	2800      	cmp	r0, #0
1a001382:	d1d1      	bne.n	1a001328 <find_volume+0x380>
			fs->fsi_flag = 0;
1a001384:	2300      	movs	r3, #0
1a001386:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
1a001388:	f204 2036 	addw	r0, r4, #566	; 0x236
1a00138c:	f7ff fab8 	bl	1a000900 <ld_word>
1a001390:	f64a 2355 	movw	r3, #43605	; 0xaa55
1a001394:	4298      	cmp	r0, r3
1a001396:	d1c7      	bne.n	1a001328 <find_volume+0x380>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
1a001398:	f104 0038 	add.w	r0, r4, #56	; 0x38
1a00139c:	f7ff fab5 	bl	1a00090a <ld_dword>
1a0013a0:	4b2c      	ldr	r3, [pc, #176]	; (1a001454 <find_volume+0x4ac>)
1a0013a2:	4298      	cmp	r0, r3
1a0013a4:	d1c0      	bne.n	1a001328 <find_volume+0x380>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
1a0013a6:	f504 7007 	add.w	r0, r4, #540	; 0x21c
1a0013aa:	f7ff faae 	bl	1a00090a <ld_dword>
1a0013ae:	4b2a      	ldr	r3, [pc, #168]	; (1a001458 <find_volume+0x4b0>)
1a0013b0:	4298      	cmp	r0, r3
1a0013b2:	d1b9      	bne.n	1a001328 <find_volume+0x380>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
1a0013b4:	f504 7008 	add.w	r0, r4, #544	; 0x220
1a0013b8:	f7ff faa7 	bl	1a00090a <ld_dword>
1a0013bc:	61a0      	str	r0, [r4, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
1a0013be:	f504 7009 	add.w	r0, r4, #548	; 0x224
1a0013c2:	f7ff faa2 	bl	1a00090a <ld_dword>
1a0013c6:	6160      	str	r0, [r4, #20]
1a0013c8:	e7ae      	b.n	1a001328 <find_volume+0x380>
	if (vol < 0) return FR_INVALID_DRIVE;
1a0013ca:	200b      	movs	r0, #11
}
1a0013cc:	b004      	add	sp, #16
1a0013ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
1a0013d2:	200c      	movs	r0, #12
1a0013d4:	e7fa      	b.n	1a0013cc <find_volume+0x424>
			return FR_OK;				/* The filesystem object is valid */
1a0013d6:	2000      	movs	r0, #0
1a0013d8:	e7f8      	b.n	1a0013cc <find_volume+0x424>
				return FR_WRITE_PROTECTED;
1a0013da:	200a      	movs	r0, #10
1a0013dc:	e7f6      	b.n	1a0013cc <find_volume+0x424>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
1a0013de:	2003      	movs	r0, #3
1a0013e0:	e7f4      	b.n	1a0013cc <find_volume+0x424>
		return FR_WRITE_PROTECTED;
1a0013e2:	200a      	movs	r0, #10
1a0013e4:	e7f2      	b.n	1a0013cc <find_volume+0x424>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
1a0013e6:	2001      	movs	r0, #1
1a0013e8:	e7f0      	b.n	1a0013cc <find_volume+0x424>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
1a0013ea:	200d      	movs	r0, #13
1a0013ec:	e7ee      	b.n	1a0013cc <find_volume+0x424>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
1a0013ee:	200d      	movs	r0, #13
1a0013f0:	e7ec      	b.n	1a0013cc <find_volume+0x424>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
1a0013f2:	200d      	movs	r0, #13
1a0013f4:	e7ea      	b.n	1a0013cc <find_volume+0x424>
			return FR_NO_FILESYSTEM;
1a0013f6:	200d      	movs	r0, #13
1a0013f8:	e7e8      	b.n	1a0013cc <find_volume+0x424>
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
1a0013fa:	200d      	movs	r0, #13
1a0013fc:	e7e6      	b.n	1a0013cc <find_volume+0x424>
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
1a0013fe:	200d      	movs	r0, #13
1a001400:	e7e4      	b.n	1a0013cc <find_volume+0x424>
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
1a001402:	200d      	movs	r0, #13
1a001404:	e7e2      	b.n	1a0013cc <find_volume+0x424>
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
1a001406:	200d      	movs	r0, #13
1a001408:	e7e0      	b.n	1a0013cc <find_volume+0x424>
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
1a00140a:	200d      	movs	r0, #13
1a00140c:	e7de      	b.n	1a0013cc <find_volume+0x424>
		if (move_window(fs, clst2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
1a00140e:	2001      	movs	r0, #1
1a001410:	e7dc      	b.n	1a0013cc <find_volume+0x424>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
1a001412:	200d      	movs	r0, #13
1a001414:	e7da      	b.n	1a0013cc <find_volume+0x424>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
1a001416:	200d      	movs	r0, #13
1a001418:	e7d8      	b.n	1a0013cc <find_volume+0x424>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
1a00141a:	200d      	movs	r0, #13
1a00141c:	e7d6      	b.n	1a0013cc <find_volume+0x424>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
1a00141e:	200d      	movs	r0, #13
1a001420:	e7d4      	b.n	1a0013cc <find_volume+0x424>
1a001422:	200d      	movs	r0, #13
1a001424:	e7d2      	b.n	1a0013cc <find_volume+0x424>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
1a001426:	200d      	movs	r0, #13
1a001428:	e7d0      	b.n	1a0013cc <find_volume+0x424>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
1a00142a:	200d      	movs	r0, #13
1a00142c:	e7ce      	b.n	1a0013cc <find_volume+0x424>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
1a00142e:	200d      	movs	r0, #13
1a001430:	e7cc      	b.n	1a0013cc <find_volume+0x424>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
1a001432:	200d      	movs	r0, #13
1a001434:	e7ca      	b.n	1a0013cc <find_volume+0x424>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
1a001436:	200d      	movs	r0, #13
1a001438:	e7c8      	b.n	1a0013cc <find_volume+0x424>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
1a00143a:	200d      	movs	r0, #13
1a00143c:	e7c6      	b.n	1a0013cc <find_volume+0x424>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
1a00143e:	200d      	movs	r0, #13
1a001440:	e7c4      	b.n	1a0013cc <find_volume+0x424>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
1a001442:	200d      	movs	r0, #13
1a001444:	e7c2      	b.n	1a0013cc <find_volume+0x424>
1a001446:	bf00      	nop
1a001448:	1000082c 	.word	0x1000082c
1a00144c:	10000830 	.word	0x10000830
1a001450:	100005c4 	.word	0x100005c4
1a001454:	41615252 	.word	0x41615252
1a001458:	61417272 	.word	0x61417272

1a00145c <find_bitmap>:
{
1a00145c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001460:	4605      	mov	r5, r0
1a001462:	4691      	mov	r9, r2
	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
1a001464:	1e8f      	subs	r7, r1, #2
	if (clst >= fs->n_fatent - 2) clst = 0;
1a001466:	69c3      	ldr	r3, [r0, #28]
1a001468:	3b02      	subs	r3, #2
1a00146a:	42bb      	cmp	r3, r7
1a00146c:	d800      	bhi.n	1a001470 <find_bitmap+0x14>
1a00146e:	2700      	movs	r7, #0
	scl = val = clst; ctr = 0;
1a001470:	46b8      	mov	r8, r7
1a001472:	463c      	mov	r4, r7
1a001474:	2600      	movs	r6, #0
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
1a001476:	6b29      	ldr	r1, [r5, #48]	; 0x30
1a001478:	eb01 3114 	add.w	r1, r1, r4, lsr #12
1a00147c:	4628      	mov	r0, r5
1a00147e:	f7ff fd37 	bl	1a000ef0 <move_window>
1a001482:	bb40      	cbnz	r0, 1a0014d6 <find_bitmap+0x7a>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
1a001484:	f3c4 00c8 	ubfx	r0, r4, #3, #9
1a001488:	f004 0207 	and.w	r2, r4, #7
1a00148c:	2301      	movs	r3, #1
1a00148e:	4093      	lsls	r3, r2
1a001490:	b2db      	uxtb	r3, r3
1a001492:	e009      	b.n	1a0014a8 <find_bitmap+0x4c>
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
1a001494:	46a0      	mov	r8, r4
1a001496:	2600      	movs	r6, #0
				if (val == clst) return 0;	/* All cluster scanned? */
1a001498:	42a7      	cmp	r7, r4
1a00149a:	d01f      	beq.n	1a0014dc <find_bitmap+0x80>
			} while (bm != 0);
1a00149c:	b923      	cbnz	r3, 1a0014a8 <find_bitmap+0x4c>
		} while (++i < SS(fs));
1a00149e:	3001      	adds	r0, #1
1a0014a0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
1a0014a4:	d2e7      	bcs.n	1a001476 <find_bitmap+0x1a>
			bm = 1;
1a0014a6:	2301      	movs	r3, #1
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
1a0014a8:	182a      	adds	r2, r5, r0
1a0014aa:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
1a0014ae:	401a      	ands	r2, r3
1a0014b0:	005b      	lsls	r3, r3, #1
1a0014b2:	b2db      	uxtb	r3, r3
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
1a0014b4:	3401      	adds	r4, #1
1a0014b6:	69e9      	ldr	r1, [r5, #28]
1a0014b8:	3902      	subs	r1, #2
1a0014ba:	42a1      	cmp	r1, r4
1a0014bc:	d803      	bhi.n	1a0014c6 <find_bitmap+0x6a>
					val = 0; bm = 0; i = SS(fs);
1a0014be:	2400      	movs	r4, #0
1a0014c0:	f44f 7000 	mov.w	r0, #512	; 0x200
1a0014c4:	4623      	mov	r3, r4
				if (bv == 0) {	/* Is it a free cluster? */
1a0014c6:	2a00      	cmp	r2, #0
1a0014c8:	d1e4      	bne.n	1a001494 <find_bitmap+0x38>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
1a0014ca:	3601      	adds	r6, #1
1a0014cc:	454e      	cmp	r6, r9
1a0014ce:	d1e3      	bne.n	1a001498 <find_bitmap+0x3c>
1a0014d0:	f108 0002 	add.w	r0, r8, #2
1a0014d4:	e003      	b.n	1a0014de <find_bitmap+0x82>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
1a0014d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0014da:	e000      	b.n	1a0014de <find_bitmap+0x82>
				if (val == clst) return 0;	/* All cluster scanned? */
1a0014dc:	2000      	movs	r0, #0
}
1a0014de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a0014e2 <change_bitmap>:
{
1a0014e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0014e6:	4606      	mov	r6, r0
1a0014e8:	4617      	mov	r7, r2
1a0014ea:	4698      	mov	r8, r3
	clst -= 2;	/* The first bit corresponds to cluster #2 */
1a0014ec:	1e8c      	subs	r4, r1, #2
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
1a0014ee:	6b01      	ldr	r1, [r0, #48]	; 0x30
1a0014f0:	eb01 3114 	add.w	r1, r1, r4, lsr #12
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
1a0014f4:	f3c4 05c8 	ubfx	r5, r4, #3, #9
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
1a0014f8:	f004 0407 	and.w	r4, r4, #7
1a0014fc:	2301      	movs	r3, #1
1a0014fe:	fa03 f404 	lsl.w	r4, r3, r4
1a001502:	b2e4      	uxtb	r4, r4
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
1a001504:	f101 0901 	add.w	r9, r1, #1
1a001508:	4630      	mov	r0, r6
1a00150a:	f7ff fcf1 	bl	1a000ef0 <move_window>
1a00150e:	4601      	mov	r1, r0
1a001510:	b110      	cbz	r0, 1a001518 <change_bitmap+0x36>
1a001512:	2101      	movs	r1, #1
1a001514:	e01e      	b.n	1a001554 <change_bitmap+0x72>
			bm = 1;
1a001516:	2401      	movs	r4, #1
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
1a001518:	1973      	adds	r3, r6, r5
1a00151a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
1a00151e:	4223      	tst	r3, r4
1a001520:	bf14      	ite	ne
1a001522:	2201      	movne	r2, #1
1a001524:	2200      	moveq	r2, #0
1a001526:	4542      	cmp	r2, r8
1a001528:	d013      	beq.n	1a001552 <change_bitmap+0x70>
				fs->win[i] ^= bm;	/* Flip the bit */
1a00152a:	1972      	adds	r2, r6, r5
1a00152c:	4063      	eors	r3, r4
1a00152e:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
				fs->wflag = 1;
1a001532:	2301      	movs	r3, #1
1a001534:	70f3      	strb	r3, [r6, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
1a001536:	3f01      	subs	r7, #1
1a001538:	d00c      	beq.n	1a001554 <change_bitmap+0x72>
			} while (bm <<= 1);		/* Next bit */
1a00153a:	409c      	lsls	r4, r3
1a00153c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
1a001540:	d1ea      	bne.n	1a001518 <change_bitmap+0x36>
		} while (++i < SS(fs));		/* Next byte */
1a001542:	441d      	add	r5, r3
			bm = 1;
1a001544:	461c      	mov	r4, r3
		} while (++i < SS(fs));		/* Next byte */
1a001546:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
1a00154a:	d3e4      	bcc.n	1a001516 <change_bitmap+0x34>
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
1a00154c:	4649      	mov	r1, r9
		i = 0;
1a00154e:	2500      	movs	r5, #0
1a001550:	e7d8      	b.n	1a001504 <change_bitmap+0x22>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
1a001552:	2102      	movs	r1, #2
}
1a001554:	4608      	mov	r0, r1
1a001556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a00155a <put_fat>:
{
1a00155a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
1a00155e:	2901      	cmp	r1, #1
1a001560:	f240 8082 	bls.w	1a001668 <put_fat+0x10e>
1a001564:	4605      	mov	r5, r0
1a001566:	460c      	mov	r4, r1
1a001568:	4617      	mov	r7, r2
1a00156a:	69c3      	ldr	r3, [r0, #28]
1a00156c:	428b      	cmp	r3, r1
1a00156e:	d97d      	bls.n	1a00166c <put_fat+0x112>
		switch (fs->fs_type) {
1a001570:	7803      	ldrb	r3, [r0, #0]
1a001572:	3b01      	subs	r3, #1
1a001574:	2b03      	cmp	r3, #3
1a001576:	d87d      	bhi.n	1a001674 <put_fat+0x11a>
1a001578:	e8df f003 	tbb	[pc, r3]
1a00157c:	53534002 	.word	0x53534002
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
1a001580:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1a001584:	6a81      	ldr	r1, [r0, #40]	; 0x28
1a001586:	eb01 2158 	add.w	r1, r1, r8, lsr #9
1a00158a:	f7ff fcb1 	bl	1a000ef0 <move_window>
			if (res != FR_OK) break;
1a00158e:	4606      	mov	r6, r0
1a001590:	2800      	cmp	r0, #0
1a001592:	d16c      	bne.n	1a00166e <put_fat+0x114>
			p = fs->win + bc++ % SS(fs);
1a001594:	f105 0a38 	add.w	sl, r5, #56	; 0x38
1a001598:	f108 0901 	add.w	r9, r8, #1
1a00159c:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
1a0015a0:	f014 0401 	ands.w	r4, r4, #1
1a0015a4:	d01f      	beq.n	1a0015e6 <put_fat+0x8c>
1a0015a6:	f91a 3008 	ldrsb.w	r3, [sl, r8]
1a0015aa:	f003 030f 	and.w	r3, r3, #15
1a0015ae:	013a      	lsls	r2, r7, #4
1a0015b0:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
1a0015b4:	4313      	orrs	r3, r2
1a0015b6:	b2db      	uxtb	r3, r3
1a0015b8:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
1a0015bc:	2301      	movs	r3, #1
1a0015be:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1a0015c0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a0015c2:	eb01 2159 	add.w	r1, r1, r9, lsr #9
1a0015c6:	4628      	mov	r0, r5
1a0015c8:	f7ff fc92 	bl	1a000ef0 <move_window>
			if (res != FR_OK) break;
1a0015cc:	4606      	mov	r6, r0
1a0015ce:	2800      	cmp	r0, #0
1a0015d0:	d14d      	bne.n	1a00166e <put_fat+0x114>
			p = fs->win + bc % SS(fs);
1a0015d2:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
1a0015d6:	b144      	cbz	r4, 1a0015ea <put_fat+0x90>
1a0015d8:	f3c7 1707 	ubfx	r7, r7, #4, #8
1a0015dc:	f80a 7009 	strb.w	r7, [sl, r9]
			fs->wflag = 1;
1a0015e0:	2301      	movs	r3, #1
1a0015e2:	70eb      	strb	r3, [r5, #3]
			break;
1a0015e4:	e043      	b.n	1a00166e <put_fat+0x114>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
1a0015e6:	b2fb      	uxtb	r3, r7
1a0015e8:	e7e6      	b.n	1a0015b8 <put_fat+0x5e>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
1a0015ea:	f91a 3009 	ldrsb.w	r3, [sl, r9]
1a0015ee:	f023 030f 	bic.w	r3, r3, #15
1a0015f2:	f3c7 2703 	ubfx	r7, r7, #8, #4
1a0015f6:	431f      	orrs	r7, r3
1a0015f8:	b2ff      	uxtb	r7, r7
1a0015fa:	e7ef      	b.n	1a0015dc <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
1a0015fc:	6a81      	ldr	r1, [r0, #40]	; 0x28
1a0015fe:	eb01 2114 	add.w	r1, r1, r4, lsr #8
1a001602:	f7ff fc75 	bl	1a000ef0 <move_window>
			if (res != FR_OK) break;
1a001606:	4606      	mov	r6, r0
1a001608:	bb88      	cbnz	r0, 1a00166e <put_fat+0x114>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
1a00160a:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a00160e:	0064      	lsls	r4, r4, #1
1a001610:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
1a001614:	b2b9      	uxth	r1, r7
1a001616:	4420      	add	r0, r4
1a001618:	f7ff f9d6 	bl	1a0009c8 <st_word>
			fs->wflag = 1;
1a00161c:	2301      	movs	r3, #1
1a00161e:	70eb      	strb	r3, [r5, #3]
			break;
1a001620:	e025      	b.n	1a00166e <put_fat+0x114>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
1a001622:	6a81      	ldr	r1, [r0, #40]	; 0x28
1a001624:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
1a001628:	f7ff fc62 	bl	1a000ef0 <move_window>
			if (res != FR_OK) break;
1a00162c:	4606      	mov	r6, r0
1a00162e:	b9f0      	cbnz	r0, 1a00166e <put_fat+0x114>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1a001630:	782b      	ldrb	r3, [r5, #0]
1a001632:	2b04      	cmp	r3, #4
1a001634:	d00c      	beq.n	1a001650 <put_fat+0xf6>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
1a001636:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
1a00163a:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a00163e:	00a3      	lsls	r3, r4, #2
1a001640:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
1a001644:	4418      	add	r0, r3
1a001646:	f7ff f960 	bl	1a00090a <ld_dword>
1a00164a:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
1a00164e:	4307      	orrs	r7, r0
			st_dword(fs->win + clst * 4 % SS(fs), val);
1a001650:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a001654:	00a4      	lsls	r4, r4, #2
1a001656:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
1a00165a:	4639      	mov	r1, r7
1a00165c:	4420      	add	r0, r4
1a00165e:	f7ff f9b7 	bl	1a0009d0 <st_dword>
			fs->wflag = 1;
1a001662:	2301      	movs	r3, #1
1a001664:	70eb      	strb	r3, [r5, #3]
			break;
1a001666:	e002      	b.n	1a00166e <put_fat+0x114>
	FRESULT res = FR_INT_ERR;
1a001668:	2602      	movs	r6, #2
1a00166a:	e000      	b.n	1a00166e <put_fat+0x114>
1a00166c:	2602      	movs	r6, #2
}
1a00166e:	4630      	mov	r0, r6
1a001670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	FRESULT res = FR_INT_ERR;
1a001674:	2602      	movs	r6, #2
1a001676:	e7fa      	b.n	1a00166e <put_fat+0x114>

1a001678 <fill_last_frag>:
{
1a001678:	b570      	push	{r4, r5, r6, lr}
1a00167a:	4604      	mov	r4, r0
1a00167c:	460d      	mov	r5, r1
1a00167e:	4616      	mov	r6, r2
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
1a001680:	e007      	b.n	1a001692 <fill_last_frag+0x1a>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
1a001682:	4632      	mov	r2, r6
1a001684:	f7ff ff69 	bl	1a00155a <put_fat>
		if (res != FR_OK) return res;
1a001688:	4603      	mov	r3, r0
1a00168a:	b958      	cbnz	r0, 1a0016a4 <fill_last_frag+0x2c>
		obj->n_frag--;
1a00168c:	69e3      	ldr	r3, [r4, #28]
1a00168e:	3b01      	subs	r3, #1
1a001690:	61e3      	str	r3, [r4, #28]
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
1a001692:	69e3      	ldr	r3, [r4, #28]
1a001694:	b133      	cbz	r3, 1a0016a4 <fill_last_frag+0x2c>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
1a001696:	6820      	ldr	r0, [r4, #0]
1a001698:	1aea      	subs	r2, r5, r3
1a00169a:	1c51      	adds	r1, r2, #1
1a00169c:	2b01      	cmp	r3, #1
1a00169e:	d9f0      	bls.n	1a001682 <fill_last_frag+0xa>
1a0016a0:	3202      	adds	r2, #2
1a0016a2:	e7ef      	b.n	1a001684 <fill_last_frag+0xc>
}
1a0016a4:	4618      	mov	r0, r3
1a0016a6:	bd70      	pop	{r4, r5, r6, pc}

1a0016a8 <fill_first_frag>:
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
1a0016a8:	79c3      	ldrb	r3, [r0, #7]
1a0016aa:	2b03      	cmp	r3, #3
1a0016ac:	d002      	beq.n	1a0016b4 <fill_first_frag+0xc>
	return FR_OK;
1a0016ae:	2300      	movs	r3, #0
}
1a0016b0:	4618      	mov	r0, r3
1a0016b2:	4770      	bx	lr
{
1a0016b4:	b570      	push	{r4, r5, r6, lr}
1a0016b6:	4606      	mov	r6, r0
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
1a0016b8:	6881      	ldr	r1, [r0, #8]
1a0016ba:	6984      	ldr	r4, [r0, #24]
1a0016bc:	b14c      	cbz	r4, 1a0016d2 <fill_first_frag+0x2a>
			res = put_fat(obj->fs, cl, cl + 1);
1a0016be:	1c4d      	adds	r5, r1, #1
1a0016c0:	462a      	mov	r2, r5
1a0016c2:	6830      	ldr	r0, [r6, #0]
1a0016c4:	f7ff ff49 	bl	1a00155a <put_fat>
			if (res != FR_OK) return res;
1a0016c8:	4603      	mov	r3, r0
1a0016ca:	b920      	cbnz	r0, 1a0016d6 <fill_first_frag+0x2e>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
1a0016cc:	3c01      	subs	r4, #1
1a0016ce:	4629      	mov	r1, r5
1a0016d0:	e7f4      	b.n	1a0016bc <fill_first_frag+0x14>
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
1a0016d2:	2300      	movs	r3, #0
1a0016d4:	71f3      	strb	r3, [r6, #7]
}
1a0016d6:	4618      	mov	r0, r3
1a0016d8:	bd70      	pop	{r4, r5, r6, pc}

1a0016da <get_fat>:
{
1a0016da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
1a0016dc:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
1a0016de:	2901      	cmp	r1, #1
1a0016e0:	f240 8095 	bls.w	1a00180e <get_fat+0x134>
1a0016e4:	69eb      	ldr	r3, [r5, #28]
1a0016e6:	428b      	cmp	r3, r1
1a0016e8:	f240 8093 	bls.w	1a001812 <get_fat+0x138>
1a0016ec:	460c      	mov	r4, r1
		switch (fs->fs_type) {
1a0016ee:	782b      	ldrb	r3, [r5, #0]
1a0016f0:	3b01      	subs	r3, #1
1a0016f2:	2b03      	cmp	r3, #3
1a0016f4:	f200 808f 	bhi.w	1a001816 <get_fat+0x13c>
1a0016f8:	e8df f003 	tbb	[pc, r3]
1a0016fc:	4e3b2a02 	.word	0x4e3b2a02
			bc = (UINT)clst; bc += bc / 2;
1a001700:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1a001704:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a001706:	eb01 2156 	add.w	r1, r1, r6, lsr #9
1a00170a:	4628      	mov	r0, r5
1a00170c:	f7ff fbf0 	bl	1a000ef0 <move_window>
1a001710:	2800      	cmp	r0, #0
1a001712:	f040 8082 	bne.w	1a00181a <get_fat+0x140>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
1a001716:	1c77      	adds	r7, r6, #1
1a001718:	f3c6 0608 	ubfx	r6, r6, #0, #9
1a00171c:	442e      	add	r6, r5
1a00171e:	f896 6038 	ldrb.w	r6, [r6, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1a001722:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a001724:	eb01 2157 	add.w	r1, r1, r7, lsr #9
1a001728:	4628      	mov	r0, r5
1a00172a:	f7ff fbe1 	bl	1a000ef0 <move_window>
1a00172e:	2800      	cmp	r0, #0
1a001730:	d176      	bne.n	1a001820 <get_fat+0x146>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
1a001732:	f3c7 0008 	ubfx	r0, r7, #0, #9
1a001736:	4428      	add	r0, r5
1a001738:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
1a00173c:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
1a001740:	f014 0f01 	tst.w	r4, #1
1a001744:	d001      	beq.n	1a00174a <get_fat+0x70>
1a001746:	0900      	lsrs	r0, r0, #4
1a001748:	e062      	b.n	1a001810 <get_fat+0x136>
1a00174a:	f3c0 000b 	ubfx	r0, r0, #0, #12
1a00174e:	e05f      	b.n	1a001810 <get_fat+0x136>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
1a001750:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a001752:	eb01 2114 	add.w	r1, r1, r4, lsr #8
1a001756:	4628      	mov	r0, r5
1a001758:	f7ff fbca 	bl	1a000ef0 <move_window>
1a00175c:	2800      	cmp	r0, #0
1a00175e:	d162      	bne.n	1a001826 <get_fat+0x14c>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
1a001760:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a001764:	0064      	lsls	r4, r4, #1
1a001766:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
1a00176a:	4420      	add	r0, r4
1a00176c:	f7ff f8c8 	bl	1a000900 <ld_word>
			break;
1a001770:	e04e      	b.n	1a001810 <get_fat+0x136>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1a001772:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a001774:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
1a001778:	4628      	mov	r0, r5
1a00177a:	f7ff fbb9 	bl	1a000ef0 <move_window>
1a00177e:	2800      	cmp	r0, #0
1a001780:	d154      	bne.n	1a00182c <get_fat+0x152>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
1a001782:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a001786:	00a4      	lsls	r4, r4, #2
1a001788:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
1a00178c:	4420      	add	r0, r4
1a00178e:	f7ff f8bc 	bl	1a00090a <ld_dword>
1a001792:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
1a001796:	e03b      	b.n	1a001810 <get_fat+0x136>
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
1a001798:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
1a00179c:	ea52 0103 	orrs.w	r1, r2, r3
1a0017a0:	d001      	beq.n	1a0017a6 <get_fat+0xcc>
1a0017a2:	6881      	ldr	r1, [r0, #8]
1a0017a4:	b911      	cbnz	r1, 1a0017ac <get_fat+0xd2>
1a0017a6:	79c1      	ldrb	r1, [r0, #7]
1a0017a8:	2900      	cmp	r1, #0
1a0017aa:	d142      	bne.n	1a001832 <get_fat+0x158>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
1a0017ac:	6881      	ldr	r1, [r0, #8]
1a0017ae:	1a61      	subs	r1, r4, r1
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
1a0017b0:	f112 36ff 	adds.w	r6, r2, #4294967295	; 0xffffffff
1a0017b4:	f143 37ff 	adc.w	r7, r3, #4294967295	; 0xffffffff
1a0017b8:	0a72      	lsrs	r2, r6, #9
1a0017ba:	ea42 52c7 	orr.w	r2, r2, r7, lsl #23
1a0017be:	896b      	ldrh	r3, [r5, #10]
1a0017c0:	fbb2 f2f3 	udiv	r2, r2, r3
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
1a0017c4:	79c3      	ldrb	r3, [r0, #7]
1a0017c6:	2b02      	cmp	r3, #2
1a0017c8:	d017      	beq.n	1a0017fa <get_fat+0x120>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
1a0017ca:	2b03      	cmp	r3, #3
1a0017cc:	d01a      	beq.n	1a001804 <get_fat+0x12a>
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
1a0017ce:	2b02      	cmp	r3, #2
1a0017d0:	d034      	beq.n	1a00183c <get_fat+0x162>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
1a0017d2:	69c3      	ldr	r3, [r0, #28]
1a0017d4:	bba3      	cbnz	r3, 1a001840 <get_fat+0x166>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1a0017d6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a0017d8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
1a0017dc:	4628      	mov	r0, r5
1a0017de:	f7ff fb87 	bl	1a000ef0 <move_window>
1a0017e2:	bb80      	cbnz	r0, 1a001846 <get_fat+0x16c>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
1a0017e4:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a0017e8:	00a3      	lsls	r3, r4, #2
1a0017ea:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
1a0017ee:	4418      	add	r0, r3
1a0017f0:	f7ff f88b 	bl	1a00090a <ld_dword>
1a0017f4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
1a0017f8:	e00a      	b.n	1a001810 <get_fat+0x136>
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
1a0017fa:	4291      	cmp	r1, r2
1a0017fc:	d8e5      	bhi.n	1a0017ca <get_fat+0xf0>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
1a0017fe:	d01a      	beq.n	1a001836 <get_fat+0x15c>
1a001800:	1c60      	adds	r0, r4, #1
1a001802:	e005      	b.n	1a001810 <get_fat+0x136>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
1a001804:	6982      	ldr	r2, [r0, #24]
1a001806:	428a      	cmp	r2, r1
1a001808:	d9e1      	bls.n	1a0017ce <get_fat+0xf4>
					val = clst + 1; 	/* Generate the value */
1a00180a:	1c60      	adds	r0, r4, #1
					break;
1a00180c:	e000      	b.n	1a001810 <get_fat+0x136>
		val = 1;	/* Internal error */
1a00180e:	2001      	movs	r0, #1
}
1a001810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
1a001812:	2001      	movs	r0, #1
1a001814:	e7fc      	b.n	1a001810 <get_fat+0x136>
			val = 1;	/* Internal error */
1a001816:	2001      	movs	r0, #1
1a001818:	e7fa      	b.n	1a001810 <get_fat+0x136>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
1a00181a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00181e:	e7f7      	b.n	1a001810 <get_fat+0x136>
1a001820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001824:	e7f4      	b.n	1a001810 <get_fat+0x136>
1a001826:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00182a:	e7f1      	b.n	1a001810 <get_fat+0x136>
1a00182c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001830:	e7ee      	b.n	1a001810 <get_fat+0x136>
			val = 1;	/* Internal error */
1a001832:	2001      	movs	r0, #1
1a001834:	e7ec      	b.n	1a001810 <get_fat+0x136>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
1a001836:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
1a00183a:	e7e9      	b.n	1a001810 <get_fat+0x136>
			val = 1;	/* Internal error */
1a00183c:	2001      	movs	r0, #1
1a00183e:	e7e7      	b.n	1a001810 <get_fat+0x136>
						val = 0x7FFFFFFF;	/* Generate EOC */
1a001840:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
1a001844:	e7e4      	b.n	1a001810 <get_fat+0x136>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
1a001846:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return val;
1a00184a:	e7e1      	b.n	1a001810 <get_fat+0x136>

1a00184c <dir_sdi>:
{
1a00184c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001850:	4606      	mov	r6, r0
1a001852:	460d      	mov	r5, r1
	FATFS *fs = dp->obj.fs;
1a001854:	6807      	ldr	r7, [r0, #0]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
1a001856:	783b      	ldrb	r3, [r7, #0]
1a001858:	2b04      	cmp	r3, #4
1a00185a:	d023      	beq.n	1a0018a4 <dir_sdi+0x58>
1a00185c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
1a001860:	42ab      	cmp	r3, r5
1a001862:	d93e      	bls.n	1a0018e2 <dir_sdi+0x96>
1a001864:	f015 0f1f 	tst.w	r5, #31
1a001868:	d13e      	bne.n	1a0018e8 <dir_sdi+0x9c>
	dp->dptr = ofs;				/* Set current offset */
1a00186a:	6335      	str	r5, [r6, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
1a00186c:	68b4      	ldr	r4, [r6, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
1a00186e:	b92c      	cbnz	r4, 1a00187c <dir_sdi+0x30>
1a001870:	783b      	ldrb	r3, [r7, #0]
1a001872:	2b02      	cmp	r3, #2
1a001874:	d902      	bls.n	1a00187c <dir_sdi+0x30>
		clst = fs->dirbase;
1a001876:	6afc      	ldr	r4, [r7, #44]	; 0x2c
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
1a001878:	2300      	movs	r3, #0
1a00187a:	71f3      	strb	r3, [r6, #7]
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
1a00187c:	b9ac      	cbnz	r4, 1a0018aa <dir_sdi+0x5e>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
1a00187e:	893b      	ldrh	r3, [r7, #8]
1a001880:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
1a001884:	d932      	bls.n	1a0018ec <dir_sdi+0xa0>
		dp->sect = fs->dirbase;
1a001886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a001888:	63b3      	str	r3, [r6, #56]	; 0x38
	dp->clust = clst;					/* Current cluster# */
1a00188a:	6374      	str	r4, [r6, #52]	; 0x34
	if (dp->sect == 0) return FR_INT_ERR;
1a00188c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
1a00188e:	b3ab      	cbz	r3, 1a0018fc <dir_sdi+0xb0>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
1a001890:	eb03 2355 	add.w	r3, r3, r5, lsr #9
1a001894:	63b3      	str	r3, [r6, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
1a001896:	3738      	adds	r7, #56	; 0x38
1a001898:	f3c5 0508 	ubfx	r5, r5, #0, #9
1a00189c:	443d      	add	r5, r7
1a00189e:	63f5      	str	r5, [r6, #60]	; 0x3c
	return FR_OK;
1a0018a0:	2000      	movs	r0, #0
1a0018a2:	e01f      	b.n	1a0018e4 <dir_sdi+0x98>
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
1a0018a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
1a0018a8:	e7da      	b.n	1a001860 <dir_sdi+0x14>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
1a0018aa:	f8b7 800a 	ldrh.w	r8, [r7, #10]
1a0018ae:	ea4f 2848 	mov.w	r8, r8, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
1a0018b2:	4545      	cmp	r5, r8
1a0018b4:	d30f      	bcc.n	1a0018d6 <dir_sdi+0x8a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
1a0018b6:	4621      	mov	r1, r4
1a0018b8:	4630      	mov	r0, r6
1a0018ba:	f7ff ff0e 	bl	1a0016da <get_fat>
1a0018be:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a0018c0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0018c4:	d014      	beq.n	1a0018f0 <dir_sdi+0xa4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
1a0018c6:	2801      	cmp	r0, #1
1a0018c8:	d914      	bls.n	1a0018f4 <dir_sdi+0xa8>
1a0018ca:	69fb      	ldr	r3, [r7, #28]
1a0018cc:	4283      	cmp	r3, r0
1a0018ce:	d913      	bls.n	1a0018f8 <dir_sdi+0xac>
			ofs -= csz;
1a0018d0:	eba5 0508 	sub.w	r5, r5, r8
1a0018d4:	e7ed      	b.n	1a0018b2 <dir_sdi+0x66>
		dp->sect = clst2sect(fs, clst);
1a0018d6:	4621      	mov	r1, r4
1a0018d8:	4638      	mov	r0, r7
1a0018da:	f7ff f91d 	bl	1a000b18 <clst2sect>
1a0018de:	63b0      	str	r0, [r6, #56]	; 0x38
1a0018e0:	e7d3      	b.n	1a00188a <dir_sdi+0x3e>
		return FR_INT_ERR;
1a0018e2:	2002      	movs	r0, #2
}
1a0018e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_INT_ERR;
1a0018e8:	2002      	movs	r0, #2
1a0018ea:	e7fb      	b.n	1a0018e4 <dir_sdi+0x98>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
1a0018ec:	2002      	movs	r0, #2
1a0018ee:	e7f9      	b.n	1a0018e4 <dir_sdi+0x98>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a0018f0:	2001      	movs	r0, #1
1a0018f2:	e7f7      	b.n	1a0018e4 <dir_sdi+0x98>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
1a0018f4:	2002      	movs	r0, #2
1a0018f6:	e7f5      	b.n	1a0018e4 <dir_sdi+0x98>
1a0018f8:	2002      	movs	r0, #2
1a0018fa:	e7f3      	b.n	1a0018e4 <dir_sdi+0x98>
	if (dp->sect == 0) return FR_INT_ERR;
1a0018fc:	2002      	movs	r0, #2
1a0018fe:	e7f1      	b.n	1a0018e4 <dir_sdi+0x98>

1a001900 <create_chain>:
{
1a001900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001904:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
1a001906:	6807      	ldr	r7, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
1a001908:	4689      	mov	r9, r1
1a00190a:	b931      	cbnz	r1, 1a00191a <create_chain+0x1a>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
1a00190c:	697e      	ldr	r6, [r7, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
1a00190e:	b1a6      	cbz	r6, 1a00193a <create_chain+0x3a>
1a001910:	69fb      	ldr	r3, [r7, #28]
1a001912:	42b3      	cmp	r3, r6
1a001914:	d812      	bhi.n	1a00193c <create_chain+0x3c>
1a001916:	2601      	movs	r6, #1
1a001918:	e010      	b.n	1a00193c <create_chain+0x3c>
		cs = get_fat(obj, clst);			/* Check the cluster status */
1a00191a:	f7ff fede 	bl	1a0016da <get_fat>
1a00191e:	4605      	mov	r5, r0
		if (cs < 2) return 1;				/* Test for insanity */
1a001920:	2801      	cmp	r0, #1
1a001922:	f240 80c6 	bls.w	1a001ab2 <create_chain+0x1b2>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
1a001926:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00192a:	f000 80c3 	beq.w	1a001ab4 <create_chain+0x1b4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
1a00192e:	69fb      	ldr	r3, [r7, #28]
1a001930:	4283      	cmp	r3, r0
1a001932:	f200 80bf 	bhi.w	1a001ab4 <create_chain+0x1b4>
		scl = clst;							/* Cluster to start to find */
1a001936:	464e      	mov	r6, r9
1a001938:	e000      	b.n	1a00193c <create_chain+0x3c>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
1a00193a:	2601      	movs	r6, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
1a00193c:	69bd      	ldr	r5, [r7, #24]
1a00193e:	2d00      	cmp	r5, #0
1a001940:	f000 80b8 	beq.w	1a001ab4 <create_chain+0x1b4>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1a001944:	783b      	ldrb	r3, [r7, #0]
1a001946:	2b04      	cmp	r3, #4
1a001948:	d003      	beq.n	1a001952 <create_chain+0x52>
		if (scl == clst) {						/* Stretching an existing chain? */
1a00194a:	454e      	cmp	r6, r9
1a00194c:	d055      	beq.n	1a0019fa <create_chain+0xfa>
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
1a00194e:	4634      	mov	r4, r6
1a001950:	e095      	b.n	1a001a7e <create_chain+0x17e>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1a001952:	2201      	movs	r2, #1
1a001954:	4631      	mov	r1, r6
1a001956:	4638      	mov	r0, r7
1a001958:	f7ff fd80 	bl	1a00145c <find_bitmap>
1a00195c:	4605      	mov	r5, r0
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
1a00195e:	1e43      	subs	r3, r0, #1
1a001960:	f113 0f03 	cmn.w	r3, #3
1a001964:	f200 80a6 	bhi.w	1a001ab4 <create_chain+0x1b4>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
1a001968:	2301      	movs	r3, #1
1a00196a:	461a      	mov	r2, r3
1a00196c:	4601      	mov	r1, r0
1a00196e:	4638      	mov	r0, r7
1a001970:	f7ff fdb7 	bl	1a0014e2 <change_bitmap>
1a001974:	4603      	mov	r3, r0
		if (res == FR_INT_ERR) return 1;
1a001976:	2802      	cmp	r0, #2
1a001978:	f000 809f 	beq.w	1a001aba <create_chain+0x1ba>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
1a00197c:	2801      	cmp	r0, #1
1a00197e:	f000 809e 	beq.w	1a001abe <create_chain+0x1be>
		if (clst == 0) {							/* Is it a new chain? */
1a001982:	f1b9 0f00 	cmp.w	r9, #0
1a001986:	d11e      	bne.n	1a0019c6 <create_chain+0xc6>
			obj->stat = 2;							/* Set status 'contiguous' */
1a001988:	2202      	movs	r2, #2
1a00198a:	f888 2007 	strb.w	r2, [r8, #7]
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
1a00198e:	f898 2007 	ldrb.w	r2, [r8, #7]
1a001992:	2a02      	cmp	r2, #2
1a001994:	f000 8082 	beq.w	1a001a9c <create_chain+0x19c>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
1a001998:	f109 0201 	add.w	r2, r9, #1
1a00199c:	42aa      	cmp	r2, r5
1a00199e:	d022      	beq.n	1a0019e6 <create_chain+0xe6>
				if (obj->n_frag == 0) obj->n_frag = 1;
1a0019a0:	f8d8 301c 	ldr.w	r3, [r8, #28]
1a0019a4:	b913      	cbnz	r3, 1a0019ac <create_chain+0xac>
1a0019a6:	2301      	movs	r3, #1
1a0019a8:	f8c8 301c 	str.w	r3, [r8, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
1a0019ac:	462a      	mov	r2, r5
1a0019ae:	4649      	mov	r1, r9
1a0019b0:	4640      	mov	r0, r8
1a0019b2:	f7ff fe61 	bl	1a001678 <fill_last_frag>
				if (res == FR_OK) obj->n_frag = 1;
1a0019b6:	4603      	mov	r3, r0
1a0019b8:	2800      	cmp	r0, #0
1a0019ba:	d171      	bne.n	1a001aa0 <create_chain+0x1a0>
1a0019bc:	2201      	movs	r2, #1
1a0019be:	f8c8 201c 	str.w	r2, [r8, #28]
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1a0019c2:	462c      	mov	r4, r5
1a0019c4:	e03e      	b.n	1a001a44 <create_chain+0x144>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
1a0019c6:	f898 2007 	ldrb.w	r2, [r8, #7]
1a0019ca:	2a02      	cmp	r2, #2
1a0019cc:	d1df      	bne.n	1a00198e <create_chain+0x8e>
1a0019ce:	1c72      	adds	r2, r6, #1
1a0019d0:	42aa      	cmp	r2, r5
1a0019d2:	d0dc      	beq.n	1a00198e <create_chain+0x8e>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
1a0019d4:	f8d8 2008 	ldr.w	r2, [r8, #8]
1a0019d8:	1ab2      	subs	r2, r6, r2
1a0019da:	f8c8 2018 	str.w	r2, [r8, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
1a0019de:	2203      	movs	r2, #3
1a0019e0:	f888 2007 	strb.w	r2, [r8, #7]
1a0019e4:	e7d3      	b.n	1a00198e <create_chain+0x8e>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
1a0019e6:	f8d8 201c 	ldr.w	r2, [r8, #28]
1a0019ea:	b122      	cbz	r2, 1a0019f6 <create_chain+0xf6>
1a0019ec:	3201      	adds	r2, #1
1a0019ee:	f8c8 201c 	str.w	r2, [r8, #28]
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1a0019f2:	462c      	mov	r4, r5
1a0019f4:	e026      	b.n	1a001a44 <create_chain+0x144>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
1a0019f6:	2202      	movs	r2, #2
1a0019f8:	e7f9      	b.n	1a0019ee <create_chain+0xee>
			ncl = scl + 1;						/* Test if next cluster is free */
1a0019fa:	1c74      	adds	r4, r6, #1
			if (ncl >= fs->n_fatent) ncl = 2;
1a0019fc:	69fb      	ldr	r3, [r7, #28]
1a0019fe:	42a3      	cmp	r3, r4
1a001a00:	d800      	bhi.n	1a001a04 <create_chain+0x104>
1a001a02:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
1a001a04:	4621      	mov	r1, r4
1a001a06:	4640      	mov	r0, r8
1a001a08:	f7ff fe67 	bl	1a0016da <get_fat>
1a001a0c:	4605      	mov	r5, r0
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
1a001a0e:	2801      	cmp	r0, #1
1a001a10:	d050      	beq.n	1a001ab4 <create_chain+0x1b4>
1a001a12:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001a16:	d04d      	beq.n	1a001ab4 <create_chain+0x1b4>
			if (cs != 0) {						/* Not free? */
1a001a18:	b138      	cbz	r0, 1a001a2a <create_chain+0x12a>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
1a001a1a:	697b      	ldr	r3, [r7, #20]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
1a001a1c:	2b01      	cmp	r3, #1
1a001a1e:	d996      	bls.n	1a00194e <create_chain+0x4e>
1a001a20:	69fa      	ldr	r2, [r7, #28]
1a001a22:	429a      	cmp	r2, r3
1a001a24:	d993      	bls.n	1a00194e <create_chain+0x4e>
1a001a26:	461e      	mov	r6, r3
1a001a28:	e791      	b.n	1a00194e <create_chain+0x4e>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
1a001a2a:	2c00      	cmp	r4, #0
1a001a2c:	d08f      	beq.n	1a00194e <create_chain+0x4e>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
1a001a2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001a32:	4621      	mov	r1, r4
1a001a34:	4638      	mov	r0, r7
1a001a36:	f7ff fd90 	bl	1a00155a <put_fat>
		if (res == FR_OK && clst != 0) {
1a001a3a:	4603      	mov	r3, r0
1a001a3c:	b910      	cbnz	r0, 1a001a44 <create_chain+0x144>
1a001a3e:	f1b9 0f00 	cmp.w	r9, #0
1a001a42:	d124      	bne.n	1a001a8e <create_chain+0x18e>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
1a001a44:	bb73      	cbnz	r3, 1a001aa4 <create_chain+0x1a4>
		fs->last_clst = ncl;
1a001a46:	617c      	str	r4, [r7, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
1a001a48:	69ba      	ldr	r2, [r7, #24]
1a001a4a:	69fb      	ldr	r3, [r7, #28]
1a001a4c:	3b02      	subs	r3, #2
1a001a4e:	429a      	cmp	r2, r3
1a001a50:	d801      	bhi.n	1a001a56 <create_chain+0x156>
1a001a52:	3a01      	subs	r2, #1
1a001a54:	61ba      	str	r2, [r7, #24]
		fs->fsi_flag |= 1;
1a001a56:	793b      	ldrb	r3, [r7, #4]
1a001a58:	f043 0301 	orr.w	r3, r3, #1
1a001a5c:	713b      	strb	r3, [r7, #4]
1a001a5e:	4625      	mov	r5, r4
1a001a60:	e028      	b.n	1a001ab4 <create_chain+0x1b4>
				cs = get_fat(obj, ncl);			/* Get the cluster status */
1a001a62:	4621      	mov	r1, r4
1a001a64:	4640      	mov	r0, r8
1a001a66:	f7ff fe38 	bl	1a0016da <get_fat>
				if (cs == 0) break;				/* Found a free cluster? */
1a001a6a:	4605      	mov	r5, r0
1a001a6c:	2800      	cmp	r0, #0
1a001a6e:	d0de      	beq.n	1a001a2e <create_chain+0x12e>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
1a001a70:	2801      	cmp	r0, #1
1a001a72:	d01f      	beq.n	1a001ab4 <create_chain+0x1b4>
1a001a74:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001a78:	d01c      	beq.n	1a001ab4 <create_chain+0x1b4>
				if (ncl == scl) return 0;		/* No free cluster found? */
1a001a7a:	42b4      	cmp	r4, r6
1a001a7c:	d024      	beq.n	1a001ac8 <create_chain+0x1c8>
				ncl++;							/* Next cluster */
1a001a7e:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
1a001a80:	69fb      	ldr	r3, [r7, #28]
1a001a82:	42a3      	cmp	r3, r4
1a001a84:	d8ed      	bhi.n	1a001a62 <create_chain+0x162>
					if (ncl > scl) return 0;	/* No free cluster found? */
1a001a86:	2e01      	cmp	r6, #1
1a001a88:	d91c      	bls.n	1a001ac4 <create_chain+0x1c4>
					ncl = 2;
1a001a8a:	2402      	movs	r4, #2
1a001a8c:	e7e9      	b.n	1a001a62 <create_chain+0x162>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
1a001a8e:	4622      	mov	r2, r4
1a001a90:	4649      	mov	r1, r9
1a001a92:	4638      	mov	r0, r7
1a001a94:	f7ff fd61 	bl	1a00155a <put_fat>
1a001a98:	4603      	mov	r3, r0
1a001a9a:	e7d3      	b.n	1a001a44 <create_chain+0x144>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1a001a9c:	462c      	mov	r4, r5
1a001a9e:	e7d1      	b.n	1a001a44 <create_chain+0x144>
1a001aa0:	462c      	mov	r4, r5
1a001aa2:	e7cf      	b.n	1a001a44 <create_chain+0x144>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
1a001aa4:	2b01      	cmp	r3, #1
1a001aa6:	d001      	beq.n	1a001aac <create_chain+0x1ac>
1a001aa8:	2501      	movs	r5, #1
1a001aaa:	e003      	b.n	1a001ab4 <create_chain+0x1b4>
1a001aac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a001ab0:	e000      	b.n	1a001ab4 <create_chain+0x1b4>
		if (cs < 2) return 1;				/* Test for insanity */
1a001ab2:	2501      	movs	r5, #1
}
1a001ab4:	4628      	mov	r0, r5
1a001ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (res == FR_INT_ERR) return 1;
1a001aba:	2501      	movs	r5, #1
1a001abc:	e7fa      	b.n	1a001ab4 <create_chain+0x1b4>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
1a001abe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a001ac2:	e7f7      	b.n	1a001ab4 <create_chain+0x1b4>
					if (ncl > scl) return 0;	/* No free cluster found? */
1a001ac4:	2500      	movs	r5, #0
1a001ac6:	e7f5      	b.n	1a001ab4 <create_chain+0x1b4>
				if (ncl == scl) return 0;		/* No free cluster found? */
1a001ac8:	2500      	movs	r5, #0
1a001aca:	e7f3      	b.n	1a001ab4 <create_chain+0x1b4>

1a001acc <remove_chain>:
{
1a001acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
1a001ad0:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
1a001ad2:	2901      	cmp	r1, #1
1a001ad4:	f240 8087 	bls.w	1a001be6 <remove_chain+0x11a>
1a001ad8:	4607      	mov	r7, r0
1a001ada:	460e      	mov	r6, r1
1a001adc:	4691      	mov	r9, r2
1a001ade:	69e3      	ldr	r3, [r4, #28]
1a001ae0:	428b      	cmp	r3, r1
1a001ae2:	f240 8082 	bls.w	1a001bea <remove_chain+0x11e>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
1a001ae6:	b172      	cbz	r2, 1a001b06 <remove_chain+0x3a>
1a001ae8:	7823      	ldrb	r3, [r4, #0]
1a001aea:	2b04      	cmp	r3, #4
1a001aec:	d102      	bne.n	1a001af4 <remove_chain+0x28>
1a001aee:	79c3      	ldrb	r3, [r0, #7]
1a001af0:	2b02      	cmp	r3, #2
1a001af2:	d008      	beq.n	1a001b06 <remove_chain+0x3a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
1a001af4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001af8:	4649      	mov	r1, r9
1a001afa:	4620      	mov	r0, r4
1a001afc:	f7ff fd2d 	bl	1a00155a <put_fat>
		if (res != FR_OK) return res;
1a001b00:	4603      	mov	r3, r0
1a001b02:	2800      	cmp	r0, #0
1a001b04:	d172      	bne.n	1a001bec <remove_chain+0x120>
{
1a001b06:	46b0      	mov	r8, r6
1a001b08:	e012      	b.n	1a001b30 <remove_chain+0x64>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
1a001b0a:	2200      	movs	r2, #0
1a001b0c:	4631      	mov	r1, r6
1a001b0e:	4620      	mov	r0, r4
1a001b10:	f7ff fd23 	bl	1a00155a <put_fat>
			if (res != FR_OK) return res;
1a001b14:	4603      	mov	r3, r0
1a001b16:	b1c8      	cbz	r0, 1a001b4c <remove_chain+0x80>
1a001b18:	e068      	b.n	1a001bec <remove_chain+0x120>
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
1a001b1a:	1c73      	adds	r3, r6, #1
1a001b1c:	42ab      	cmp	r3, r5
1a001b1e:	d003      	beq.n	1a001b28 <remove_chain+0x5c>
			if (fs->fs_type == FS_EXFAT) {
1a001b20:	7823      	ldrb	r3, [r4, #0]
1a001b22:	2b04      	cmp	r3, #4
1a001b24:	d01e      	beq.n	1a001b64 <remove_chain+0x98>
			scl = ecl = nxt;
1a001b26:	46a8      	mov	r8, r5
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
1a001b28:	69e3      	ldr	r3, [r4, #28]
		clst = nxt;					/* Next cluster */
1a001b2a:	462e      	mov	r6, r5
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
1a001b2c:	42ab      	cmp	r3, r5
1a001b2e:	d925      	bls.n	1a001b7c <remove_chain+0xb0>
		nxt = get_fat(obj, clst);			/* Get cluster status */
1a001b30:	4631      	mov	r1, r6
1a001b32:	4638      	mov	r0, r7
1a001b34:	f7ff fdd1 	bl	1a0016da <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
1a001b38:	4605      	mov	r5, r0
1a001b3a:	b1f8      	cbz	r0, 1a001b7c <remove_chain+0xb0>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
1a001b3c:	2801      	cmp	r0, #1
1a001b3e:	d058      	beq.n	1a001bf2 <remove_chain+0x126>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
1a001b40:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001b44:	d057      	beq.n	1a001bf6 <remove_chain+0x12a>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1a001b46:	7823      	ldrb	r3, [r4, #0]
1a001b48:	2b04      	cmp	r3, #4
1a001b4a:	d1de      	bne.n	1a001b0a <remove_chain+0x3e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
1a001b4c:	69a2      	ldr	r2, [r4, #24]
1a001b4e:	69e3      	ldr	r3, [r4, #28]
1a001b50:	3b02      	subs	r3, #2
1a001b52:	429a      	cmp	r2, r3
1a001b54:	d2e1      	bcs.n	1a001b1a <remove_chain+0x4e>
			fs->free_clst++;
1a001b56:	3201      	adds	r2, #1
1a001b58:	61a2      	str	r2, [r4, #24]
			fs->fsi_flag |= 1;
1a001b5a:	7923      	ldrb	r3, [r4, #4]
1a001b5c:	f043 0301 	orr.w	r3, r3, #1
1a001b60:	7123      	strb	r3, [r4, #4]
1a001b62:	e7da      	b.n	1a001b1a <remove_chain+0x4e>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
1a001b64:	eba6 0208 	sub.w	r2, r6, r8
1a001b68:	2300      	movs	r3, #0
1a001b6a:	3201      	adds	r2, #1
1a001b6c:	4641      	mov	r1, r8
1a001b6e:	4620      	mov	r0, r4
1a001b70:	f7ff fcb7 	bl	1a0014e2 <change_bitmap>
				if (res != FR_OK) return res;
1a001b74:	4603      	mov	r3, r0
1a001b76:	bbc8      	cbnz	r0, 1a001bec <remove_chain+0x120>
			scl = ecl = nxt;
1a001b78:	46a8      	mov	r8, r5
1a001b7a:	e7d5      	b.n	1a001b28 <remove_chain+0x5c>
	if (fs->fs_type == FS_EXFAT) {
1a001b7c:	7823      	ldrb	r3, [r4, #0]
1a001b7e:	2b04      	cmp	r3, #4
1a001b80:	d001      	beq.n	1a001b86 <remove_chain+0xba>
	return FR_OK;
1a001b82:	2300      	movs	r3, #0
1a001b84:	e032      	b.n	1a001bec <remove_chain+0x120>
		if (pclst == 0) {	/* Has the entire chain been removed? */
1a001b86:	f1b9 0f00 	cmp.w	r9, #0
1a001b8a:	d012      	beq.n	1a001bb2 <remove_chain+0xe6>
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
1a001b8c:	79fb      	ldrb	r3, [r7, #7]
1a001b8e:	b9db      	cbnz	r3, 1a001bc8 <remove_chain+0xfc>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
1a001b90:	68bc      	ldr	r4, [r7, #8]
				while (clst != pclst) {
1a001b92:	454c      	cmp	r4, r9
1a001b94:	d010      	beq.n	1a001bb8 <remove_chain+0xec>
					nxt = get_fat(obj, clst);
1a001b96:	4621      	mov	r1, r4
1a001b98:	4638      	mov	r0, r7
1a001b9a:	f7ff fd9e 	bl	1a0016da <get_fat>
					if (nxt < 2) return FR_INT_ERR;
1a001b9e:	2801      	cmp	r0, #1
1a001ba0:	d92b      	bls.n	1a001bfa <remove_chain+0x12e>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
1a001ba2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001ba6:	d02a      	beq.n	1a001bfe <remove_chain+0x132>
					if (nxt != clst + 1) break;	/* Not contiguous? */
1a001ba8:	1c63      	adds	r3, r4, #1
1a001baa:	4283      	cmp	r3, r0
1a001bac:	d104      	bne.n	1a001bb8 <remove_chain+0xec>
					clst++;
1a001bae:	461c      	mov	r4, r3
1a001bb0:	e7ef      	b.n	1a001b92 <remove_chain+0xc6>
			obj->stat = 0;		/* Change the chain status 'initial' */
1a001bb2:	2300      	movs	r3, #0
1a001bb4:	71fb      	strb	r3, [r7, #7]
1a001bb6:	e019      	b.n	1a001bec <remove_chain+0x120>
				if (clst == pclst) {	/* Has the chain got contiguous again? */
1a001bb8:	454c      	cmp	r4, r9
1a001bba:	d001      	beq.n	1a001bc0 <remove_chain+0xf4>
	return FR_OK;
1a001bbc:	2300      	movs	r3, #0
1a001bbe:	e015      	b.n	1a001bec <remove_chain+0x120>
					obj->stat = 2;		/* Change the chain status 'contiguous' */
1a001bc0:	2302      	movs	r3, #2
1a001bc2:	71fb      	strb	r3, [r7, #7]
	return FR_OK;
1a001bc4:	2300      	movs	r3, #0
1a001bc6:	e011      	b.n	1a001bec <remove_chain+0x120>
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
1a001bc8:	2b03      	cmp	r3, #3
1a001bca:	d001      	beq.n	1a001bd0 <remove_chain+0x104>
	return FR_OK;
1a001bcc:	2300      	movs	r3, #0
1a001bce:	e00d      	b.n	1a001bec <remove_chain+0x120>
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
1a001bd0:	68bb      	ldr	r3, [r7, #8]
1a001bd2:	454b      	cmp	r3, r9
1a001bd4:	d815      	bhi.n	1a001c02 <remove_chain+0x136>
1a001bd6:	69ba      	ldr	r2, [r7, #24]
1a001bd8:	4413      	add	r3, r2
1a001bda:	454b      	cmp	r3, r9
1a001bdc:	d313      	bcc.n	1a001c06 <remove_chain+0x13a>
					obj->stat = 2;	/* Change the chain status 'contiguous' */
1a001bde:	2302      	movs	r3, #2
1a001be0:	71fb      	strb	r3, [r7, #7]
	return FR_OK;
1a001be2:	2300      	movs	r3, #0
1a001be4:	e002      	b.n	1a001bec <remove_chain+0x120>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
1a001be6:	2302      	movs	r3, #2
1a001be8:	e000      	b.n	1a001bec <remove_chain+0x120>
1a001bea:	2302      	movs	r3, #2
}
1a001bec:	4618      	mov	r0, r3
1a001bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
1a001bf2:	2302      	movs	r3, #2
1a001bf4:	e7fa      	b.n	1a001bec <remove_chain+0x120>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
1a001bf6:	2301      	movs	r3, #1
1a001bf8:	e7f8      	b.n	1a001bec <remove_chain+0x120>
					if (nxt < 2) return FR_INT_ERR;
1a001bfa:	2302      	movs	r3, #2
1a001bfc:	e7f6      	b.n	1a001bec <remove_chain+0x120>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
1a001bfe:	2301      	movs	r3, #1
1a001c00:	e7f4      	b.n	1a001bec <remove_chain+0x120>
	return FR_OK;
1a001c02:	2300      	movs	r3, #0
1a001c04:	e7f2      	b.n	1a001bec <remove_chain+0x120>
1a001c06:	2300      	movs	r3, #0
1a001c08:	e7f0      	b.n	1a001bec <remove_chain+0x120>

1a001c0a <dir_clear>:
{
1a001c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001c0c:	4605      	mov	r5, r0
1a001c0e:	460c      	mov	r4, r1
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
1a001c10:	f7ff f946 	bl	1a000ea0 <sync_window>
1a001c14:	b108      	cbz	r0, 1a001c1a <dir_clear+0x10>
1a001c16:	2001      	movs	r0, #1
}
1a001c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sect = clst2sect(fs, clst);		/* Top of the cluster */
1a001c1a:	4621      	mov	r1, r4
1a001c1c:	4628      	mov	r0, r5
1a001c1e:	f7fe ff7b 	bl	1a000b18 <clst2sect>
1a001c22:	4607      	mov	r7, r0
	fs->winsect = sect;				/* Set window to top of the cluster */
1a001c24:	6368      	str	r0, [r5, #52]	; 0x34
	mem_set(fs->win, 0, SS(fs));	/* Clear window buffer */
1a001c26:	f105 0638 	add.w	r6, r5, #56	; 0x38
1a001c2a:	f44f 7200 	mov.w	r2, #512	; 0x200
1a001c2e:	2100      	movs	r1, #0
1a001c30:	4630      	mov	r0, r6
1a001c32:	f7fe fef3 	bl	1a000a1c <mem_set>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
1a001c36:	2400      	movs	r4, #0
1a001c38:	e000      	b.n	1a001c3c <dir_clear+0x32>
1a001c3a:	3401      	adds	r4, #1
1a001c3c:	896b      	ldrh	r3, [r5, #10]
1a001c3e:	42a3      	cmp	r3, r4
1a001c40:	d907      	bls.n	1a001c52 <dir_clear+0x48>
1a001c42:	2301      	movs	r3, #1
1a001c44:	19e2      	adds	r2, r4, r7
1a001c46:	4631      	mov	r1, r6
1a001c48:	7868      	ldrb	r0, [r5, #1]
1a001c4a:	f003 fe85 	bl	1a005958 <disk_write>
1a001c4e:	2800      	cmp	r0, #0
1a001c50:	d0f3      	beq.n	1a001c3a <dir_clear+0x30>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
1a001c52:	8968      	ldrh	r0, [r5, #10]
1a001c54:	1b00      	subs	r0, r0, r4
1a001c56:	bf18      	it	ne
1a001c58:	2001      	movne	r0, #1
1a001c5a:	e7dd      	b.n	1a001c18 <dir_clear+0xe>

1a001c5c <dir_next>:
{
1a001c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
1a001c60:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
1a001c62:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
1a001c64:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a001c66:	2b00      	cmp	r3, #0
1a001c68:	d056      	beq.n	1a001d18 <dir_next+0xbc>
1a001c6a:	3520      	adds	r5, #32
1a001c6c:	7832      	ldrb	r2, [r6, #0]
1a001c6e:	2a04      	cmp	r2, #4
1a001c70:	d018      	beq.n	1a001ca4 <dir_next+0x48>
1a001c72:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
1a001c76:	42aa      	cmp	r2, r5
1a001c78:	d950      	bls.n	1a001d1c <dir_next+0xc0>
1a001c7a:	4688      	mov	r8, r1
1a001c7c:	4604      	mov	r4, r0
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
1a001c7e:	f3c5 0708 	ubfx	r7, r5, #0, #9
1a001c82:	b93f      	cbnz	r7, 1a001c94 <dir_next+0x38>
		dp->sect++;				/* Next sector */
1a001c84:	3301      	adds	r3, #1
1a001c86:	6383      	str	r3, [r0, #56]	; 0x38
		if (dp->clust == 0) {	/* Static table */
1a001c88:	6b41      	ldr	r1, [r0, #52]	; 0x34
1a001c8a:	b991      	cbnz	r1, 1a001cb2 <dir_next+0x56>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
1a001c8c:	8933      	ldrh	r3, [r6, #8]
1a001c8e:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
1a001c92:	d90a      	bls.n	1a001caa <dir_next+0x4e>
	dp->dptr = ofs;						/* Current entry */
1a001c94:	6325      	str	r5, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
1a001c96:	f106 0338 	add.w	r3, r6, #56	; 0x38
1a001c9a:	443b      	add	r3, r7
1a001c9c:	63e3      	str	r3, [r4, #60]	; 0x3c
	return FR_OK;
1a001c9e:	2000      	movs	r0, #0
}
1a001ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
1a001ca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001ca8:	e7e5      	b.n	1a001c76 <dir_next+0x1a>
				dp->sect = 0; return FR_NO_FILE;
1a001caa:	2300      	movs	r3, #0
1a001cac:	6383      	str	r3, [r0, #56]	; 0x38
1a001cae:	2004      	movs	r0, #4
1a001cb0:	e7f6      	b.n	1a001ca0 <dir_next+0x44>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
1a001cb2:	8973      	ldrh	r3, [r6, #10]
1a001cb4:	3b01      	subs	r3, #1
1a001cb6:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
1a001cba:	d1eb      	bne.n	1a001c94 <dir_next+0x38>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
1a001cbc:	f7ff fd0d 	bl	1a0016da <get_fat>
1a001cc0:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
1a001cc2:	2801      	cmp	r0, #1
1a001cc4:	d92c      	bls.n	1a001d20 <dir_next+0xc4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a001cc6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001cca:	d02b      	beq.n	1a001d24 <dir_next+0xc8>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
1a001ccc:	69f3      	ldr	r3, [r6, #28]
1a001cce:	4283      	cmp	r3, r0
1a001cd0:	d816      	bhi.n	1a001d00 <dir_next+0xa4>
					if (!stretch) {								/* If no stretch, report EOT */
1a001cd2:	f1b8 0f00 	cmp.w	r8, #0
1a001cd6:	d01b      	beq.n	1a001d10 <dir_next+0xb4>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
1a001cd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a001cda:	4620      	mov	r0, r4
1a001cdc:	f7ff fe10 	bl	1a001900 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
1a001ce0:	4681      	mov	r9, r0
1a001ce2:	b308      	cbz	r0, 1a001d28 <dir_next+0xcc>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
1a001ce4:	2801      	cmp	r0, #1
1a001ce6:	d021      	beq.n	1a001d2c <dir_next+0xd0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a001ce8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001cec:	d020      	beq.n	1a001d30 <dir_next+0xd4>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
1a001cee:	4601      	mov	r1, r0
1a001cf0:	4630      	mov	r0, r6
1a001cf2:	f7ff ff8a 	bl	1a001c0a <dir_clear>
1a001cf6:	b9e8      	cbnz	r0, 1a001d34 <dir_next+0xd8>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
1a001cf8:	79e3      	ldrb	r3, [r4, #7]
1a001cfa:	f043 0304 	orr.w	r3, r3, #4
1a001cfe:	71e3      	strb	r3, [r4, #7]
				dp->clust = clst;		/* Initialize data for new cluster */
1a001d00:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
				dp->sect = clst2sect(fs, clst);
1a001d04:	4649      	mov	r1, r9
1a001d06:	4630      	mov	r0, r6
1a001d08:	f7fe ff06 	bl	1a000b18 <clst2sect>
1a001d0c:	63a0      	str	r0, [r4, #56]	; 0x38
1a001d0e:	e7c1      	b.n	1a001c94 <dir_next+0x38>
						dp->sect = 0; return FR_NO_FILE;
1a001d10:	2300      	movs	r3, #0
1a001d12:	63a3      	str	r3, [r4, #56]	; 0x38
1a001d14:	2004      	movs	r0, #4
1a001d16:	e7c3      	b.n	1a001ca0 <dir_next+0x44>
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
1a001d18:	2004      	movs	r0, #4
1a001d1a:	e7c1      	b.n	1a001ca0 <dir_next+0x44>
1a001d1c:	2004      	movs	r0, #4
1a001d1e:	e7bf      	b.n	1a001ca0 <dir_next+0x44>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
1a001d20:	2002      	movs	r0, #2
1a001d22:	e7bd      	b.n	1a001ca0 <dir_next+0x44>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a001d24:	2001      	movs	r0, #1
1a001d26:	e7bb      	b.n	1a001ca0 <dir_next+0x44>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
1a001d28:	2007      	movs	r0, #7
1a001d2a:	e7b9      	b.n	1a001ca0 <dir_next+0x44>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
1a001d2c:	2002      	movs	r0, #2
1a001d2e:	e7b7      	b.n	1a001ca0 <dir_next+0x44>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a001d30:	2001      	movs	r0, #1
1a001d32:	e7b5      	b.n	1a001ca0 <dir_next+0x44>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
1a001d34:	2001      	movs	r0, #1
1a001d36:	e7b3      	b.n	1a001ca0 <dir_next+0x44>

1a001d38 <load_xdir>:
{
1a001d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001d3c:	4604      	mov	r4, r0
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
1a001d3e:	6800      	ldr	r0, [r0, #0]
1a001d40:	6906      	ldr	r6, [r0, #16]
	res = move_window(dp->obj.fs, dp->sect);
1a001d42:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a001d44:	f7ff f8d4 	bl	1a000ef0 <move_window>
	if (res != FR_OK) return res;
1a001d48:	4605      	mov	r5, r0
1a001d4a:	b920      	cbnz	r0, 1a001d56 <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;	/* Invalid order */
1a001d4c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
1a001d4e:	780b      	ldrb	r3, [r1, #0]
1a001d50:	2b85      	cmp	r3, #133	; 0x85
1a001d52:	d003      	beq.n	1a001d5c <load_xdir+0x24>
1a001d54:	2502      	movs	r5, #2
}
1a001d56:	4628      	mov	r0, r5
1a001d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mem_cpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
1a001d5c:	2220      	movs	r2, #32
1a001d5e:	4630      	mov	r0, r6
1a001d60:	f7fe fe53 	bl	1a000a0a <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
1a001d64:	7877      	ldrb	r7, [r6, #1]
1a001d66:	3701      	adds	r7, #1
1a001d68:	017f      	lsls	r7, r7, #5
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
1a001d6a:	f1a7 0360 	sub.w	r3, r7, #96	; 0x60
1a001d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a001d72:	d855      	bhi.n	1a001e20 <load_xdir+0xe8>
	res = dir_next(dp, 0);
1a001d74:	2100      	movs	r1, #0
1a001d76:	4620      	mov	r0, r4
1a001d78:	f7ff ff70 	bl	1a001c5c <dir_next>
1a001d7c:	4605      	mov	r5, r0
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
1a001d7e:	2804      	cmp	r0, #4
1a001d80:	d050      	beq.n	1a001e24 <load_xdir+0xec>
	if (res != FR_OK) return res;
1a001d82:	2800      	cmp	r0, #0
1a001d84:	d1e7      	bne.n	1a001d56 <load_xdir+0x1e>
	res = move_window(dp->obj.fs, dp->sect);
1a001d86:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a001d88:	6820      	ldr	r0, [r4, #0]
1a001d8a:	f7ff f8b1 	bl	1a000ef0 <move_window>
	if (res != FR_OK) return res;
1a001d8e:	4605      	mov	r5, r0
1a001d90:	2800      	cmp	r0, #0
1a001d92:	d1e0      	bne.n	1a001d56 <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;	/* Invalid order */
1a001d94:	6be1      	ldr	r1, [r4, #60]	; 0x3c
1a001d96:	780b      	ldrb	r3, [r1, #0]
1a001d98:	2bc0      	cmp	r3, #192	; 0xc0
1a001d9a:	d001      	beq.n	1a001da0 <load_xdir+0x68>
1a001d9c:	2502      	movs	r5, #2
1a001d9e:	e7da      	b.n	1a001d56 <load_xdir+0x1e>
	mem_cpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
1a001da0:	2220      	movs	r2, #32
1a001da2:	18b0      	adds	r0, r6, r2
1a001da4:	f7fe fe31 	bl	1a000a0a <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
1a001da8:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
1a001dac:	332c      	adds	r3, #44	; 0x2c
1a001dae:	4a21      	ldr	r2, [pc, #132]	; (1a001e34 <load_xdir+0xfc>)
1a001db0:	fba2 2303 	umull	r2, r3, r2, r3
1a001db4:	08db      	lsrs	r3, r3, #3
1a001db6:	ebb7 1f43 	cmp.w	r7, r3, lsl #5
1a001dba:	d335      	bcc.n	1a001e28 <load_xdir+0xf0>
	i = 2 * SZDIRE;	/* C1 offset to load */
1a001dbc:	f04f 0840 	mov.w	r8, #64	; 0x40
1a001dc0:	e003      	b.n	1a001dca <load_xdir+0x92>
	} while ((i += SZDIRE) < sz_ent);
1a001dc2:	f108 0820 	add.w	r8, r8, #32
1a001dc6:	4547      	cmp	r7, r8
1a001dc8:	d91c      	bls.n	1a001e04 <load_xdir+0xcc>
		res = dir_next(dp, 0);
1a001dca:	2100      	movs	r1, #0
1a001dcc:	4620      	mov	r0, r4
1a001dce:	f7ff ff45 	bl	1a001c5c <dir_next>
1a001dd2:	4605      	mov	r5, r0
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
1a001dd4:	2804      	cmp	r0, #4
1a001dd6:	d029      	beq.n	1a001e2c <load_xdir+0xf4>
		if (res != FR_OK) return res;
1a001dd8:	2800      	cmp	r0, #0
1a001dda:	d1bc      	bne.n	1a001d56 <load_xdir+0x1e>
		res = move_window(dp->obj.fs, dp->sect);
1a001ddc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a001dde:	6820      	ldr	r0, [r4, #0]
1a001de0:	f7ff f886 	bl	1a000ef0 <move_window>
		if (res != FR_OK) return res;
1a001de4:	4605      	mov	r5, r0
1a001de6:	2800      	cmp	r0, #0
1a001de8:	d1b5      	bne.n	1a001d56 <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;	/* Invalid order */
1a001dea:	6be1      	ldr	r1, [r4, #60]	; 0x3c
1a001dec:	780b      	ldrb	r3, [r1, #0]
1a001dee:	2bc1      	cmp	r3, #193	; 0xc1
1a001df0:	d11e      	bne.n	1a001e30 <load_xdir+0xf8>
		if (i < MAXDIRB(FF_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
1a001df2:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
1a001df6:	d2e4      	bcs.n	1a001dc2 <load_xdir+0x8a>
1a001df8:	2220      	movs	r2, #32
1a001dfa:	eb06 0008 	add.w	r0, r6, r8
1a001dfe:	f7fe fe04 	bl	1a000a0a <mem_cpy>
1a001e02:	e7de      	b.n	1a001dc2 <load_xdir+0x8a>
	if (i <= MAXDIRB(FF_MAX_LFN)) {
1a001e04:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
1a001e08:	d8a5      	bhi.n	1a001d56 <load_xdir+0x1e>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
1a001e0a:	4630      	mov	r0, r6
1a001e0c:	f7fe ff9c 	bl	1a000d48 <xdir_sum>
1a001e10:	4604      	mov	r4, r0
1a001e12:	1cb0      	adds	r0, r6, #2
1a001e14:	f7fe fd74 	bl	1a000900 <ld_word>
1a001e18:	4284      	cmp	r4, r0
1a001e1a:	d09c      	beq.n	1a001d56 <load_xdir+0x1e>
1a001e1c:	2502      	movs	r5, #2
1a001e1e:	e79a      	b.n	1a001d56 <load_xdir+0x1e>
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
1a001e20:	2502      	movs	r5, #2
1a001e22:	e798      	b.n	1a001d56 <load_xdir+0x1e>
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
1a001e24:	2502      	movs	r5, #2
1a001e26:	e796      	b.n	1a001d56 <load_xdir+0x1e>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
1a001e28:	2502      	movs	r5, #2
1a001e2a:	e794      	b.n	1a001d56 <load_xdir+0x1e>
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
1a001e2c:	2502      	movs	r5, #2
1a001e2e:	e792      	b.n	1a001d56 <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;	/* Invalid order */
1a001e30:	2502      	movs	r5, #2
1a001e32:	e790      	b.n	1a001d56 <load_xdir+0x1e>
1a001e34:	88888889 	.word	0x88888889

1a001e38 <load_obj_xdir>:
{
1a001e38:	b510      	push	{r4, lr}
1a001e3a:	4604      	mov	r4, r0
	dp->obj.fs = obj->fs;
1a001e3c:	680b      	ldr	r3, [r1, #0]
1a001e3e:	6003      	str	r3, [r0, #0]
	dp->obj.sclust = obj->c_scl;
1a001e40:	6a0b      	ldr	r3, [r1, #32]
1a001e42:	6083      	str	r3, [r0, #8]
	dp->obj.stat = (BYTE)obj->c_size;
1a001e44:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
1a001e48:	71c3      	strb	r3, [r0, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
1a001e4a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
1a001e4c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001e50:	2200      	movs	r2, #0
1a001e52:	6103      	str	r3, [r0, #16]
1a001e54:	6142      	str	r2, [r0, #20]
	dp->obj.n_frag = 0;
1a001e56:	61c2      	str	r2, [r0, #28]
	dp->blk_ofs = obj->c_ofs;
1a001e58:	6a89      	ldr	r1, [r1, #40]	; 0x28
1a001e5a:	64c1      	str	r1, [r0, #76]	; 0x4c
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
1a001e5c:	f7ff fcf6 	bl	1a00184c <dir_sdi>
	if (res == FR_OK) {
1a001e60:	4603      	mov	r3, r0
1a001e62:	b108      	cbz	r0, 1a001e68 <load_obj_xdir+0x30>
}
1a001e64:	4618      	mov	r0, r3
1a001e66:	bd10      	pop	{r4, pc}
		res = load_xdir(dp);		/* Load the object's entry block */
1a001e68:	4620      	mov	r0, r4
1a001e6a:	f7ff ff65 	bl	1a001d38 <load_xdir>
1a001e6e:	4603      	mov	r3, r0
1a001e70:	e7f8      	b.n	1a001e64 <load_obj_xdir+0x2c>

1a001e72 <dir_read>:
{
1a001e72:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001e76:	4604      	mov	r4, r0
1a001e78:	4688      	mov	r8, r1
	FATFS *fs = dp->obj.fs;
1a001e7a:	6806      	ldr	r6, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
1a001e7c:	f04f 09ff 	mov.w	r9, #255	; 0xff
1a001e80:	464f      	mov	r7, r9
	FRESULT res = FR_NO_FILE;
1a001e82:	2504      	movs	r5, #4
	while (dp->sect) {
1a001e84:	e008      	b.n	1a001e98 <dir_read+0x26>
				if (c == 0x85) {		/* Start of the file entry block? */
1a001e86:	2b85      	cmp	r3, #133	; 0x85
1a001e88:	d028      	beq.n	1a001edc <dir_read+0x6a>
		res = dir_next(dp, 0);		/* Next entry */
1a001e8a:	2100      	movs	r1, #0
1a001e8c:	4620      	mov	r0, r4
1a001e8e:	f7ff fee5 	bl	1a001c5c <dir_next>
		if (res != FR_OK) break;
1a001e92:	4605      	mov	r5, r0
1a001e94:	2800      	cmp	r0, #0
1a001e96:	d15b      	bne.n	1a001f50 <dir_read+0xde>
	while (dp->sect) {
1a001e98:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a001e9a:	2900      	cmp	r1, #0
1a001e9c:	d058      	beq.n	1a001f50 <dir_read+0xde>
		res = move_window(fs, dp->sect);
1a001e9e:	4630      	mov	r0, r6
1a001ea0:	f7ff f826 	bl	1a000ef0 <move_window>
		if (res != FR_OK) break;
1a001ea4:	4605      	mov	r5, r0
1a001ea6:	2800      	cmp	r0, #0
1a001ea8:	d152      	bne.n	1a001f50 <dir_read+0xde>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
1a001eaa:	6be1      	ldr	r1, [r4, #60]	; 0x3c
1a001eac:	780b      	ldrb	r3, [r1, #0]
		if (c == 0) {
1a001eae:	2b00      	cmp	r3, #0
1a001eb0:	d04d      	beq.n	1a001f4e <dir_read+0xdc>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1a001eb2:	7832      	ldrb	r2, [r6, #0]
1a001eb4:	2a04      	cmp	r2, #4
1a001eb6:	d0e6      	beq.n	1a001e86 <dir_read+0x14>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
1a001eb8:	7aca      	ldrb	r2, [r1, #11]
1a001eba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
1a001ebe:	71a2      	strb	r2, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
1a001ec0:	2be5      	cmp	r3, #229	; 0xe5
1a001ec2:	d03e      	beq.n	1a001f42 <dir_read+0xd0>
1a001ec4:	2b2e      	cmp	r3, #46	; 0x2e
1a001ec6:	d03e      	beq.n	1a001f46 <dir_read+0xd4>
1a001ec8:	f022 0020 	bic.w	r0, r2, #32
1a001ecc:	2808      	cmp	r0, #8
1a001ece:	bf14      	ite	ne
1a001ed0:	2000      	movne	r0, #0
1a001ed2:	2001      	moveq	r0, #1
1a001ed4:	4540      	cmp	r0, r8
1a001ed6:	d00e      	beq.n	1a001ef6 <dir_read+0x84>
				ord = 0xFF;
1a001ed8:	27ff      	movs	r7, #255	; 0xff
1a001eda:	e7d6      	b.n	1a001e8a <dir_read+0x18>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
1a001edc:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a001ede:	64e3      	str	r3, [r4, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
1a001ee0:	4620      	mov	r0, r4
1a001ee2:	f7ff ff29 	bl	1a001d38 <load_xdir>
					if (res == FR_OK) {
1a001ee6:	4605      	mov	r5, r0
1a001ee8:	bb90      	cbnz	r0, 1a001f50 <dir_read+0xde>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
1a001eea:	6933      	ldr	r3, [r6, #16]
1a001eec:	791b      	ldrb	r3, [r3, #4]
1a001eee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
1a001ef2:	71a3      	strb	r3, [r4, #6]
1a001ef4:	e02c      	b.n	1a001f50 <dir_read+0xde>
				if (a == AM_LFN) {			/* An LFN entry is found */
1a001ef6:	2a0f      	cmp	r2, #15
1a001ef8:	d119      	bne.n	1a001f2e <dir_read+0xbc>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
1a001efa:	f013 0f40 	tst.w	r3, #64	; 0x40
1a001efe:	d006      	beq.n	1a001f0e <dir_read+0x9c>
						sum = dp->dir[LDIR_Chksum];
1a001f00:	f891 900d 	ldrb.w	r9, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
1a001f04:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
1a001f08:	6b22      	ldr	r2, [r4, #48]	; 0x30
1a001f0a:	64e2      	str	r2, [r4, #76]	; 0x4c
						c &= (BYTE)~LLEF; ord = c;
1a001f0c:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
1a001f0e:	42bb      	cmp	r3, r7
1a001f10:	d001      	beq.n	1a001f16 <dir_read+0xa4>
1a001f12:	27ff      	movs	r7, #255	; 0xff
1a001f14:	e7b9      	b.n	1a001e8a <dir_read+0x18>
1a001f16:	7b4b      	ldrb	r3, [r1, #13]
1a001f18:	454b      	cmp	r3, r9
1a001f1a:	d001      	beq.n	1a001f20 <dir_read+0xae>
1a001f1c:	27ff      	movs	r7, #255	; 0xff
1a001f1e:	e7b4      	b.n	1a001e8a <dir_read+0x18>
1a001f20:	68f0      	ldr	r0, [r6, #12]
1a001f22:	f7fe fe2b 	bl	1a000b7c <pick_lfn>
1a001f26:	b180      	cbz	r0, 1a001f4a <dir_read+0xd8>
1a001f28:	3f01      	subs	r7, #1
1a001f2a:	b2ff      	uxtb	r7, r7
1a001f2c:	e7ad      	b.n	1a001e8a <dir_read+0x18>
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
1a001f2e:	b927      	cbnz	r7, 1a001f3a <dir_read+0xc8>
1a001f30:	4608      	mov	r0, r1
1a001f32:	f7fe fefb 	bl	1a000d2c <sum_sfn>
1a001f36:	4548      	cmp	r0, r9
1a001f38:	d00a      	beq.n	1a001f50 <dir_read+0xde>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
1a001f3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a001f3e:	64e3      	str	r3, [r4, #76]	; 0x4c
1a001f40:	e006      	b.n	1a001f50 <dir_read+0xde>
				ord = 0xFF;
1a001f42:	27ff      	movs	r7, #255	; 0xff
1a001f44:	e7a1      	b.n	1a001e8a <dir_read+0x18>
1a001f46:	27ff      	movs	r7, #255	; 0xff
1a001f48:	e79f      	b.n	1a001e8a <dir_read+0x18>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
1a001f4a:	27ff      	movs	r7, #255	; 0xff
1a001f4c:	e79d      	b.n	1a001e8a <dir_read+0x18>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
1a001f4e:	2504      	movs	r5, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
1a001f50:	b10d      	cbz	r5, 1a001f56 <dir_read+0xe4>
1a001f52:	2300      	movs	r3, #0
1a001f54:	63a3      	str	r3, [r4, #56]	; 0x38
}
1a001f56:	4628      	mov	r0, r5
1a001f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a001f5c <dir_alloc>:
{
1a001f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001f5e:	4604      	mov	r4, r0
1a001f60:	460f      	mov	r7, r1
	FATFS *fs = dp->obj.fs;
1a001f62:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
1a001f64:	2100      	movs	r1, #0
1a001f66:	f7ff fc71 	bl	1a00184c <dir_sdi>
	if (res == FR_OK) {
1a001f6a:	4602      	mov	r2, r0
1a001f6c:	bb30      	cbnz	r0, 1a001fbc <dir_alloc+0x60>
		n = 0;
1a001f6e:	2500      	movs	r5, #0
1a001f70:	e00e      	b.n	1a001f90 <dir_alloc+0x34>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
1a001f72:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001f74:	f993 3000 	ldrsb.w	r3, [r3]
1a001f78:	43db      	mvns	r3, r3
1a001f7a:	0fdb      	lsrs	r3, r3, #31
1a001f7c:	b1e3      	cbz	r3, 1a001fb8 <dir_alloc+0x5c>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
1a001f7e:	3501      	adds	r5, #1
1a001f80:	42bd      	cmp	r5, r7
1a001f82:	d01b      	beq.n	1a001fbc <dir_alloc+0x60>
			res = dir_next(dp, 1);
1a001f84:	2101      	movs	r1, #1
1a001f86:	4620      	mov	r0, r4
1a001f88:	f7ff fe68 	bl	1a001c5c <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
1a001f8c:	4602      	mov	r2, r0
1a001f8e:	b9a8      	cbnz	r0, 1a001fbc <dir_alloc+0x60>
			res = move_window(fs, dp->sect);
1a001f90:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a001f92:	4630      	mov	r0, r6
1a001f94:	f7fe ffac 	bl	1a000ef0 <move_window>
			if (res != FR_OK) break;
1a001f98:	4602      	mov	r2, r0
1a001f9a:	b978      	cbnz	r0, 1a001fbc <dir_alloc+0x60>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
1a001f9c:	7833      	ldrb	r3, [r6, #0]
1a001f9e:	2b04      	cmp	r3, #4
1a001fa0:	d0e7      	beq.n	1a001f72 <dir_alloc+0x16>
1a001fa2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001fa4:	781b      	ldrb	r3, [r3, #0]
1a001fa6:	2be5      	cmp	r3, #229	; 0xe5
1a001fa8:	d002      	beq.n	1a001fb0 <dir_alloc+0x54>
1a001faa:	b91b      	cbnz	r3, 1a001fb4 <dir_alloc+0x58>
1a001fac:	2301      	movs	r3, #1
1a001fae:	e7e5      	b.n	1a001f7c <dir_alloc+0x20>
1a001fb0:	2301      	movs	r3, #1
1a001fb2:	e7e3      	b.n	1a001f7c <dir_alloc+0x20>
1a001fb4:	2300      	movs	r3, #0
1a001fb6:	e7e1      	b.n	1a001f7c <dir_alloc+0x20>
				n = 0;					/* Not a blank entry. Restart to search */
1a001fb8:	2500      	movs	r5, #0
1a001fba:	e7e3      	b.n	1a001f84 <dir_alloc+0x28>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
1a001fbc:	2a04      	cmp	r2, #4
1a001fbe:	d001      	beq.n	1a001fc4 <dir_alloc+0x68>
}
1a001fc0:	4610      	mov	r0, r2
1a001fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
1a001fc4:	2207      	movs	r2, #7
1a001fc6:	e7fb      	b.n	1a001fc0 <dir_alloc+0x64>

1a001fc8 <store_xdir>:
{
1a001fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001fca:	4604      	mov	r4, r0
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
1a001fcc:	6803      	ldr	r3, [r0, #0]
1a001fce:	691e      	ldr	r6, [r3, #16]
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
1a001fd0:	4630      	mov	r0, r6
1a001fd2:	f7fe feb9 	bl	1a000d48 <xdir_sum>
1a001fd6:	4601      	mov	r1, r0
1a001fd8:	1cb0      	adds	r0, r6, #2
1a001fda:	f7fe fcf5 	bl	1a0009c8 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
1a001fde:	7877      	ldrb	r7, [r6, #1]
1a001fe0:	3701      	adds	r7, #1
	res = dir_sdi(dp, dp->blk_ofs);
1a001fe2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
1a001fe4:	4620      	mov	r0, r4
1a001fe6:	f7ff fc31 	bl	1a00184c <dir_sdi>
1a001fea:	4605      	mov	r5, r0
	while (res == FR_OK) {
1a001fec:	b9b5      	cbnz	r5, 1a00201c <store_xdir+0x54>
		res = move_window(dp->obj.fs, dp->sect);
1a001fee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a001ff0:	6820      	ldr	r0, [r4, #0]
1a001ff2:	f7fe ff7d 	bl	1a000ef0 <move_window>
		if (res != FR_OK) break;
1a001ff6:	4605      	mov	r5, r0
1a001ff8:	b980      	cbnz	r0, 1a00201c <store_xdir+0x54>
		mem_cpy(dp->dir, dirb, SZDIRE);
1a001ffa:	2220      	movs	r2, #32
1a001ffc:	4631      	mov	r1, r6
1a001ffe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a002000:	f7fe fd03 	bl	1a000a0a <mem_cpy>
		dp->obj.fs->wflag = 1;
1a002004:	6823      	ldr	r3, [r4, #0]
1a002006:	2201      	movs	r2, #1
1a002008:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
1a00200a:	3f01      	subs	r7, #1
1a00200c:	d006      	beq.n	1a00201c <store_xdir+0x54>
		dirb += SZDIRE;
1a00200e:	3620      	adds	r6, #32
		res = dir_next(dp, 0);
1a002010:	2100      	movs	r1, #0
1a002012:	4620      	mov	r0, r4
1a002014:	f7ff fe22 	bl	1a001c5c <dir_next>
1a002018:	4605      	mov	r5, r0
1a00201a:	e7e7      	b.n	1a001fec <store_xdir+0x24>
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
1a00201c:	2d02      	cmp	r5, #2
1a00201e:	bf28      	it	cs
1a002020:	2502      	movcs	r5, #2
}
1a002022:	b2e8      	uxtb	r0, r5
1a002024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002026:	Address 0x000000001a002026 is out of bounds.


1a002028 <create_name>:
{
1a002028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00202c:	b085      	sub	sp, #20
1a00202e:	4680      	mov	r8, r0
1a002030:	460f      	mov	r7, r1
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
1a002032:	680b      	ldr	r3, [r1, #0]
1a002034:	9303      	str	r3, [sp, #12]
1a002036:	6803      	ldr	r3, [r0, #0]
1a002038:	68dd      	ldr	r5, [r3, #12]
1a00203a:	2400      	movs	r4, #0
1a00203c:	e00e      	b.n	1a00205c <create_name+0x34>
		wc = (WCHAR)uc;
1a00203e:	b286      	uxth	r6, r0
		if (wc < ' ' || wc == '/' || wc == '\\') break;	/* Break if end of the path or a separator is found */
1a002040:	2e1f      	cmp	r6, #31
1a002042:	d924      	bls.n	1a00208e <create_name+0x66>
1a002044:	2e2f      	cmp	r6, #47	; 0x2f
1a002046:	d022      	beq.n	1a00208e <create_name+0x66>
1a002048:	2e5c      	cmp	r6, #92	; 0x5c
1a00204a:	d020      	beq.n	1a00208e <create_name+0x66>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
1a00204c:	2e7f      	cmp	r6, #127	; 0x7f
1a00204e:	d914      	bls.n	1a00207a <create_name+0x52>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
1a002050:	2cfe      	cmp	r4, #254	; 0xfe
1a002052:	f200 8101 	bhi.w	1a002258 <create_name+0x230>
		lfn[di++] = wc;					/* Store the Unicode character */
1a002056:	f825 6014 	strh.w	r6, [r5, r4, lsl #1]
1a00205a:	3401      	adds	r4, #1
		uc = tchar2uni(&p);			/* Get a character */
1a00205c:	a803      	add	r0, sp, #12
1a00205e:	f7fe fcfb 	bl	1a000a58 <tchar2uni>
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
1a002062:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a002066:	f000 80f5 	beq.w	1a002254 <create_name+0x22c>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
1a00206a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
1a00206e:	d3e6      	bcc.n	1a00203e <create_name+0x16>
1a002070:	0c03      	lsrs	r3, r0, #16
1a002072:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
1a002076:	3401      	adds	r4, #1
1a002078:	e7e1      	b.n	1a00203e <create_name+0x16>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
1a00207a:	4631      	mov	r1, r6
1a00207c:	4878      	ldr	r0, [pc, #480]	; (1a002260 <create_name+0x238>)
1a00207e:	f7fe fce1 	bl	1a000a44 <chk_chr>
1a002082:	2800      	cmp	r0, #0
1a002084:	d0e4      	beq.n	1a002050 <create_name+0x28>
1a002086:	2006      	movs	r0, #6
1a002088:	e08f      	b.n	1a0021aa <create_name+0x182>
	while (*p == '/' || *p == '\\') p++;	/* Skip duplicated separators if exist */
1a00208a:	3301      	adds	r3, #1
1a00208c:	9303      	str	r3, [sp, #12]
1a00208e:	9b03      	ldr	r3, [sp, #12]
1a002090:	781a      	ldrb	r2, [r3, #0]
1a002092:	2a2f      	cmp	r2, #47	; 0x2f
1a002094:	d0f9      	beq.n	1a00208a <create_name+0x62>
1a002096:	2a5c      	cmp	r2, #92	; 0x5c
1a002098:	d0f7      	beq.n	1a00208a <create_name+0x62>
	*path = p;							/* Return pointer to the next segment */
1a00209a:	603b      	str	r3, [r7, #0]
	cf = (wc < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
1a00209c:	2e1f      	cmp	r6, #31
1a00209e:	d801      	bhi.n	1a0020a4 <create_name+0x7c>
1a0020a0:	2704      	movs	r7, #4
1a0020a2:	e002      	b.n	1a0020aa <create_name+0x82>
1a0020a4:	2700      	movs	r7, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
1a0020a6:	e000      	b.n	1a0020aa <create_name+0x82>
		di--;
1a0020a8:	3c01      	subs	r4, #1
	while (di) {						/* Snip off trailing spaces and dots if exist */
1a0020aa:	b144      	cbz	r4, 1a0020be <create_name+0x96>
		wc = lfn[di - 1];
1a0020ac:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
1a0020b0:	3b01      	subs	r3, #1
1a0020b2:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (wc != ' ' && wc != '.') break;
1a0020b6:	2b20      	cmp	r3, #32
1a0020b8:	d0f6      	beq.n	1a0020a8 <create_name+0x80>
1a0020ba:	2b2e      	cmp	r3, #46	; 0x2e
1a0020bc:	d0f4      	beq.n	1a0020a8 <create_name+0x80>
	lfn[di] = 0;							/* LFN is created into the working buffer */
1a0020be:	2300      	movs	r3, #0
1a0020c0:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
1a0020c4:	2c00      	cmp	r4, #0
1a0020c6:	f000 80c9 	beq.w	1a00225c <create_name+0x234>
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
1a0020ca:	461e      	mov	r6, r3
1a0020cc:	e000      	b.n	1a0020d0 <create_name+0xa8>
1a0020ce:	3601      	adds	r6, #1
1a0020d0:	f835 3016 	ldrh.w	r3, [r5, r6, lsl #1]
1a0020d4:	2b20      	cmp	r3, #32
1a0020d6:	d0fa      	beq.n	1a0020ce <create_name+0xa6>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
1a0020d8:	b90e      	cbnz	r6, 1a0020de <create_name+0xb6>
1a0020da:	2b2e      	cmp	r3, #46	; 0x2e
1a0020dc:	d101      	bne.n	1a0020e2 <create_name+0xba>
1a0020de:	f047 0703 	orr.w	r7, r7, #3
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
1a0020e2:	b144      	cbz	r4, 1a0020f6 <create_name+0xce>
1a0020e4:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
1a0020e8:	3b01      	subs	r3, #1
1a0020ea:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
1a0020ee:	2b2e      	cmp	r3, #46	; 0x2e
1a0020f0:	d001      	beq.n	1a0020f6 <create_name+0xce>
1a0020f2:	3c01      	subs	r4, #1
1a0020f4:	e7f5      	b.n	1a0020e2 <create_name+0xba>
	mem_set(dp->fn, ' ', 11);
1a0020f6:	220b      	movs	r2, #11
1a0020f8:	2120      	movs	r1, #32
1a0020fa:	f108 0040 	add.w	r0, r8, #64	; 0x40
1a0020fe:	f7fe fc8d 	bl	1a000a1c <mem_set>
	i = b = 0; ni = 8;
1a002102:	f04f 0b08 	mov.w	fp, #8
1a002106:	2300      	movs	r3, #0
1a002108:	9301      	str	r3, [sp, #4]
1a00210a:	469a      	mov	sl, r3
		wc = lfn[si++];					/* Get an LFN character */
1a00210c:	f106 0901 	add.w	r9, r6, #1
1a002110:	f835 6016 	ldrh.w	r6, [r5, r6, lsl #1]
		if (wc == 0) break;				/* Break on end of the LFN */
1a002114:	b346      	cbz	r6, 1a002168 <create_name+0x140>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
1a002116:	2e20      	cmp	r6, #32
1a002118:	d019      	beq.n	1a00214e <create_name+0x126>
1a00211a:	2e2e      	cmp	r6, #46	; 0x2e
1a00211c:	d015      	beq.n	1a00214a <create_name+0x122>
		if (i >= ni || si == di) {		/* End of field? */
1a00211e:	9b01      	ldr	r3, [sp, #4]
1a002120:	455b      	cmp	r3, fp
1a002122:	d218      	bcs.n	1a002156 <create_name+0x12e>
1a002124:	454c      	cmp	r4, r9
1a002126:	d016      	beq.n	1a002156 <create_name+0x12e>
		if (wc >= 0x80) {	/* Is this a non-ASCII character? */
1a002128:	2e7f      	cmp	r6, #127	; 0x7f
1a00212a:	d84e      	bhi.n	1a0021ca <create_name+0x1a2>
		if (wc >= 0x100) {				/* Is this a DBC? */
1a00212c:	2eff      	cmp	r6, #255	; 0xff
1a00212e:	d962      	bls.n	1a0021f6 <create_name+0x1ce>
			if (i >= ni - 1) {			/* Field overflow? */
1a002130:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
1a002134:	9a01      	ldr	r2, [sp, #4]
1a002136:	4293      	cmp	r3, r2
1a002138:	d957      	bls.n	1a0021ea <create_name+0x1c2>
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
1a00213a:	9901      	ldr	r1, [sp, #4]
1a00213c:	1c4b      	adds	r3, r1, #1
1a00213e:	f3c6 2207 	ubfx	r2, r6, #8, #8
1a002142:	4441      	add	r1, r8
1a002144:	f881 2040 	strb.w	r2, [r1, #64]	; 0x40
1a002148:	e05a      	b.n	1a002200 <create_name+0x1d8>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
1a00214a:	454c      	cmp	r4, r9
1a00214c:	d0e7      	beq.n	1a00211e <create_name+0xf6>
			cf |= NS_LOSS | NS_LFN;
1a00214e:	f047 0703 	orr.w	r7, r7, #3
		wc = lfn[si++];					/* Get an LFN character */
1a002152:	464e      	mov	r6, r9
			continue;
1a002154:	e7da      	b.n	1a00210c <create_name+0xe4>
			if (ni == 11) {				/* Name extension overflow? */
1a002156:	f1bb 0f0b 	cmp.w	fp, #11
1a00215a:	d029      	beq.n	1a0021b0 <create_name+0x188>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
1a00215c:	454c      	cmp	r4, r9
1a00215e:	d001      	beq.n	1a002164 <create_name+0x13c>
1a002160:	f047 0703 	orr.w	r7, r7, #3
			if (si > di) break;						/* No name extension? */
1a002164:	454c      	cmp	r4, r9
1a002166:	d226      	bcs.n	1a0021b6 <create_name+0x18e>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
1a002168:	f898 3040 	ldrb.w	r3, [r8, #64]	; 0x40
1a00216c:	2be5      	cmp	r3, #229	; 0xe5
1a00216e:	d068      	beq.n	1a002242 <create_name+0x21a>
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
1a002170:	f1bb 0f08 	cmp.w	fp, #8
1a002174:	d069      	beq.n	1a00224a <create_name+0x222>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
1a002176:	f00a 030c 	and.w	r3, sl, #12
1a00217a:	2b0c      	cmp	r3, #12
1a00217c:	d003      	beq.n	1a002186 <create_name+0x15e>
1a00217e:	f00a 0303 	and.w	r3, sl, #3
1a002182:	2b03      	cmp	r3, #3
1a002184:	d101      	bne.n	1a00218a <create_name+0x162>
1a002186:	f047 0702 	orr.w	r7, r7, #2
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
1a00218a:	f017 0f02 	tst.w	r7, #2
1a00218e:	d109      	bne.n	1a0021a4 <create_name+0x17c>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
1a002190:	f01a 0f01 	tst.w	sl, #1
1a002194:	d001      	beq.n	1a00219a <create_name+0x172>
1a002196:	f047 0710 	orr.w	r7, r7, #16
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
1a00219a:	f01a 0f04 	tst.w	sl, #4
1a00219e:	d001      	beq.n	1a0021a4 <create_name+0x17c>
1a0021a0:	f047 0708 	orr.w	r7, r7, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
1a0021a4:	f888 704b 	strb.w	r7, [r8, #75]	; 0x4b
	return FR_OK;
1a0021a8:	2000      	movs	r0, #0
}
1a0021aa:	b005      	add	sp, #20
1a0021ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN;
1a0021b0:	f047 0703 	orr.w	r7, r7, #3
				break;
1a0021b4:	e7d8      	b.n	1a002168 <create_name+0x140>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
1a0021b6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
1a0021ba:	fa5f fa8a 	uxtb.w	sl, sl
1a0021be:	4626      	mov	r6, r4
1a0021c0:	f04f 0b0b 	mov.w	fp, #11
1a0021c4:	2308      	movs	r3, #8
1a0021c6:	9301      	str	r3, [sp, #4]
			continue;
1a0021c8:	e7a0      	b.n	1a00210c <create_name+0xe4>
			cf |= NS_LFN;	/* LFN entry needs to be created */
1a0021ca:	f047 0702 	orr.w	r7, r7, #2
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
1a0021ce:	f240 3152 	movw	r1, #850	; 0x352
1a0021d2:	4630      	mov	r0, r6
1a0021d4:	f000 feb2 	bl	1a002f3c <ff_uni2oem>
1a0021d8:	4606      	mov	r6, r0
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
1a0021da:	f010 0f80 	tst.w	r0, #128	; 0x80
1a0021de:	d0a5      	beq.n	1a00212c <create_name+0x104>
1a0021e0:	f000 067f 	and.w	r6, r0, #127	; 0x7f
1a0021e4:	4b1f      	ldr	r3, [pc, #124]	; (1a002264 <create_name+0x23c>)
1a0021e6:	5d9e      	ldrb	r6, [r3, r6]
1a0021e8:	e7a0      	b.n	1a00212c <create_name+0x104>
				cf |= NS_LOSS | NS_LFN;
1a0021ea:	f047 0703 	orr.w	r7, r7, #3
		wc = lfn[si++];					/* Get an LFN character */
1a0021ee:	464e      	mov	r6, r9
				i = ni; continue;		/* Next field */
1a0021f0:	f8cd b004 	str.w	fp, [sp, #4]
1a0021f4:	e78a      	b.n	1a00210c <create_name+0xe4>
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
1a0021f6:	b956      	cbnz	r6, 1a00220e <create_name+0x1e6>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
1a0021f8:	f047 0703 	orr.w	r7, r7, #3
1a0021fc:	9b01      	ldr	r3, [sp, #4]
1a0021fe:	265f      	movs	r6, #95	; 0x5f
		dp->fn[i++] = (BYTE)wc;
1a002200:	1c5a      	adds	r2, r3, #1
1a002202:	9201      	str	r2, [sp, #4]
1a002204:	4443      	add	r3, r8
1a002206:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
		wc = lfn[si++];					/* Get an LFN character */
1a00220a:	464e      	mov	r6, r9
1a00220c:	e77e      	b.n	1a00210c <create_name+0xe4>
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
1a00220e:	4631      	mov	r1, r6
1a002210:	4815      	ldr	r0, [pc, #84]	; (1a002268 <create_name+0x240>)
1a002212:	f7fe fc17 	bl	1a000a44 <chk_chr>
1a002216:	2800      	cmp	r0, #0
1a002218:	d1ee      	bne.n	1a0021f8 <create_name+0x1d0>
				if (IsUpper(wc)) {		/* ASCII upper case? */
1a00221a:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
1a00221e:	b29b      	uxth	r3, r3
1a002220:	2b19      	cmp	r3, #25
1a002222:	d801      	bhi.n	1a002228 <create_name+0x200>
					b |= 2;
1a002224:	f04a 0a02 	orr.w	sl, sl, #2
				if (IsLower(wc)) {		/* ASCII lower case? */
1a002228:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
1a00222c:	b29b      	uxth	r3, r3
1a00222e:	2b19      	cmp	r3, #25
1a002230:	d805      	bhi.n	1a00223e <create_name+0x216>
					b |= 1; wc -= 0x20;
1a002232:	f04a 0a01 	orr.w	sl, sl, #1
1a002236:	3e20      	subs	r6, #32
1a002238:	b2b6      	uxth	r6, r6
1a00223a:	9b01      	ldr	r3, [sp, #4]
1a00223c:	e7e0      	b.n	1a002200 <create_name+0x1d8>
1a00223e:	9b01      	ldr	r3, [sp, #4]
1a002240:	e7de      	b.n	1a002200 <create_name+0x1d8>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
1a002242:	2305      	movs	r3, #5
1a002244:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
1a002248:	e792      	b.n	1a002170 <create_name+0x148>
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
1a00224a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
1a00224e:	fa5f fa8a 	uxtb.w	sl, sl
1a002252:	e790      	b.n	1a002176 <create_name+0x14e>
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
1a002254:	2006      	movs	r0, #6
1a002256:	e7a8      	b.n	1a0021aa <create_name+0x182>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
1a002258:	2006      	movs	r0, #6
1a00225a:	e7a6      	b.n	1a0021aa <create_name+0x182>
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
1a00225c:	2006      	movs	r0, #6
1a00225e:	e7a4      	b.n	1a0021aa <create_name+0x182>
1a002260:	1a0084e4 	.word	0x1a0084e4
1a002264:	1a008434 	.word	0x1a008434
1a002268:	1a0084f0 	.word	0x1a0084f0

1a00226c <xname_sum>:
{
1a00226c:	b538      	push	{r3, r4, r5, lr}
	WORD sum = 0;
1a00226e:	2400      	movs	r4, #0
	while ((chr = *name++) != 0) {
1a002270:	e011      	b.n	1a002296 <xname_sum+0x2a>
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
1a002272:	f000 fe83 	bl	1a002f7c <ff_wtoupper>
1a002276:	b280      	uxth	r0, r0
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
1a002278:	0863      	lsrs	r3, r4, #1
1a00227a:	eb03 34c4 	add.w	r4, r3, r4, lsl #15
1a00227e:	b2c3      	uxtb	r3, r0
1a002280:	fa13 f484 	uxtah	r4, r3, r4
1a002284:	b2a3      	uxth	r3, r4
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
1a002286:	085c      	lsrs	r4, r3, #1
1a002288:	eb04 34c3 	add.w	r4, r4, r3, lsl #15
1a00228c:	0a00      	lsrs	r0, r0, #8
1a00228e:	fa10 f484 	uxtah	r4, r0, r4
1a002292:	b2a4      	uxth	r4, r4
	while ((chr = *name++) != 0) {
1a002294:	4628      	mov	r0, r5
1a002296:	1c85      	adds	r5, r0, #2
1a002298:	8800      	ldrh	r0, [r0, #0]
1a00229a:	2800      	cmp	r0, #0
1a00229c:	d1e9      	bne.n	1a002272 <xname_sum+0x6>
}
1a00229e:	4620      	mov	r0, r4
1a0022a0:	bd38      	pop	{r3, r4, r5, pc}

1a0022a2 <create_xdir>:
{
1a0022a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0022a6:	4607      	mov	r7, r0
1a0022a8:	4688      	mov	r8, r1
	mem_set(dirb, 0, 2 * SZDIRE);
1a0022aa:	2240      	movs	r2, #64	; 0x40
1a0022ac:	2100      	movs	r1, #0
1a0022ae:	f7fe fbb5 	bl	1a000a1c <mem_set>
	dirb[0 * SZDIRE + XDIR_Type] = 0x85;	/* 85 entry */
1a0022b2:	2385      	movs	r3, #133	; 0x85
1a0022b4:	703b      	strb	r3, [r7, #0]
	dirb[1 * SZDIRE + XDIR_Type] = 0xC0;	/* C0 entry */
1a0022b6:	23c0      	movs	r3, #192	; 0xc0
1a0022b8:	f887 3020 	strb.w	r3, [r7, #32]
	nlen = nc1 = 0; wc = 1;
1a0022bc:	2501      	movs	r5, #1
1a0022be:	2600      	movs	r6, #0
1a0022c0:	46b1      	mov	r9, r6
	i = SZDIRE * 2;	/* Top of C1 entries */
1a0022c2:	2440      	movs	r4, #64	; 0x40
1a0022c4:	e017      	b.n	1a0022f6 <create_xdir+0x54>
			st_word(dirb + i, wc); 		/* Store it */
1a0022c6:	4629      	mov	r1, r5
1a0022c8:	1938      	adds	r0, r7, r4
1a0022ca:	f7fe fb7d 	bl	1a0009c8 <st_word>
			i += 2;
1a0022ce:	3402      	adds	r4, #2
		} while (i % SZDIRE != 0);
1a0022d0:	f014 0f1f 	tst.w	r4, #31
1a0022d4:	d008      	beq.n	1a0022e8 <create_xdir+0x46>
			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
1a0022d6:	2d00      	cmp	r5, #0
1a0022d8:	d0f5      	beq.n	1a0022c6 <create_xdir+0x24>
1a0022da:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
1a0022de:	2d00      	cmp	r5, #0
1a0022e0:	d0f1      	beq.n	1a0022c6 <create_xdir+0x24>
1a0022e2:	3601      	adds	r6, #1
1a0022e4:	b2f6      	uxtb	r6, r6
1a0022e6:	e7ee      	b.n	1a0022c6 <create_xdir+0x24>
		nc1++;
1a0022e8:	f109 0301 	add.w	r3, r9, #1
1a0022ec:	b2db      	uxtb	r3, r3
	} while (lfn[nlen]);	/* Fill next entry if any char follows */
1a0022ee:	f838 2016 	ldrh.w	r2, [r8, r6, lsl #1]
1a0022f2:	b13a      	cbz	r2, 1a002304 <create_xdir+0x62>
		nc1++;
1a0022f4:	4699      	mov	r9, r3
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
1a0022f6:	1c63      	adds	r3, r4, #1
1a0022f8:	22c1      	movs	r2, #193	; 0xc1
1a0022fa:	553a      	strb	r2, [r7, r4]
1a0022fc:	2200      	movs	r2, #0
1a0022fe:	54fa      	strb	r2, [r7, r3]
1a002300:	3402      	adds	r4, #2
1a002302:	e7e8      	b.n	1a0022d6 <create_xdir+0x34>
	dirb[XDIR_NumName] = nlen;		/* Set name length */
1a002304:	f887 6023 	strb.w	r6, [r7, #35]	; 0x23
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
1a002308:	f109 0902 	add.w	r9, r9, #2
1a00230c:	f887 9001 	strb.w	r9, [r7, #1]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
1a002310:	4640      	mov	r0, r8
1a002312:	f7ff ffab 	bl	1a00226c <xname_sum>
1a002316:	4601      	mov	r1, r0
1a002318:	f107 0024 	add.w	r0, r7, #36	; 0x24
1a00231c:	f7fe fb54 	bl	1a0009c8 <st_word>
}
1a002320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a002324 <cmp_lfn>:
{
1a002324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a002328:	4681      	mov	r9, r0
1a00232a:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
1a00232c:	f101 001a 	add.w	r0, r1, #26
1a002330:	f7fe fae6 	bl	1a000900 <ld_word>
1a002334:	bbb8      	cbnz	r0, 1a0023a6 <cmp_lfn+0x82>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
1a002336:	783d      	ldrb	r5, [r7, #0]
1a002338:	f005 053f 	and.w	r5, r5, #63	; 0x3f
1a00233c:	3d01      	subs	r5, #1
1a00233e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
1a002342:	eb05 0583 	add.w	r5, r5, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1a002346:	f04f 0801 	mov.w	r8, #1
1a00234a:	2400      	movs	r4, #0
1a00234c:	e004      	b.n	1a002358 <cmp_lfn+0x34>
			if (uc != 0xFFFF) return 0;		/* Check filler */
1a00234e:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a002352:	4298      	cmp	r0, r3
1a002354:	d12e      	bne.n	1a0023b4 <cmp_lfn+0x90>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1a002356:	3401      	adds	r4, #1
1a002358:	2c0c      	cmp	r4, #12
1a00235a:	d818      	bhi.n	1a00238e <cmp_lfn+0x6a>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1a00235c:	4b19      	ldr	r3, [pc, #100]	; (1a0023c4 <cmp_lfn+0xa0>)
1a00235e:	5d18      	ldrb	r0, [r3, r4]
1a002360:	4438      	add	r0, r7
1a002362:	f7fe facd 	bl	1a000900 <ld_word>
1a002366:	4606      	mov	r6, r0
		if (wc != 0) {
1a002368:	f1b8 0f00 	cmp.w	r8, #0
1a00236c:	d0ef      	beq.n	1a00234e <cmp_lfn+0x2a>
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
1a00236e:	2dfe      	cmp	r5, #254	; 0xfe
1a002370:	d81c      	bhi.n	1a0023ac <cmp_lfn+0x88>
1a002372:	f000 fe03 	bl	1a002f7c <ff_wtoupper>
1a002376:	4680      	mov	r8, r0
1a002378:	f105 0a01 	add.w	sl, r5, #1
1a00237c:	f839 0015 	ldrh.w	r0, [r9, r5, lsl #1]
1a002380:	f000 fdfc 	bl	1a002f7c <ff_wtoupper>
1a002384:	4580      	cmp	r8, r0
1a002386:	d113      	bne.n	1a0023b0 <cmp_lfn+0x8c>
			wc = uc;
1a002388:	46b0      	mov	r8, r6
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
1a00238a:	4655      	mov	r5, sl
1a00238c:	e7e3      	b.n	1a002356 <cmp_lfn+0x32>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
1a00238e:	783b      	ldrb	r3, [r7, #0]
1a002390:	f013 0f40 	tst.w	r3, #64	; 0x40
1a002394:	d010      	beq.n	1a0023b8 <cmp_lfn+0x94>
1a002396:	f1b8 0f00 	cmp.w	r8, #0
1a00239a:	d00f      	beq.n	1a0023bc <cmp_lfn+0x98>
1a00239c:	f839 3015 	ldrh.w	r3, [r9, r5, lsl #1]
1a0023a0:	b973      	cbnz	r3, 1a0023c0 <cmp_lfn+0x9c>
	return 1;		/* The part of LFN matched */
1a0023a2:	2001      	movs	r0, #1
1a0023a4:	e000      	b.n	1a0023a8 <cmp_lfn+0x84>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
1a0023a6:	2000      	movs	r0, #0
}
1a0023a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return 0;					/* Not matched */
1a0023ac:	2000      	movs	r0, #0
1a0023ae:	e7fb      	b.n	1a0023a8 <cmp_lfn+0x84>
1a0023b0:	2000      	movs	r0, #0
1a0023b2:	e7f9      	b.n	1a0023a8 <cmp_lfn+0x84>
			if (uc != 0xFFFF) return 0;		/* Check filler */
1a0023b4:	2000      	movs	r0, #0
1a0023b6:	e7f7      	b.n	1a0023a8 <cmp_lfn+0x84>
	return 1;		/* The part of LFN matched */
1a0023b8:	2001      	movs	r0, #1
1a0023ba:	e7f5      	b.n	1a0023a8 <cmp_lfn+0x84>
1a0023bc:	2001      	movs	r0, #1
1a0023be:	e7f3      	b.n	1a0023a8 <cmp_lfn+0x84>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
1a0023c0:	2000      	movs	r0, #0
1a0023c2:	e7f1      	b.n	1a0023a8 <cmp_lfn+0x84>
1a0023c4:	1a0084b4 	.word	0x1a0084b4

1a0023c8 <dir_find>:
{
1a0023c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0023cc:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
1a0023ce:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
1a0023d0:	2100      	movs	r1, #0
1a0023d2:	f7ff fa3b 	bl	1a00184c <dir_sdi>
	if (res != FR_OK) return res;
1a0023d6:	4680      	mov	r8, r0
1a0023d8:	2800      	cmp	r0, #0
1a0023da:	f040 80a0 	bne.w	1a00251e <dir_find+0x156>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1a0023de:	783b      	ldrb	r3, [r7, #0]
1a0023e0:	2b04      	cmp	r3, #4
1a0023e2:	d006      	beq.n	1a0023f2 <dir_find+0x2a>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
1a0023e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0023e8:	64e3      	str	r3, [r4, #76]	; 0x4c
1a0023ea:	f04f 09ff 	mov.w	r9, #255	; 0xff
1a0023ee:	464e      	mov	r6, r9
1a0023f0:	e042      	b.n	1a002478 <dir_find+0xb0>
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
1a0023f2:	68f8      	ldr	r0, [r7, #12]
1a0023f4:	f7ff ff3a 	bl	1a00226c <xname_sum>
1a0023f8:	4683      	mov	fp, r0
		while ((res = dir_read_file(dp)) == FR_OK) {	/* Read an item */
1a0023fa:	e01e      	b.n	1a00243a <dir_find+0x72>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
1a0023fc:	6938      	ldr	r0, [r7, #16]
1a0023fe:	4430      	add	r0, r6
1a002400:	f7fe fa7e 	bl	1a000900 <ld_word>
1a002404:	f000 fdba 	bl	1a002f7c <ff_wtoupper>
1a002408:	4682      	mov	sl, r0
1a00240a:	68fb      	ldr	r3, [r7, #12]
1a00240c:	f833 0019 	ldrh.w	r0, [r3, r9, lsl #1]
1a002410:	f000 fdb4 	bl	1a002f7c <ff_wtoupper>
1a002414:	4582      	cmp	sl, r0
1a002416:	d10a      	bne.n	1a00242e <dir_find+0x66>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
1a002418:	3d01      	subs	r5, #1
1a00241a:	b2ed      	uxtb	r5, r5
1a00241c:	3602      	adds	r6, #2
1a00241e:	f109 0901 	add.w	r9, r9, #1
1a002422:	b125      	cbz	r5, 1a00242e <dir_find+0x66>
				if ((di % SZDIRE) == 0) di += 2;
1a002424:	f016 0f1f 	tst.w	r6, #31
1a002428:	d1e8      	bne.n	1a0023fc <dir_find+0x34>
1a00242a:	3602      	adds	r6, #2
1a00242c:	e7e6      	b.n	1a0023fc <dir_find+0x34>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
1a00242e:	b925      	cbnz	r5, 1a00243a <dir_find+0x72>
1a002430:	68fb      	ldr	r3, [r7, #12]
1a002432:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
1a002436:	2b00      	cmp	r3, #0
1a002438:	d071      	beq.n	1a00251e <dir_find+0x156>
		while ((res = dir_read_file(dp)) == FR_OK) {	/* Read an item */
1a00243a:	2100      	movs	r1, #0
1a00243c:	4620      	mov	r0, r4
1a00243e:	f7ff fd18 	bl	1a001e72 <dir_read>
1a002442:	4680      	mov	r8, r0
1a002444:	2800      	cmp	r0, #0
1a002446:	d16a      	bne.n	1a00251e <dir_find+0x156>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
1a002448:	693d      	ldr	r5, [r7, #16]
1a00244a:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a00244e:	f7fe fa57 	bl	1a000900 <ld_word>
1a002452:	4558      	cmp	r0, fp
1a002454:	d1f1      	bne.n	1a00243a <dir_find+0x72>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
1a002456:	f895 5023 	ldrb.w	r5, [r5, #35]	; 0x23
1a00245a:	f04f 0900 	mov.w	r9, #0
1a00245e:	2640      	movs	r6, #64	; 0x40
1a002460:	e7df      	b.n	1a002422 <dir_find+0x5a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
1a002462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a002466:	64e3      	str	r3, [r4, #76]	; 0x4c
1a002468:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
1a00246a:	2100      	movs	r1, #0
1a00246c:	4620      	mov	r0, r4
1a00246e:	f7ff fbf5 	bl	1a001c5c <dir_next>
	} while (res == FR_OK);
1a002472:	4680      	mov	r8, r0
1a002474:	2800      	cmp	r0, #0
1a002476:	d152      	bne.n	1a00251e <dir_find+0x156>
		res = move_window(fs, dp->sect);
1a002478:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a00247a:	4638      	mov	r0, r7
1a00247c:	f7fe fd38 	bl	1a000ef0 <move_window>
		if (res != FR_OK) break;
1a002480:	4680      	mov	r8, r0
1a002482:	2800      	cmp	r0, #0
1a002484:	d14b      	bne.n	1a00251e <dir_find+0x156>
		c = dp->dir[DIR_Name];
1a002486:	6be5      	ldr	r5, [r4, #60]	; 0x3c
1a002488:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1a00248a:	2b00      	cmp	r3, #0
1a00248c:	d045      	beq.n	1a00251a <dir_find+0x152>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
1a00248e:	7ae9      	ldrb	r1, [r5, #11]
1a002490:	f001 023f 	and.w	r2, r1, #63	; 0x3f
1a002494:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
1a002496:	2be5      	cmp	r3, #229	; 0xe5
1a002498:	d0e3      	beq.n	1a002462 <dir_find+0x9a>
1a00249a:	f011 0f08 	tst.w	r1, #8
1a00249e:	d001      	beq.n	1a0024a4 <dir_find+0xdc>
1a0024a0:	2a0f      	cmp	r2, #15
1a0024a2:	d1de      	bne.n	1a002462 <dir_find+0x9a>
			if (a == AM_LFN) {			/* An LFN entry is found */
1a0024a4:	2a0f      	cmp	r2, #15
1a0024a6:	d016      	beq.n	1a0024d6 <dir_find+0x10e>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
1a0024a8:	b926      	cbnz	r6, 1a0024b4 <dir_find+0xec>
1a0024aa:	4628      	mov	r0, r5
1a0024ac:	f7fe fc3e 	bl	1a000d2c <sum_sfn>
1a0024b0:	4548      	cmp	r0, r9
1a0024b2:	d034      	beq.n	1a00251e <dir_find+0x156>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
1a0024b4:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
1a0024b8:	f013 0f01 	tst.w	r3, #1
1a0024bc:	d106      	bne.n	1a0024cc <dir_find+0x104>
1a0024be:	220b      	movs	r2, #11
1a0024c0:	f104 0140 	add.w	r1, r4, #64	; 0x40
1a0024c4:	4628      	mov	r0, r5
1a0024c6:	f7fe faae 	bl	1a000a26 <mem_cmp>
1a0024ca:	b340      	cbz	r0, 1a00251e <dir_find+0x156>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
1a0024cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0024d0:	64e3      	str	r3, [r4, #76]	; 0x4c
1a0024d2:	26ff      	movs	r6, #255	; 0xff
1a0024d4:	e7c9      	b.n	1a00246a <dir_find+0xa2>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
1a0024d6:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
1a0024da:	f012 0f40 	tst.w	r2, #64	; 0x40
1a0024de:	d1c4      	bne.n	1a00246a <dir_find+0xa2>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
1a0024e0:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0024e4:	d006      	beq.n	1a0024f4 <dir_find+0x12c>
						sum = dp->dir[LDIR_Chksum];
1a0024e6:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
1a0024ea:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
1a0024ee:	6b22      	ldr	r2, [r4, #48]	; 0x30
1a0024f0:	64e2      	str	r2, [r4, #76]	; 0x4c
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
1a0024f2:	461e      	mov	r6, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
1a0024f4:	42b3      	cmp	r3, r6
1a0024f6:	d001      	beq.n	1a0024fc <dir_find+0x134>
1a0024f8:	26ff      	movs	r6, #255	; 0xff
1a0024fa:	e7b6      	b.n	1a00246a <dir_find+0xa2>
1a0024fc:	7b6b      	ldrb	r3, [r5, #13]
1a0024fe:	454b      	cmp	r3, r9
1a002500:	d001      	beq.n	1a002506 <dir_find+0x13e>
1a002502:	26ff      	movs	r6, #255	; 0xff
1a002504:	e7b1      	b.n	1a00246a <dir_find+0xa2>
1a002506:	4629      	mov	r1, r5
1a002508:	68f8      	ldr	r0, [r7, #12]
1a00250a:	f7ff ff0b 	bl	1a002324 <cmp_lfn>
1a00250e:	b110      	cbz	r0, 1a002516 <dir_find+0x14e>
1a002510:	3e01      	subs	r6, #1
1a002512:	b2f6      	uxtb	r6, r6
1a002514:	e7a9      	b.n	1a00246a <dir_find+0xa2>
1a002516:	26ff      	movs	r6, #255	; 0xff
1a002518:	e7a7      	b.n	1a00246a <dir_find+0xa2>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1a00251a:	f04f 0804 	mov.w	r8, #4
}
1a00251e:	4640      	mov	r0, r8
1a002520:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a002524 <follow_path>:
{
1a002524:	b530      	push	{r4, r5, lr}
1a002526:	b083      	sub	sp, #12
1a002528:	4604      	mov	r4, r0
1a00252a:	9101      	str	r1, [sp, #4]
	FATFS *fs = dp->obj.fs;
1a00252c:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
1a00252e:	e001      	b.n	1a002534 <follow_path+0x10>
1a002530:	3301      	adds	r3, #1
1a002532:	9301      	str	r3, [sp, #4]
1a002534:	9b01      	ldr	r3, [sp, #4]
1a002536:	781a      	ldrb	r2, [r3, #0]
1a002538:	2a2f      	cmp	r2, #47	; 0x2f
1a00253a:	d0f9      	beq.n	1a002530 <follow_path+0xc>
1a00253c:	2a5c      	cmp	r2, #92	; 0x5c
1a00253e:	d0f7      	beq.n	1a002530 <follow_path+0xc>
		dp->obj.sclust = 0;					/* Start from root directory */
1a002540:	2200      	movs	r2, #0
1a002542:	60a2      	str	r2, [r4, #8]
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
1a002544:	61e2      	str	r2, [r4, #28]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
1a002546:	781b      	ldrb	r3, [r3, #0]
1a002548:	2b1f      	cmp	r3, #31
1a00254a:	d81f      	bhi.n	1a00258c <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
1a00254c:	2380      	movs	r3, #128	; 0x80
1a00254e:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
		res = dir_sdi(dp, 0);
1a002552:	4611      	mov	r1, r2
1a002554:	4620      	mov	r0, r4
1a002556:	f7ff f979 	bl	1a00184c <dir_sdi>
1a00255a:	4603      	mov	r3, r0
}
1a00255c:	4618      	mov	r0, r3
1a00255e:	b003      	add	sp, #12
1a002560:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
1a002562:	2804      	cmp	r0, #4
1a002564:	d1fa      	bne.n	1a00255c <follow_path+0x38>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
1a002566:	f012 0f04 	tst.w	r2, #4
1a00256a:	d1f7      	bne.n	1a00255c <follow_path+0x38>
1a00256c:	2305      	movs	r3, #5
1a00256e:	e7f5      	b.n	1a00255c <follow_path+0x38>
				dp->obj.c_scl = dp->obj.sclust;
1a002570:	68a3      	ldr	r3, [r4, #8]
1a002572:	6223      	str	r3, [r4, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
1a002574:	6923      	ldr	r3, [r4, #16]
1a002576:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a00257a:	79e2      	ldrb	r2, [r4, #7]
1a00257c:	4313      	orrs	r3, r2
1a00257e:	6263      	str	r3, [r4, #36]	; 0x24
				dp->obj.c_ofs = dp->blk_ofs;
1a002580:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
1a002582:	62a3      	str	r3, [r4, #40]	; 0x28
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
1a002584:	4621      	mov	r1, r4
1a002586:	4628      	mov	r0, r5
1a002588:	f7fe fbf6 	bl	1a000d78 <init_alloc_info>
			res = create_name(dp, &path);	/* Get a segment name of the path */
1a00258c:	a901      	add	r1, sp, #4
1a00258e:	4620      	mov	r0, r4
1a002590:	f7ff fd4a 	bl	1a002028 <create_name>
			if (res != FR_OK) break;
1a002594:	4603      	mov	r3, r0
1a002596:	2800      	cmp	r0, #0
1a002598:	d1e0      	bne.n	1a00255c <follow_path+0x38>
			res = dir_find(dp);				/* Find an object with the segment name */
1a00259a:	4620      	mov	r0, r4
1a00259c:	f7ff ff14 	bl	1a0023c8 <dir_find>
			ns = dp->fn[NSFLAG];
1a0025a0:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
			if (res != FR_OK) {				/* Failed to find the object */
1a0025a4:	4603      	mov	r3, r0
1a0025a6:	2800      	cmp	r0, #0
1a0025a8:	d1db      	bne.n	1a002562 <follow_path+0x3e>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
1a0025aa:	f012 0f04 	tst.w	r2, #4
1a0025ae:	d1d5      	bne.n	1a00255c <follow_path+0x38>
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
1a0025b0:	79a3      	ldrb	r3, [r4, #6]
1a0025b2:	f013 0f10 	tst.w	r3, #16
1a0025b6:	d00d      	beq.n	1a0025d4 <follow_path+0xb0>
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
1a0025b8:	782b      	ldrb	r3, [r5, #0]
1a0025ba:	2b04      	cmp	r3, #4
1a0025bc:	d0d8      	beq.n	1a002570 <follow_path+0x4c>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
1a0025be:	f105 0138 	add.w	r1, r5, #56	; 0x38
1a0025c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a0025c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
1a0025c8:	4419      	add	r1, r3
1a0025ca:	4628      	mov	r0, r5
1a0025cc:	f7fe fab0 	bl	1a000b30 <ld_clust>
1a0025d0:	60a0      	str	r0, [r4, #8]
1a0025d2:	e7db      	b.n	1a00258c <follow_path+0x68>
				res = FR_NO_PATH; break;
1a0025d4:	2305      	movs	r3, #5
1a0025d6:	e7c1      	b.n	1a00255c <follow_path+0x38>

1a0025d8 <dir_register>:
{
1a0025d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0025dc:	b099      	sub	sp, #100	; 0x64
	FATFS *fs = dp->obj.fs;
1a0025de:	6805      	ldr	r5, [r0, #0]
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
1a0025e0:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
1a0025e4:	f013 0fa0 	tst.w	r3, #160	; 0xa0
1a0025e8:	f040 80eb 	bne.w	1a0027c2 <dir_register+0x1ea>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
1a0025ec:	2400      	movs	r4, #0
1a0025ee:	e000      	b.n	1a0025f2 <dir_register+0x1a>
1a0025f0:	3401      	adds	r4, #1
1a0025f2:	68eb      	ldr	r3, [r5, #12]
1a0025f4:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
1a0025f8:	2b00      	cmp	r3, #0
1a0025fa:	d1f9      	bne.n	1a0025f0 <dir_register+0x18>
1a0025fc:	4606      	mov	r6, r0
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1a0025fe:	782b      	ldrb	r3, [r5, #0]
1a002600:	2b04      	cmp	r3, #4
1a002602:	d022      	beq.n	1a00264a <dir_register+0x72>
	mem_cpy(sn, dp->fn, 12);
1a002604:	f100 0740 	add.w	r7, r0, #64	; 0x40
1a002608:	220c      	movs	r2, #12
1a00260a:	4639      	mov	r1, r7
1a00260c:	a815      	add	r0, sp, #84	; 0x54
1a00260e:	f7fe f9fc 	bl	1a000a0a <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
1a002612:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
1a002616:	f013 0f01 	tst.w	r3, #1
1a00261a:	d07a      	beq.n	1a002712 <dir_register+0x13a>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
1a00261c:	2340      	movs	r3, #64	; 0x40
1a00261e:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
1a002622:	f04f 0801 	mov.w	r8, #1
1a002626:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
1a00262a:	d868      	bhi.n	1a0026fe <dir_register+0x126>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
1a00262c:	4643      	mov	r3, r8
1a00262e:	68ea      	ldr	r2, [r5, #12]
1a002630:	a915      	add	r1, sp, #84	; 0x54
1a002632:	4638      	mov	r0, r7
1a002634:	f7fe fb22 	bl	1a000c7c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
1a002638:	4630      	mov	r0, r6
1a00263a:	f7ff fec5 	bl	1a0023c8 <dir_find>
			if (res != FR_OK) break;
1a00263e:	4681      	mov	r9, r0
1a002640:	2800      	cmp	r0, #0
1a002642:	d15c      	bne.n	1a0026fe <dir_register+0x126>
		for (n = 1; n < 100; n++) {
1a002644:	f108 0801 	add.w	r8, r8, #1
1a002648:	e7ed      	b.n	1a002626 <dir_register+0x4e>
		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
1a00264a:	340e      	adds	r4, #14
1a00264c:	4b62      	ldr	r3, [pc, #392]	; (1a0027d8 <dir_register+0x200>)
1a00264e:	fba3 3404 	umull	r3, r4, r3, r4
1a002652:	08e4      	lsrs	r4, r4, #3
		res = dir_alloc(dp, nent);		/* Allocate entries */
1a002654:	1ca1      	adds	r1, r4, #2
1a002656:	f7ff fc81 	bl	1a001f5c <dir_alloc>
		if (res != FR_OK) return res;
1a00265a:	4681      	mov	r9, r0
1a00265c:	2800      	cmp	r0, #0
1a00265e:	f040 80b2 	bne.w	1a0027c6 <dir_register+0x1ee>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
1a002662:	6b33      	ldr	r3, [r6, #48]	; 0x30
1a002664:	f104 6400 	add.w	r4, r4, #134217728	; 0x8000000
1a002668:	3401      	adds	r4, #1
1a00266a:	eba3 1444 	sub.w	r4, r3, r4, lsl #5
1a00266e:	64f4      	str	r4, [r6, #76]	; 0x4c
		if (dp->obj.stat & 4) {			/* Has the directory been stretched? */
1a002670:	79f3      	ldrb	r3, [r6, #7]
1a002672:	f013 0f04 	tst.w	r3, #4
1a002676:	d013      	beq.n	1a0026a0 <dir_register+0xc8>
			dp->obj.stat &= ~4;
1a002678:	f023 0304 	bic.w	r3, r3, #4
1a00267c:	71f3      	strb	r3, [r6, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
1a00267e:	4630      	mov	r0, r6
1a002680:	f7ff f812 	bl	1a0016a8 <fill_first_frag>
			if (res != FR_OK) return res;
1a002684:	b108      	cbz	r0, 1a00268a <dir_register+0xb2>
1a002686:	4681      	mov	r9, r0
1a002688:	e09d      	b.n	1a0027c6 <dir_register+0x1ee>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
1a00268a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00268e:	6b71      	ldr	r1, [r6, #52]	; 0x34
1a002690:	4630      	mov	r0, r6
1a002692:	f7fe fff1 	bl	1a001678 <fill_last_frag>
			if (res != FR_OK) return res;
1a002696:	2800      	cmp	r0, #0
1a002698:	f040 8099 	bne.w	1a0027ce <dir_register+0x1f6>
			if (dp->obj.sclust != 0) {		/* Is it a sub directory? */
1a00269c:	68b3      	ldr	r3, [r6, #8]
1a00269e:	b923      	cbnz	r3, 1a0026aa <dir_register+0xd2>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
1a0026a0:	68e9      	ldr	r1, [r5, #12]
1a0026a2:	6928      	ldr	r0, [r5, #16]
1a0026a4:	f7ff fdfd 	bl	1a0022a2 <create_xdir>
		return FR_OK;
1a0026a8:	e08d      	b.n	1a0027c6 <dir_register+0x1ee>
				res = load_obj_xdir(&dj, &dp->obj);	/* Load the object status */
1a0026aa:	4631      	mov	r1, r6
1a0026ac:	4668      	mov	r0, sp
1a0026ae:	f7ff fbc3 	bl	1a001e38 <load_obj_xdir>
				if (res != FR_OK) return res;
1a0026b2:	4603      	mov	r3, r0
1a0026b4:	b108      	cbz	r0, 1a0026ba <dir_register+0xe2>
1a0026b6:	4699      	mov	r9, r3
1a0026b8:	e085      	b.n	1a0027c6 <dir_register+0x1ee>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);			/* Increase the directory size by cluster size */
1a0026ba:	8969      	ldrh	r1, [r5, #10]
1a0026bc:	0249      	lsls	r1, r1, #9
1a0026be:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
1a0026c2:	1857      	adds	r7, r2, r1
1a0026c4:	f143 0800 	adc.w	r8, r3, #0
1a0026c8:	e9c6 7804 	strd	r7, r8, [r6, #16]
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);	/* Update the allocation status */
1a0026cc:	6928      	ldr	r0, [r5, #16]
1a0026ce:	463a      	mov	r2, r7
1a0026d0:	4643      	mov	r3, r8
1a0026d2:	3038      	adds	r0, #56	; 0x38
1a0026d4:	f7fe f986 	bl	1a0009e4 <st_qword>
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
1a0026d8:	6928      	ldr	r0, [r5, #16]
1a0026da:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
1a0026de:	3028      	adds	r0, #40	; 0x28
1a0026e0:	f7fe f980 	bl	1a0009e4 <st_qword>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
1a0026e4:	79f3      	ldrb	r3, [r6, #7]
1a0026e6:	692a      	ldr	r2, [r5, #16]
1a0026e8:	f043 0301 	orr.w	r3, r3, #1
1a0026ec:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
				res = store_xdir(&dj);				/* Store the object status */
1a0026f0:	4668      	mov	r0, sp
1a0026f2:	f7ff fc69 	bl	1a001fc8 <store_xdir>
				if (res != FR_OK) return res;
1a0026f6:	4603      	mov	r3, r0
1a0026f8:	2800      	cmp	r0, #0
1a0026fa:	d0d1      	beq.n	1a0026a0 <dir_register+0xc8>
1a0026fc:	e7db      	b.n	1a0026b6 <dir_register+0xde>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
1a0026fe:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
1a002702:	d066      	beq.n	1a0027d2 <dir_register+0x1fa>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
1a002704:	f1b9 0f04 	cmp.w	r9, #4
1a002708:	d15d      	bne.n	1a0027c6 <dir_register+0x1ee>
		dp->fn[NSFLAG] = sn[NSFLAG];
1a00270a:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
1a00270e:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
1a002712:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
1a002716:	f013 0f02 	tst.w	r3, #2
1a00271a:	d02a      	beq.n	1a002772 <dir_register+0x19a>
1a00271c:	340c      	adds	r4, #12
1a00271e:	4b2f      	ldr	r3, [pc, #188]	; (1a0027dc <dir_register+0x204>)
1a002720:	fba3 3404 	umull	r3, r4, r3, r4
1a002724:	08a4      	lsrs	r4, r4, #2
1a002726:	3401      	adds	r4, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
1a002728:	4621      	mov	r1, r4
1a00272a:	4630      	mov	r0, r6
1a00272c:	f7ff fc16 	bl	1a001f5c <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
1a002730:	4681      	mov	r9, r0
1a002732:	b908      	cbnz	r0, 1a002738 <dir_register+0x160>
1a002734:	3c01      	subs	r4, #1
1a002736:	d11e      	bne.n	1a002776 <dir_register+0x19e>
	if (res == FR_OK) {
1a002738:	f1b9 0f00 	cmp.w	r9, #0
1a00273c:	d143      	bne.n	1a0027c6 <dir_register+0x1ee>
		res = move_window(fs, dp->sect);
1a00273e:	6bb1      	ldr	r1, [r6, #56]	; 0x38
1a002740:	4628      	mov	r0, r5
1a002742:	f7fe fbd5 	bl	1a000ef0 <move_window>
		if (res == FR_OK) {
1a002746:	4681      	mov	r9, r0
1a002748:	2800      	cmp	r0, #0
1a00274a:	d13c      	bne.n	1a0027c6 <dir_register+0x1ee>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
1a00274c:	2220      	movs	r2, #32
1a00274e:	2100      	movs	r1, #0
1a002750:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
1a002752:	f7fe f963 	bl	1a000a1c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
1a002756:	220b      	movs	r2, #11
1a002758:	4639      	mov	r1, r7
1a00275a:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
1a00275c:	f7fe f955 	bl	1a000a0a <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
1a002760:	f896 304b 	ldrb.w	r3, [r6, #75]	; 0x4b
1a002764:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
1a002766:	f003 0318 	and.w	r3, r3, #24
1a00276a:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
1a00276c:	2301      	movs	r3, #1
1a00276e:	70eb      	strb	r3, [r5, #3]
1a002770:	e029      	b.n	1a0027c6 <dir_register+0x1ee>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
1a002772:	2401      	movs	r4, #1
1a002774:	e7d8      	b.n	1a002728 <dir_register+0x150>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
1a002776:	6b31      	ldr	r1, [r6, #48]	; 0x30
1a002778:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
1a00277c:	4630      	mov	r0, r6
1a00277e:	f7ff f865 	bl	1a00184c <dir_sdi>
		if (res == FR_OK) {
1a002782:	4681      	mov	r9, r0
1a002784:	2800      	cmp	r0, #0
1a002786:	d1d7      	bne.n	1a002738 <dir_register+0x160>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
1a002788:	4638      	mov	r0, r7
1a00278a:	f7fe facf 	bl	1a000d2c <sum_sfn>
1a00278e:	4680      	mov	r8, r0
				res = move_window(fs, dp->sect);
1a002790:	6bb1      	ldr	r1, [r6, #56]	; 0x38
1a002792:	4628      	mov	r0, r5
1a002794:	f7fe fbac 	bl	1a000ef0 <move_window>
				if (res != FR_OK) break;
1a002798:	4681      	mov	r9, r0
1a00279a:	2800      	cmp	r0, #0
1a00279c:	d1cc      	bne.n	1a002738 <dir_register+0x160>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
1a00279e:	4643      	mov	r3, r8
1a0027a0:	b2e2      	uxtb	r2, r4
1a0027a2:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
1a0027a4:	68e8      	ldr	r0, [r5, #12]
1a0027a6:	f7fe fa2d 	bl	1a000c04 <put_lfn>
				fs->wflag = 1;
1a0027aa:	2301      	movs	r3, #1
1a0027ac:	70eb      	strb	r3, [r5, #3]
				res = dir_next(dp, 0);	/* Next entry */
1a0027ae:	2100      	movs	r1, #0
1a0027b0:	4630      	mov	r0, r6
1a0027b2:	f7ff fa53 	bl	1a001c5c <dir_next>
			} while (res == FR_OK && --nent);
1a0027b6:	4681      	mov	r9, r0
1a0027b8:	2800      	cmp	r0, #0
1a0027ba:	d1bd      	bne.n	1a002738 <dir_register+0x160>
1a0027bc:	3c01      	subs	r4, #1
1a0027be:	d1e7      	bne.n	1a002790 <dir_register+0x1b8>
1a0027c0:	e7ba      	b.n	1a002738 <dir_register+0x160>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
1a0027c2:	f04f 0906 	mov.w	r9, #6
}
1a0027c6:	4648      	mov	r0, r9
1a0027c8:	b019      	add	sp, #100	; 0x64
1a0027ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (res != FR_OK) return res;
1a0027ce:	4681      	mov	r9, r0
1a0027d0:	e7f9      	b.n	1a0027c6 <dir_register+0x1ee>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
1a0027d2:	f04f 0907 	mov.w	r9, #7
1a0027d6:	e7f6      	b.n	1a0027c6 <dir_register+0x1ee>
1a0027d8:	88888889 	.word	0x88888889
1a0027dc:	4ec4ec4f 	.word	0x4ec4ec4f

1a0027e0 <sync_fs>:
{
1a0027e0:	b570      	push	{r4, r5, r6, lr}
1a0027e2:	4604      	mov	r4, r0
	res = sync_window(fs);
1a0027e4:	f7fe fb5c 	bl	1a000ea0 <sync_window>
	if (res == FR_OK) {
1a0027e8:	4605      	mov	r5, r0
1a0027ea:	b948      	cbnz	r0, 1a002800 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
1a0027ec:	7823      	ldrb	r3, [r4, #0]
1a0027ee:	2b03      	cmp	r3, #3
1a0027f0:	d008      	beq.n	1a002804 <sync_fs+0x24>
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
1a0027f2:	2200      	movs	r2, #0
1a0027f4:	4611      	mov	r1, r2
1a0027f6:	7860      	ldrb	r0, [r4, #1]
1a0027f8:	f003 f8be 	bl	1a005978 <disk_ioctl>
1a0027fc:	b100      	cbz	r0, 1a002800 <sync_fs+0x20>
1a0027fe:	2501      	movs	r5, #1
}
1a002800:	4628      	mov	r0, r5
1a002802:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
1a002804:	7923      	ldrb	r3, [r4, #4]
1a002806:	2b01      	cmp	r3, #1
1a002808:	d1f3      	bne.n	1a0027f2 <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
1a00280a:	f104 0638 	add.w	r6, r4, #56	; 0x38
1a00280e:	f44f 7200 	mov.w	r2, #512	; 0x200
1a002812:	2100      	movs	r1, #0
1a002814:	4630      	mov	r0, r6
1a002816:	f7fe f901 	bl	1a000a1c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
1a00281a:	f64a 2155 	movw	r1, #43605	; 0xaa55
1a00281e:	f204 2036 	addw	r0, r4, #566	; 0x236
1a002822:	f7fe f8d1 	bl	1a0009c8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
1a002826:	490f      	ldr	r1, [pc, #60]	; (1a002864 <sync_fs+0x84>)
1a002828:	4630      	mov	r0, r6
1a00282a:	f7fe f8d1 	bl	1a0009d0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
1a00282e:	490e      	ldr	r1, [pc, #56]	; (1a002868 <sync_fs+0x88>)
1a002830:	f504 7007 	add.w	r0, r4, #540	; 0x21c
1a002834:	f7fe f8cc 	bl	1a0009d0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
1a002838:	69a1      	ldr	r1, [r4, #24]
1a00283a:	f504 7008 	add.w	r0, r4, #544	; 0x220
1a00283e:	f7fe f8c7 	bl	1a0009d0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
1a002842:	6961      	ldr	r1, [r4, #20]
1a002844:	f504 7009 	add.w	r0, r4, #548	; 0x224
1a002848:	f7fe f8c2 	bl	1a0009d0 <st_dword>
			fs->winsect = fs->volbase + 1;
1a00284c:	6a62      	ldr	r2, [r4, #36]	; 0x24
1a00284e:	3201      	adds	r2, #1
1a002850:	6362      	str	r2, [r4, #52]	; 0x34
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
1a002852:	2301      	movs	r3, #1
1a002854:	4631      	mov	r1, r6
1a002856:	7860      	ldrb	r0, [r4, #1]
1a002858:	f003 f87e 	bl	1a005958 <disk_write>
			fs->fsi_flag = 0;
1a00285c:	2300      	movs	r3, #0
1a00285e:	7123      	strb	r3, [r4, #4]
1a002860:	e7c7      	b.n	1a0027f2 <sync_fs+0x12>
1a002862:	bf00      	nop
1a002864:	41615252 	.word	0x41615252
1a002868:	61417272 	.word	0x61417272

1a00286c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
1a00286c:	b510      	push	{r4, lr}
1a00286e:	b084      	sub	sp, #16
1a002870:	9001      	str	r0, [sp, #4]
1a002872:	9100      	str	r1, [sp, #0]
1a002874:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
1a002876:	a804      	add	r0, sp, #16
1a002878:	f840 1d04 	str.w	r1, [r0, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
1a00287c:	f7fe fa94 	bl	1a000da8 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
1a002880:	2800      	cmp	r0, #0
1a002882:	db17      	blt.n	1a0028b4 <f_mount+0x48>
	cfs = FatFs[vol];					/* Pointer to fs object */
1a002884:	4b0c      	ldr	r3, [pc, #48]	; (1a0028b8 <f_mount+0x4c>)
1a002886:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

	if (cfs) {
1a00288a:	b10b      	cbz	r3, 1a002890 <f_mount+0x24>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
1a00288c:	2200      	movs	r2, #0
1a00288e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
1a002890:	9b01      	ldr	r3, [sp, #4]
1a002892:	b10b      	cbz	r3, 1a002898 <f_mount+0x2c>
		fs->fs_type = 0;				/* Clear new fs object */
1a002894:	2200      	movs	r2, #0
1a002896:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
1a002898:	4b07      	ldr	r3, [pc, #28]	; (1a0028b8 <f_mount+0x4c>)
1a00289a:	9a01      	ldr	r2, [sp, #4]
1a00289c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
1a0028a0:	b914      	cbnz	r4, 1a0028a8 <f_mount+0x3c>
1a0028a2:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
1a0028a4:	b004      	add	sp, #16
1a0028a6:	bd10      	pop	{r4, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
1a0028a8:	2200      	movs	r2, #0
1a0028aa:	a901      	add	r1, sp, #4
1a0028ac:	4668      	mov	r0, sp
1a0028ae:	f7fe fb7b 	bl	1a000fa8 <find_volume>
	LEAVE_FF(fs, res);
1a0028b2:	e7f7      	b.n	1a0028a4 <f_mount+0x38>
	if (vol < 0) return FR_INVALID_DRIVE;
1a0028b4:	200b      	movs	r0, #11
1a0028b6:	e7f5      	b.n	1a0028a4 <f_mount+0x38>
1a0028b8:	10000824 	.word	0x10000824

1a0028bc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
1a0028bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0028c0:	b099      	sub	sp, #100	; 0x64
1a0028c2:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
1a0028c4:	2800      	cmp	r0, #0
1a0028c6:	f000 8153 	beq.w	1a002b70 <f_open+0x2b4>
1a0028ca:	4604      	mov	r4, r0
1a0028cc:	4616      	mov	r6, r2

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
1a0028ce:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
1a0028d2:	463a      	mov	r2, r7
1a0028d4:	a903      	add	r1, sp, #12
1a0028d6:	a801      	add	r0, sp, #4
1a0028d8:	f7fe fb66 	bl	1a000fa8 <find_volume>
	if (res == FR_OK) {
1a0028dc:	4605      	mov	r5, r0
1a0028de:	b130      	cbz	r0, 1a0028ee <f_open+0x32>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
1a0028e0:	b10d      	cbz	r5, 1a0028e6 <f_open+0x2a>
1a0028e2:	2300      	movs	r3, #0
1a0028e4:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
1a0028e6:	4628      	mov	r0, r5
1a0028e8:	b019      	add	sp, #100	; 0x64
1a0028ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dj.obj.fs = fs;
1a0028ee:	9b03      	ldr	r3, [sp, #12]
1a0028f0:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
1a0028f2:	9901      	ldr	r1, [sp, #4]
1a0028f4:	a804      	add	r0, sp, #16
1a0028f6:	f7ff fe15 	bl	1a002524 <follow_path>
		if (res == FR_OK) {
1a0028fa:	4605      	mov	r5, r0
1a0028fc:	b918      	cbnz	r0, 1a002906 <f_open+0x4a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
1a0028fe:	f99d 305b 	ldrsb.w	r3, [sp, #91]	; 0x5b
1a002902:	2b00      	cmp	r3, #0
1a002904:	db47      	blt.n	1a002996 <f_open+0xda>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
1a002906:	f016 0f1c 	tst.w	r6, #28
1a00290a:	f000 808a 	beq.w	1a002a22 <f_open+0x166>
			if (res != FR_OK) {					/* No file, create new */
1a00290e:	2d00      	cmp	r5, #0
1a002910:	d048      	beq.n	1a0029a4 <f_open+0xe8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
1a002912:	2d04      	cmp	r5, #4
1a002914:	d041      	beq.n	1a00299a <f_open+0xde>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
1a002916:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
1a00291a:	2d00      	cmp	r5, #0
1a00291c:	f040 8090 	bne.w	1a002a40 <f_open+0x184>
1a002920:	f017 0f08 	tst.w	r7, #8
1a002924:	f000 808c 	beq.w	1a002a40 <f_open+0x184>
				if (fs->fs_type == FS_EXFAT) {
1a002928:	9803      	ldr	r0, [sp, #12]
1a00292a:	7803      	ldrb	r3, [r0, #0]
1a00292c:	2b04      	cmp	r3, #4
1a00292e:	d043      	beq.n	1a0029b8 <f_open+0xfc>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
1a002930:	9e13      	ldr	r6, [sp, #76]	; 0x4c
1a002932:	4631      	mov	r1, r6
1a002934:	f7fe f8fc 	bl	1a000b30 <ld_clust>
1a002938:	4680      	mov	r8, r0
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
1a00293a:	f002 ffcd 	bl	1a0058d8 <get_fattime>
1a00293e:	4601      	mov	r1, r0
1a002940:	f106 000e 	add.w	r0, r6, #14
1a002944:	f7fe f844 	bl	1a0009d0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
1a002948:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a00294a:	2220      	movs	r2, #32
1a00294c:	72da      	strb	r2, [r3, #11]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
1a00294e:	2200      	movs	r2, #0
1a002950:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a002952:	9803      	ldr	r0, [sp, #12]
1a002954:	f7fe f8ff 	bl	1a000b56 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
1a002958:	2100      	movs	r1, #0
1a00295a:	9813      	ldr	r0, [sp, #76]	; 0x4c
1a00295c:	301c      	adds	r0, #28
1a00295e:	f7fe f837 	bl	1a0009d0 <st_dword>
					fs->wflag = 1;
1a002962:	9b03      	ldr	r3, [sp, #12]
1a002964:	2201      	movs	r2, #1
1a002966:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
1a002968:	f1b8 0f00 	cmp.w	r8, #0
1a00296c:	d068      	beq.n	1a002a40 <f_open+0x184>
						dw = fs->winsect;
1a00296e:	9b03      	ldr	r3, [sp, #12]
1a002970:	6b5e      	ldr	r6, [r3, #52]	; 0x34
						res = remove_chain(&dj.obj, cl, 0);
1a002972:	2200      	movs	r2, #0
1a002974:	4641      	mov	r1, r8
1a002976:	a804      	add	r0, sp, #16
1a002978:	f7ff f8a8 	bl	1a001acc <remove_chain>
						if (res == FR_OK) {
1a00297c:	4605      	mov	r5, r0
1a00297e:	2800      	cmp	r0, #0
1a002980:	d15e      	bne.n	1a002a40 <f_open+0x184>
							res = move_window(fs, dw);
1a002982:	4631      	mov	r1, r6
1a002984:	9803      	ldr	r0, [sp, #12]
1a002986:	f7fe fab3 	bl	1a000ef0 <move_window>
1a00298a:	4605      	mov	r5, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
1a00298c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a002990:	9a03      	ldr	r2, [sp, #12]
1a002992:	6153      	str	r3, [r2, #20]
1a002994:	e054      	b.n	1a002a40 <f_open+0x184>
				res = FR_INVALID_NAME;
1a002996:	2506      	movs	r5, #6
1a002998:	e7b5      	b.n	1a002906 <f_open+0x4a>
					res = dir_register(&dj);
1a00299a:	a804      	add	r0, sp, #16
1a00299c:	f7ff fe1c 	bl	1a0025d8 <dir_register>
1a0029a0:	4605      	mov	r5, r0
1a0029a2:	e7b8      	b.n	1a002916 <f_open+0x5a>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
1a0029a4:	f89d 3016 	ldrb.w	r3, [sp, #22]
1a0029a8:	f013 0f11 	tst.w	r3, #17
1a0029ac:	d147      	bne.n	1a002a3e <f_open+0x182>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
1a0029ae:	f016 0f04 	tst.w	r6, #4
1a0029b2:	d0b2      	beq.n	1a00291a <f_open+0x5e>
1a0029b4:	2508      	movs	r5, #8
1a0029b6:	e043      	b.n	1a002a40 <f_open+0x184>
					fp->obj.fs = fs;
1a0029b8:	6020      	str	r0, [r4, #0]
					init_alloc_info(fs, &fp->obj);
1a0029ba:	4621      	mov	r1, r4
1a0029bc:	9803      	ldr	r0, [sp, #12]
1a0029be:	f7fe f9db 	bl	1a000d78 <init_alloc_info>
					mem_set(fs->dirbuf + 2, 0, 30);		/* Clear 85 entry except for NumSec */
1a0029c2:	9b03      	ldr	r3, [sp, #12]
1a0029c4:	6918      	ldr	r0, [r3, #16]
1a0029c6:	221e      	movs	r2, #30
1a0029c8:	2100      	movs	r1, #0
1a0029ca:	3002      	adds	r0, #2
1a0029cc:	f7fe f826 	bl	1a000a1c <mem_set>
					mem_set(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
1a0029d0:	9b03      	ldr	r3, [sp, #12]
1a0029d2:	6918      	ldr	r0, [r3, #16]
1a0029d4:	221a      	movs	r2, #26
1a0029d6:	2100      	movs	r1, #0
1a0029d8:	3026      	adds	r0, #38	; 0x26
1a0029da:	f7fe f81f 	bl	1a000a1c <mem_set>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
1a0029de:	9b03      	ldr	r3, [sp, #12]
1a0029e0:	691a      	ldr	r2, [r3, #16]
1a0029e2:	2120      	movs	r1, #32
1a0029e4:	7111      	strb	r1, [r2, #4]
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
1a0029e6:	691d      	ldr	r5, [r3, #16]
1a0029e8:	f002 ff76 	bl	1a0058d8 <get_fattime>
1a0029ec:	4601      	mov	r1, r0
1a0029ee:	f105 0008 	add.w	r0, r5, #8
1a0029f2:	f7fd ffed 	bl	1a0009d0 <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 1;
1a0029f6:	9b03      	ldr	r3, [sp, #12]
1a0029f8:	691b      	ldr	r3, [r3, #16]
1a0029fa:	2201      	movs	r2, #1
1a0029fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					res = store_xdir(&dj);
1a002a00:	a804      	add	r0, sp, #16
1a002a02:	f7ff fae1 	bl	1a001fc8 <store_xdir>
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
1a002a06:	4605      	mov	r5, r0
1a002a08:	b9d0      	cbnz	r0, 1a002a40 <f_open+0x184>
1a002a0a:	68a1      	ldr	r1, [r4, #8]
1a002a0c:	b1c1      	cbz	r1, 1a002a40 <f_open+0x184>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
1a002a0e:	2200      	movs	r2, #0
1a002a10:	4620      	mov	r0, r4
1a002a12:	f7ff f85b 	bl	1a001acc <remove_chain>
1a002a16:	4605      	mov	r5, r0
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
1a002a18:	68a3      	ldr	r3, [r4, #8]
1a002a1a:	3b01      	subs	r3, #1
1a002a1c:	9a03      	ldr	r2, [sp, #12]
1a002a1e:	6153      	str	r3, [r2, #20]
1a002a20:	e00e      	b.n	1a002a40 <f_open+0x184>
			if (res == FR_OK) {					/* Is the object exsiting? */
1a002a22:	b96d      	cbnz	r5, 1a002a40 <f_open+0x184>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
1a002a24:	f89d 3016 	ldrb.w	r3, [sp, #22]
1a002a28:	f013 0f10 	tst.w	r3, #16
1a002a2c:	d14e      	bne.n	1a002acc <f_open+0x210>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
1a002a2e:	f016 0f02 	tst.w	r6, #2
1a002a32:	d005      	beq.n	1a002a40 <f_open+0x184>
1a002a34:	f013 0f01 	tst.w	r3, #1
1a002a38:	d002      	beq.n	1a002a40 <f_open+0x184>
						res = FR_DENIED;
1a002a3a:	2507      	movs	r5, #7
1a002a3c:	e00b      	b.n	1a002a56 <f_open+0x19a>
					res = FR_DENIED;
1a002a3e:	2507      	movs	r5, #7
		if (res == FR_OK) {
1a002a40:	b94d      	cbnz	r5, 1a002a56 <f_open+0x19a>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
1a002a42:	f017 0f08 	tst.w	r7, #8
1a002a46:	d001      	beq.n	1a002a4c <f_open+0x190>
1a002a48:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
1a002a4c:	9b03      	ldr	r3, [sp, #12]
1a002a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1a002a50:	64a3      	str	r3, [r4, #72]	; 0x48
			fp->dir_ptr = dj.dir;
1a002a52:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a002a54:	64e3      	str	r3, [r4, #76]	; 0x4c
		if (res == FR_OK) {
1a002a56:	2d00      	cmp	r5, #0
1a002a58:	f47f af42 	bne.w	1a0028e0 <f_open+0x24>
			if (fs->fs_type == FS_EXFAT) {
1a002a5c:	9803      	ldr	r0, [sp, #12]
1a002a5e:	7803      	ldrb	r3, [r0, #0]
1a002a60:	2b04      	cmp	r3, #4
1a002a62:	d035      	beq.n	1a002ad0 <f_open+0x214>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
1a002a64:	9e13      	ldr	r6, [sp, #76]	; 0x4c
1a002a66:	4631      	mov	r1, r6
1a002a68:	f7fe f862 	bl	1a000b30 <ld_clust>
1a002a6c:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
1a002a6e:	f106 001c 	add.w	r0, r6, #28
1a002a72:	f7fd ff4a 	bl	1a00090a <ld_dword>
1a002a76:	6120      	str	r0, [r4, #16]
1a002a78:	2300      	movs	r3, #0
1a002a7a:	6163      	str	r3, [r4, #20]
			fp->obj.fs = fs;	 	/* Validate the file object */
1a002a7c:	9b03      	ldr	r3, [sp, #12]
1a002a7e:	6023      	str	r3, [r4, #0]
			fp->obj.id = fs->id;
1a002a80:	88db      	ldrh	r3, [r3, #6]
1a002a82:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
1a002a84:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
1a002a88:	2100      	movs	r1, #0
1a002a8a:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
1a002a8e:	6461      	str	r1, [r4, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
1a002a90:	2200      	movs	r2, #0
1a002a92:	2300      	movs	r3, #0
1a002a94:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
			mem_set(fp->buf, 0, FF_MAX_SS);	/* Clear sector buffer */
1a002a98:	f104 0a50 	add.w	sl, r4, #80	; 0x50
1a002a9c:	f44f 7200 	mov.w	r2, #512	; 0x200
1a002aa0:	4650      	mov	r0, sl
1a002aa2:	f7fd ffbb 	bl	1a000a1c <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
1a002aa6:	f017 0f20 	tst.w	r7, #32
1a002aaa:	f43f af19 	beq.w	1a0028e0 <f_open+0x24>
1a002aae:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
1a002ab2:	ea56 0307 	orrs.w	r3, r6, r7
1a002ab6:	f43f af13 	beq.w	1a0028e0 <f_open+0x24>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
1a002aba:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
1a002abe:	9b03      	ldr	r3, [sp, #12]
1a002ac0:	f8b3 b00a 	ldrh.w	fp, [r3, #10]
1a002ac4:	ea4f 2b4b 	mov.w	fp, fp, lsl #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
1a002ac8:	68a1      	ldr	r1, [r4, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
1a002aca:	e017      	b.n	1a002afc <f_open+0x240>
					res = FR_NO_FILE;
1a002acc:	2504      	movs	r5, #4
1a002ace:	e7c2      	b.n	1a002a56 <f_open+0x19a>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
1a002ad0:	9b06      	ldr	r3, [sp, #24]
1a002ad2:	6223      	str	r3, [r4, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
1a002ad4:	9b08      	ldr	r3, [sp, #32]
1a002ad6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002ada:	f89d 2017 	ldrb.w	r2, [sp, #23]
1a002ade:	4313      	orrs	r3, r2
1a002ae0:	6263      	str	r3, [r4, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
1a002ae2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1a002ae4:	62a3      	str	r3, [r4, #40]	; 0x28
				init_alloc_info(fs, &fp->obj);
1a002ae6:	4621      	mov	r1, r4
1a002ae8:	f7fe f946 	bl	1a000d78 <init_alloc_info>
1a002aec:	e7c6      	b.n	1a002a7c <f_open+0x1c0>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
1a002aee:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
1a002af2:	d013      	beq.n	1a002b1c <f_open+0x260>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
1a002af4:	ebb6 0608 	subs.w	r6, r6, r8
1a002af8:	eb67 0709 	sbc.w	r7, r7, r9
1a002afc:	b985      	cbnz	r5, 1a002b20 <f_open+0x264>
1a002afe:	46d8      	mov	r8, fp
1a002b00:	f04f 0900 	mov.w	r9, #0
1a002b04:	45b9      	cmp	r9, r7
1a002b06:	bf08      	it	eq
1a002b08:	45b3      	cmpeq	fp, r6
1a002b0a:	d209      	bcs.n	1a002b20 <f_open+0x264>
					clst = get_fat(&fp->obj, clst);
1a002b0c:	4620      	mov	r0, r4
1a002b0e:	f7fe fde4 	bl	1a0016da <get_fat>
1a002b12:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
1a002b14:	2801      	cmp	r0, #1
1a002b16:	d8ea      	bhi.n	1a002aee <f_open+0x232>
1a002b18:	2502      	movs	r5, #2
1a002b1a:	e7e8      	b.n	1a002aee <f_open+0x232>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
1a002b1c:	2501      	movs	r5, #1
1a002b1e:	e7e9      	b.n	1a002af4 <f_open+0x238>
				fp->clust = clst;
1a002b20:	6421      	str	r1, [r4, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
1a002b22:	2d00      	cmp	r5, #0
1a002b24:	f47f aedc 	bne.w	1a0028e0 <f_open+0x24>
1a002b28:	f240 12ff 	movw	r2, #511	; 0x1ff
1a002b2c:	2300      	movs	r3, #0
1a002b2e:	ea02 0806 	and.w	r8, r2, r6
1a002b32:	ea03 0907 	and.w	r9, r3, r7
1a002b36:	ea58 0309 	orrs.w	r3, r8, r9
1a002b3a:	f43f aed1 	beq.w	1a0028e0 <f_open+0x24>
					if ((sc = clst2sect(fs, clst)) == 0) {
1a002b3e:	f8dd 800c 	ldr.w	r8, [sp, #12]
1a002b42:	4640      	mov	r0, r8
1a002b44:	f7fd ffe8 	bl	1a000b18 <clst2sect>
1a002b48:	4602      	mov	r2, r0
1a002b4a:	b908      	cbnz	r0, 1a002b50 <f_open+0x294>
						res = FR_INT_ERR;
1a002b4c:	2502      	movs	r5, #2
1a002b4e:	e6c8      	b.n	1a0028e2 <f_open+0x26>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
1a002b50:	0a73      	lsrs	r3, r6, #9
1a002b52:	ea43 53c7 	orr.w	r3, r3, r7, lsl #23
1a002b56:	441a      	add	r2, r3
1a002b58:	6462      	str	r2, [r4, #68]	; 0x44
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
1a002b5a:	2301      	movs	r3, #1
1a002b5c:	4651      	mov	r1, sl
1a002b5e:	f898 0001 	ldrb.w	r0, [r8, #1]
1a002b62:	f002 fee9 	bl	1a005938 <disk_read>
1a002b66:	2800      	cmp	r0, #0
1a002b68:	f43f aeba 	beq.w	1a0028e0 <f_open+0x24>
1a002b6c:	2501      	movs	r5, #1
1a002b6e:	e6b8      	b.n	1a0028e2 <f_open+0x26>
	if (!fp) return FR_INVALID_OBJECT;
1a002b70:	2509      	movs	r5, #9
1a002b72:	e6b8      	b.n	1a0028e6 <f_open+0x2a>

1a002b74 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
1a002b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002b78:	b085      	sub	sp, #20
1a002b7a:	4604      	mov	r4, r0
1a002b7c:	460e      	mov	r6, r1
1a002b7e:	4615      	mov	r5, r2
1a002b80:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
1a002b82:	2300      	movs	r3, #0
1a002b84:	603b      	str	r3, [r7, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
1a002b86:	9000      	str	r0, [sp, #0]
1a002b88:	a903      	add	r1, sp, #12
1a002b8a:	f7fe f965 	bl	1a000e58 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
1a002b8e:	4680      	mov	r8, r0
1a002b90:	2800      	cmp	r0, #0
1a002b92:	f040 80f1 	bne.w	1a002d78 <f_write+0x204>
1a002b96:	f894 8031 	ldrb.w	r8, [r4, #49]	; 0x31
1a002b9a:	f1b8 0f00 	cmp.w	r8, #0
1a002b9e:	f040 80eb 	bne.w	1a002d78 <f_write+0x204>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
1a002ba2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a002ba6:	f013 0f02 	tst.w	r3, #2
1a002baa:	f000 8100 	beq.w	1a002dae <f_write+0x23a>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
1a002bae:	9b03      	ldr	r3, [sp, #12]
1a002bb0:	781b      	ldrb	r3, [r3, #0]
1a002bb2:	2b04      	cmp	r3, #4
1a002bb4:	f000 808a 	beq.w	1a002ccc <f_write+0x158>
1a002bb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a002bba:	42eb      	cmn	r3, r5
1a002bbc:	f0c0 8086 	bcc.w	1a002ccc <f_write+0x158>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
1a002bc0:	43dd      	mvns	r5, r3
1a002bc2:	e083      	b.n	1a002ccc <f_write+0x158>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
			if (csect == 0) {				/* On the cluster boundary? */
				if (fp->fptr == 0) {		/* On the top of the file? */
					clst = fp->obj.sclust;	/* Follow from the origin */
					if (clst == 0) {		/* If no cluster is allocated, */
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
1a002bc4:	2100      	movs	r1, #0
1a002bc6:	9800      	ldr	r0, [sp, #0]
1a002bc8:	f7fe fe9a 	bl	1a001900 <create_chain>
1a002bcc:	e09e      	b.n	1a002d0c <f_write+0x198>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
1a002bce:	6c21      	ldr	r1, [r4, #64]	; 0x40
1a002bd0:	9800      	ldr	r0, [sp, #0]
1a002bd2:	f7fe fe95 	bl	1a001900 <create_chain>
1a002bd6:	e099      	b.n	1a002d0c <f_write+0x198>
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fs, FR_INT_ERR);
1a002bd8:	f04f 0802 	mov.w	r8, #2
1a002bdc:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
1a002be0:	e0ca      	b.n	1a002d78 <f_write+0x204>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
1a002be2:	f04f 0801 	mov.w	r8, #1
1a002be6:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
1a002bea:	e0c5      	b.n	1a002d78 <f_write+0x204>
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
1a002bec:	2301      	movs	r3, #1
1a002bee:	6c62      	ldr	r2, [r4, #68]	; 0x44
1a002bf0:	f104 0150 	add.w	r1, r4, #80	; 0x50
1a002bf4:	9803      	ldr	r0, [sp, #12]
1a002bf6:	7840      	ldrb	r0, [r0, #1]
1a002bf8:	f002 feae 	bl	1a005958 <disk_write>
1a002bfc:	b930      	cbnz	r0, 1a002c0c <f_write+0x98>
				fp->flag &= (BYTE)~FA_DIRTY;
1a002bfe:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a002c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1a002c06:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
1a002c0a:	e091      	b.n	1a002d30 <f_write+0x1bc>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
1a002c0c:	f04f 0801 	mov.w	r8, #1
1a002c10:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
1a002c14:	e0b0      	b.n	1a002d78 <f_write+0x204>
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
			if (sect == 0) ABORT(fs, FR_INT_ERR);
1a002c16:	f04f 0802 	mov.w	r8, #2
1a002c1a:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
1a002c1e:	e0ab      	b.n	1a002d78 <f_write+0x204>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
1a002c20:	6c61      	ldr	r1, [r4, #68]	; 0x44
1a002c22:	eba1 0109 	sub.w	r1, r1, r9
1a002c26:	4551      	cmp	r1, sl
1a002c28:	d302      	bcc.n	1a002c30 <f_write+0xbc>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
1a002c2a:	ea4f 294a 	mov.w	r9, sl, lsl #9
				continue;
1a002c2e:	e031      	b.n	1a002c94 <f_write+0x120>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
1a002c30:	f44f 7200 	mov.w	r2, #512	; 0x200
1a002c34:	eb06 2141 	add.w	r1, r6, r1, lsl #9
1a002c38:	f104 0050 	add.w	r0, r4, #80	; 0x50
1a002c3c:	f7fd fee5 	bl	1a000a0a <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
1a002c40:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a002c44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1a002c48:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
1a002c4c:	e7ed      	b.n	1a002c2a <f_write+0xb6>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
1a002c4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
1a002c50:	454b      	cmp	r3, r9
1a002c52:	d008      	beq.n	1a002c66 <f_write+0xf2>
				fp->fptr < fp->obj.objsize &&
1a002c54:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
1a002c58:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
1a002c5c:	4299      	cmp	r1, r3
1a002c5e:	bf08      	it	eq
1a002c60:	4290      	cmpeq	r0, r2
1a002c62:	f0c0 808d 	bcc.w	1a002d80 <f_write+0x20c>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
			}
#endif
			fp->sect = sect;
1a002c66:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
1a002c6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a002c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
1a002c70:	f5c3 7900 	rsb	r9, r3, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
1a002c74:	454d      	cmp	r5, r9
1a002c76:	d200      	bcs.n	1a002c7a <f_write+0x106>
1a002c78:	46a9      	mov	r9, r5
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
1a002c7a:	f104 0050 	add.w	r0, r4, #80	; 0x50
1a002c7e:	464a      	mov	r2, r9
1a002c80:	4631      	mov	r1, r6
1a002c82:	4418      	add	r0, r3
1a002c84:	f7fd fec1 	bl	1a000a0a <mem_cpy>
		fp->flag |= FA_DIRTY;
1a002c88:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a002c8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
1a002c90:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
1a002c94:	eba5 0509 	sub.w	r5, r5, r9
1a002c98:	683b      	ldr	r3, [r7, #0]
1a002c9a:	444b      	add	r3, r9
1a002c9c:	603b      	str	r3, [r7, #0]
1a002c9e:	444e      	add	r6, r9
1a002ca0:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
1a002ca4:	eb12 0a09 	adds.w	sl, r2, r9
1a002ca8:	f143 0b00 	adc.w	fp, r3, #0
1a002cac:	e9c4 ab0e 	strd	sl, fp, [r4, #56]	; 0x38
1a002cb0:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
1a002cb4:	46d6      	mov	lr, sl
1a002cb6:	46dc      	mov	ip, fp
1a002cb8:	458b      	cmp	fp, r1
1a002cba:	bf08      	it	eq
1a002cbc:	4582      	cmpeq	sl, r0
1a002cbe:	d201      	bcs.n	1a002cc4 <f_write+0x150>
1a002cc0:	4686      	mov	lr, r0
1a002cc2:	468c      	mov	ip, r1
1a002cc4:	f8c4 e010 	str.w	lr, [r4, #16]
1a002cc8:	f8c4 c014 	str.w	ip, [r4, #20]
	for ( ;  btw;							/* Repeat until all data written */
1a002ccc:	2d00      	cmp	r5, #0
1a002cce:	d067      	beq.n	1a002da0 <f_write+0x22c>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
1a002cd0:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
1a002cd4:	f240 12ff 	movw	r2, #511	; 0x1ff
1a002cd8:	2300      	movs	r3, #0
1a002cda:	ea02 0900 	and.w	r9, r2, r0
1a002cde:	ea03 0a01 	and.w	sl, r3, r1
1a002ce2:	ea59 030a 	orrs.w	r3, r9, sl
1a002ce6:	d1c0      	bne.n	1a002c6a <f_write+0xf6>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
1a002ce8:	ea4f 2b50 	mov.w	fp, r0, lsr #9
1a002cec:	ea4b 5bc1 	orr.w	fp, fp, r1, lsl #23
1a002cf0:	9b03      	ldr	r3, [sp, #12]
1a002cf2:	895b      	ldrh	r3, [r3, #10]
1a002cf4:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
1a002cf6:	ea1b 0b03 	ands.w	fp, fp, r3
1a002cfa:	d114      	bne.n	1a002d26 <f_write+0x1b2>
				if (fp->fptr == 0) {		/* On the top of the file? */
1a002cfc:	ea50 0301 	orrs.w	r3, r0, r1
1a002d00:	f47f af65 	bne.w	1a002bce <f_write+0x5a>
					clst = fp->obj.sclust;	/* Follow from the origin */
1a002d04:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
1a002d06:	2800      	cmp	r0, #0
1a002d08:	f43f af5c 	beq.w	1a002bc4 <f_write+0x50>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
1a002d0c:	2800      	cmp	r0, #0
1a002d0e:	d047      	beq.n	1a002da0 <f_write+0x22c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
1a002d10:	2801      	cmp	r0, #1
1a002d12:	f43f af61 	beq.w	1a002bd8 <f_write+0x64>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
1a002d16:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a002d1a:	f43f af62 	beq.w	1a002be2 <f_write+0x6e>
				fp->clust = clst;			/* Update current cluster */
1a002d1e:	6420      	str	r0, [r4, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
1a002d20:	68a3      	ldr	r3, [r4, #8]
1a002d22:	b903      	cbnz	r3, 1a002d26 <f_write+0x1b2>
1a002d24:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
1a002d26:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
1a002d2a:	2b00      	cmp	r3, #0
1a002d2c:	f6ff af5e 	blt.w	1a002bec <f_write+0x78>
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
1a002d30:	9b03      	ldr	r3, [sp, #12]
1a002d32:	9301      	str	r3, [sp, #4]
1a002d34:	6c21      	ldr	r1, [r4, #64]	; 0x40
1a002d36:	4618      	mov	r0, r3
1a002d38:	f7fd feee 	bl	1a000b18 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
1a002d3c:	4681      	mov	r9, r0
1a002d3e:	2800      	cmp	r0, #0
1a002d40:	f43f af69 	beq.w	1a002c16 <f_write+0xa2>
			sect += csect;
1a002d44:	44d9      	add	r9, fp
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
1a002d46:	ea5f 2a55 	movs.w	sl, r5, lsr #9
1a002d4a:	d080      	beq.n	1a002c4e <f_write+0xda>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
1a002d4c:	eb0b 030a 	add.w	r3, fp, sl
1a002d50:	9a01      	ldr	r2, [sp, #4]
1a002d52:	8952      	ldrh	r2, [r2, #10]
1a002d54:	4293      	cmp	r3, r2
1a002d56:	d901      	bls.n	1a002d5c <f_write+0x1e8>
					cc = fs->csize - csect;
1a002d58:	eba2 0a0b 	sub.w	sl, r2, fp
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
1a002d5c:	4653      	mov	r3, sl
1a002d5e:	464a      	mov	r2, r9
1a002d60:	4631      	mov	r1, r6
1a002d62:	9801      	ldr	r0, [sp, #4]
1a002d64:	7840      	ldrb	r0, [r0, #1]
1a002d66:	f002 fdf7 	bl	1a005958 <disk_write>
1a002d6a:	2800      	cmp	r0, #0
1a002d6c:	f43f af58 	beq.w	1a002c20 <f_write+0xac>
1a002d70:	f04f 0801 	mov.w	r8, #1
1a002d74:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
1a002d78:	4640      	mov	r0, r8
1a002d7a:	b005      	add	sp, #20
1a002d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
1a002d80:	2301      	movs	r3, #1
1a002d82:	464a      	mov	r2, r9
1a002d84:	f104 0150 	add.w	r1, r4, #80	; 0x50
1a002d88:	9801      	ldr	r0, [sp, #4]
1a002d8a:	7840      	ldrb	r0, [r0, #1]
1a002d8c:	f002 fdd4 	bl	1a005938 <disk_read>
				fp->fptr < fp->obj.objsize &&
1a002d90:	2800      	cmp	r0, #0
1a002d92:	f43f af68 	beq.w	1a002c66 <f_write+0xf2>
					ABORT(fs, FR_DISK_ERR);
1a002d96:	f04f 0801 	mov.w	r8, #1
1a002d9a:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
1a002d9e:	e7eb      	b.n	1a002d78 <f_write+0x204>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
1a002da0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a002da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002da8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	LEAVE_FF(fs, FR_OK);
1a002dac:	e7e4      	b.n	1a002d78 <f_write+0x204>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
1a002dae:	f04f 0807 	mov.w	r8, #7
1a002db2:	e7e1      	b.n	1a002d78 <f_write+0x204>

1a002db4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
1a002db4:	b570      	push	{r4, r5, r6, lr}
1a002db6:	b096      	sub	sp, #88	; 0x58
1a002db8:	4604      	mov	r4, r0
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
1a002dba:	a915      	add	r1, sp, #84	; 0x54
1a002dbc:	f7fe f84c 	bl	1a000e58 <validate>
	if (res == FR_OK) {
1a002dc0:	4603      	mov	r3, r0
1a002dc2:	b9a0      	cbnz	r0, 1a002dee <f_sync+0x3a>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
1a002dc4:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
1a002dc8:	f012 0f40 	tst.w	r2, #64	; 0x40
1a002dcc:	d00f      	beq.n	1a002dee <f_sync+0x3a>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
1a002dce:	f012 0f80 	tst.w	r2, #128	; 0x80
1a002dd2:	d10f      	bne.n	1a002df4 <f_sync+0x40>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
1a002dd4:	f002 fd80 	bl	1a0058d8 <get_fattime>
1a002dd8:	4606      	mov	r6, r0
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
1a002dda:	9815      	ldr	r0, [sp, #84]	; 0x54
1a002ddc:	7803      	ldrb	r3, [r0, #0]
1a002dde:	2b04      	cmp	r3, #4
1a002de0:	d01a      	beq.n	1a002e18 <f_sync+0x64>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
1a002de2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
1a002de4:	f7fe f884 	bl	1a000ef0 <move_window>
				if (res == FR_OK) {
1a002de8:	4603      	mov	r3, r0
1a002dea:	2800      	cmp	r0, #0
1a002dec:	d069      	beq.n	1a002ec2 <f_sync+0x10e>
			}
		}
	}

	LEAVE_FF(fs, res);
}
1a002dee:	4618      	mov	r0, r3
1a002df0:	b016      	add	sp, #88	; 0x58
1a002df2:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
1a002df4:	2301      	movs	r3, #1
1a002df6:	6c62      	ldr	r2, [r4, #68]	; 0x44
1a002df8:	f104 0150 	add.w	r1, r4, #80	; 0x50
1a002dfc:	9815      	ldr	r0, [sp, #84]	; 0x54
1a002dfe:	7840      	ldrb	r0, [r0, #1]
1a002e00:	f002 fdaa 	bl	1a005958 <disk_write>
1a002e04:	2800      	cmp	r0, #0
1a002e06:	f040 8083 	bne.w	1a002f10 <f_sync+0x15c>
				fp->flag &= (BYTE)~FA_DIRTY;
1a002e0a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a002e0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1a002e12:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
1a002e16:	e7dd      	b.n	1a002dd4 <f_sync+0x20>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
1a002e18:	4620      	mov	r0, r4
1a002e1a:	f7fe fc45 	bl	1a0016a8 <fill_first_frag>
				if (res == FR_OK) {
1a002e1e:	4603      	mov	r3, r0
1a002e20:	2800      	cmp	r0, #0
1a002e22:	d046      	beq.n	1a002eb2 <f_sync+0xfe>
				if (res == FR_OK) {
1a002e24:	2b00      	cmp	r3, #0
1a002e26:	d1e2      	bne.n	1a002dee <f_sync+0x3a>
					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
1a002e28:	4621      	mov	r1, r4
1a002e2a:	4668      	mov	r0, sp
1a002e2c:	f7ff f804 	bl	1a001e38 <load_obj_xdir>
					if (res == FR_OK) {
1a002e30:	4603      	mov	r3, r0
1a002e32:	2800      	cmp	r0, #0
1a002e34:	d1db      	bne.n	1a002dee <f_sync+0x3a>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
1a002e36:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a002e38:	6919      	ldr	r1, [r3, #16]
1a002e3a:	790a      	ldrb	r2, [r1, #4]
1a002e3c:	f042 0220 	orr.w	r2, r2, #32
1a002e40:	710a      	strb	r2, [r1, #4]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
1a002e42:	79e2      	ldrb	r2, [r4, #7]
1a002e44:	6919      	ldr	r1, [r3, #16]
1a002e46:	f042 0201 	orr.w	r2, r2, #1
1a002e4a:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
1a002e4e:	6918      	ldr	r0, [r3, #16]
1a002e50:	68a1      	ldr	r1, [r4, #8]
1a002e52:	3034      	adds	r0, #52	; 0x34
1a002e54:	f7fd fdbc 	bl	1a0009d0 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
1a002e58:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a002e5a:	6918      	ldr	r0, [r3, #16]
1a002e5c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
1a002e60:	3038      	adds	r0, #56	; 0x38
1a002e62:	f7fd fdbf 	bl	1a0009e4 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
1a002e66:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a002e68:	6918      	ldr	r0, [r3, #16]
1a002e6a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
1a002e6e:	3028      	adds	r0, #40	; 0x28
1a002e70:	f7fd fdb8 	bl	1a0009e4 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
1a002e74:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a002e76:	6918      	ldr	r0, [r3, #16]
1a002e78:	4631      	mov	r1, r6
1a002e7a:	300c      	adds	r0, #12
1a002e7c:	f7fd fda8 	bl	1a0009d0 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
1a002e80:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a002e82:	691a      	ldr	r2, [r3, #16]
1a002e84:	2100      	movs	r1, #0
1a002e86:	7551      	strb	r1, [r2, #21]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
1a002e88:	6918      	ldr	r0, [r3, #16]
1a002e8a:	3010      	adds	r0, #16
1a002e8c:	f7fd fda0 	bl	1a0009d0 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
1a002e90:	4668      	mov	r0, sp
1a002e92:	f7ff f899 	bl	1a001fc8 <store_xdir>
						if (res == FR_OK) {
1a002e96:	4603      	mov	r3, r0
1a002e98:	2800      	cmp	r0, #0
1a002e9a:	d1a8      	bne.n	1a002dee <f_sync+0x3a>
							res = sync_fs(fs);
1a002e9c:	9815      	ldr	r0, [sp, #84]	; 0x54
1a002e9e:	f7ff fc9f 	bl	1a0027e0 <sync_fs>
1a002ea2:	4603      	mov	r3, r0
							fp->flag &= (BYTE)~FA_MODIFIED;
1a002ea4:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
1a002ea8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
1a002eac:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
1a002eb0:	e79d      	b.n	1a002dee <f_sync+0x3a>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
1a002eb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a002eb6:	6c21      	ldr	r1, [r4, #64]	; 0x40
1a002eb8:	4620      	mov	r0, r4
1a002eba:	f7fe fbdd 	bl	1a001678 <fill_last_frag>
1a002ebe:	4603      	mov	r3, r0
1a002ec0:	e7b0      	b.n	1a002e24 <f_sync+0x70>
					dir = fp->dir_ptr;
1a002ec2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
1a002ec4:	7aeb      	ldrb	r3, [r5, #11]
1a002ec6:	f043 0320 	orr.w	r3, r3, #32
1a002eca:	72eb      	strb	r3, [r5, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
1a002ecc:	68a2      	ldr	r2, [r4, #8]
1a002ece:	4629      	mov	r1, r5
1a002ed0:	6820      	ldr	r0, [r4, #0]
1a002ed2:	f7fd fe40 	bl	1a000b56 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
1a002ed6:	6921      	ldr	r1, [r4, #16]
1a002ed8:	f105 001c 	add.w	r0, r5, #28
1a002edc:	f7fd fd78 	bl	1a0009d0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
1a002ee0:	4631      	mov	r1, r6
1a002ee2:	f105 0016 	add.w	r0, r5, #22
1a002ee6:	f7fd fd73 	bl	1a0009d0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
1a002eea:	2100      	movs	r1, #0
1a002eec:	f105 0012 	add.w	r0, r5, #18
1a002ef0:	f7fd fd6a 	bl	1a0009c8 <st_word>
					fs->wflag = 1;
1a002ef4:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a002ef6:	2201      	movs	r2, #1
1a002ef8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
1a002efa:	9815      	ldr	r0, [sp, #84]	; 0x54
1a002efc:	f7ff fc70 	bl	1a0027e0 <sync_fs>
1a002f00:	4603      	mov	r3, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
1a002f02:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
1a002f06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
1a002f0a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
1a002f0e:	e76e      	b.n	1a002dee <f_sync+0x3a>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
1a002f10:	2301      	movs	r3, #1
1a002f12:	e76c      	b.n	1a002dee <f_sync+0x3a>

1a002f14 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
1a002f14:	b510      	push	{r4, lr}
1a002f16:	b082      	sub	sp, #8
1a002f18:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
1a002f1a:	f7ff ff4b 	bl	1a002db4 <f_sync>
	if (res == FR_OK)
1a002f1e:	4603      	mov	r3, r0
1a002f20:	b110      	cbz	r0, 1a002f28 <f_close+0x14>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
1a002f22:	4618      	mov	r0, r3
1a002f24:	b002      	add	sp, #8
1a002f26:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
1a002f28:	a901      	add	r1, sp, #4
1a002f2a:	4620      	mov	r0, r4
1a002f2c:	f7fd ff94 	bl	1a000e58 <validate>
		if (res == FR_OK) {
1a002f30:	4603      	mov	r3, r0
1a002f32:	2800      	cmp	r0, #0
1a002f34:	d1f5      	bne.n	1a002f22 <f_close+0xe>
			fp->obj.fs = 0;	/* Invalidate file object */
1a002f36:	2200      	movs	r2, #0
1a002f38:	6022      	str	r2, [r4, #0]
1a002f3a:	e7f2      	b.n	1a002f22 <f_close+0xe>

1a002f3c <ff_uni2oem>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
1a002f3c:	287f      	cmp	r0, #127	; 0x7f
1a002f3e:	d908      	bls.n	1a002f52 <ff_uni2oem+0x16>
		c = (WCHAR)uni;

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
1a002f40:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
1a002f44:	d215      	bcs.n	1a002f72 <ff_uni2oem+0x36>
1a002f46:	f240 3352 	movw	r3, #850	; 0x352
1a002f4a:	4299      	cmp	r1, r3
1a002f4c:	d003      	beq.n	1a002f56 <ff_uni2oem+0x1a>
	WCHAR c = 0;
1a002f4e:	2000      	movs	r0, #0
1a002f50:	4770      	bx	lr
		c = (WCHAR)uni;
1a002f52:	b280      	uxth	r0, r0
1a002f54:	4770      	bx	lr
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
1a002f56:	2300      	movs	r3, #0
1a002f58:	2b7f      	cmp	r3, #127	; 0x7f
1a002f5a:	d807      	bhi.n	1a002f6c <ff_uni2oem+0x30>
1a002f5c:	4a06      	ldr	r2, [pc, #24]	; (1a002f78 <ff_uni2oem+0x3c>)
1a002f5e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
1a002f62:	4282      	cmp	r2, r0
1a002f64:	d002      	beq.n	1a002f6c <ff_uni2oem+0x30>
1a002f66:	3301      	adds	r3, #1
1a002f68:	b29b      	uxth	r3, r3
1a002f6a:	e7f5      	b.n	1a002f58 <ff_uni2oem+0x1c>
			c = (c + 0x80) & 0xFF;
1a002f6c:	3380      	adds	r3, #128	; 0x80
1a002f6e:	b2d8      	uxtb	r0, r3
1a002f70:	4770      	bx	lr
	WCHAR c = 0;
1a002f72:	2000      	movs	r0, #0
		}
	}

	return c;
}
1a002f74:	4770      	bx	lr
1a002f76:	bf00      	nop
1a002f78:	1a0087b0 	.word	0x1a0087b0

1a002f7c <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
1a002f7c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
1a002f80:	d245      	bcs.n	1a00300e <ff_wtoupper+0x92>
{
1a002f82:	b4f0      	push	{r4, r5, r6, r7}
		uc = (WORD)uni;
1a002f84:	b287      	uxth	r7, r0
		p = uc < 0x1000 ? cvt1 : cvt2;
1a002f86:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
1a002f8a:	d201      	bcs.n	1a002f90 <ff_wtoupper+0x14>
1a002f8c:	4b20      	ldr	r3, [pc, #128]	; (1a003010 <ff_wtoupper+0x94>)
1a002f8e:	e002      	b.n	1a002f96 <ff_wtoupper+0x1a>
1a002f90:	4b20      	ldr	r3, [pc, #128]	; (1a003014 <ff_wtoupper+0x98>)
1a002f92:	e000      	b.n	1a002f96 <ff_wtoupper+0x1a>
		for (;;) {
			bc = *p++;								/* Get the block base */
			if (bc == 0 || uc < bc) break;			/* Not matched? */
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
1a002f94:	4633      	mov	r3, r6
			bc = *p++;								/* Get the block base */
1a002f96:	881a      	ldrh	r2, [r3, #0]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
1a002f98:	b1d2      	cbz	r2, 1a002fd0 <ff_wtoupper+0x54>
1a002f9a:	4297      	cmp	r7, r2
1a002f9c:	d318      	bcc.n	1a002fd0 <ff_wtoupper+0x54>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
1a002f9e:	1d1e      	adds	r6, r3, #4
1a002fa0:	885b      	ldrh	r3, [r3, #2]
1a002fa2:	0a19      	lsrs	r1, r3, #8
1a002fa4:	b2db      	uxtb	r3, r3
			if (uc < bc + nc) {	/* In the block? */
1a002fa6:	b284      	uxth	r4, r0
1a002fa8:	189d      	adds	r5, r3, r2
1a002faa:	42ac      	cmp	r4, r5
1a002fac:	db04      	blt.n	1a002fb8 <ff_wtoupper+0x3c>
				case 7: uc -= 80; break;			/* Shift -80 */
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
1a002fae:	2900      	cmp	r1, #0
1a002fb0:	d1f0      	bne.n	1a002f94 <ff_wtoupper+0x18>
1a002fb2:	eb06 0343 	add.w	r3, r6, r3, lsl #1
1a002fb6:	e7ee      	b.n	1a002f96 <ff_wtoupper+0x1a>
				switch (cmd) {
1a002fb8:	2908      	cmp	r1, #8
1a002fba:	d809      	bhi.n	1a002fd0 <ff_wtoupper+0x54>
1a002fbc:	e8df f001 	tbb	[pc, r1]
1a002fc0:	14110b05 	.word	0x14110b05
1a002fc4:	201d1a17 	.word	0x201d1a17
1a002fc8:	23          	.byte	0x23
1a002fc9:	00          	.byte	0x00
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
1a002fca:	1aa4      	subs	r4, r4, r2
1a002fcc:	f836 7014 	ldrh.w	r7, [r6, r4, lsl #1]
		}
		uni = uc;
1a002fd0:	4638      	mov	r0, r7
	}

	return uni;
}
1a002fd2:	bcf0      	pop	{r4, r5, r6, r7}
1a002fd4:	4770      	bx	lr
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
1a002fd6:	1aba      	subs	r2, r7, r2
1a002fd8:	f002 0301 	and.w	r3, r2, #1
1a002fdc:	1aff      	subs	r7, r7, r3
1a002fde:	b2bf      	uxth	r7, r7
1a002fe0:	e7f6      	b.n	1a002fd0 <ff_wtoupper+0x54>
				case 2: uc -= 16; break;			/* Shift -16 */
1a002fe2:	3f10      	subs	r7, #16
1a002fe4:	b2bf      	uxth	r7, r7
1a002fe6:	e7f3      	b.n	1a002fd0 <ff_wtoupper+0x54>
				case 3:	uc -= 32; break;			/* Shift -32 */
1a002fe8:	3f20      	subs	r7, #32
1a002fea:	b2bf      	uxth	r7, r7
1a002fec:	e7f0      	b.n	1a002fd0 <ff_wtoupper+0x54>
				case 4:	uc -= 48; break;			/* Shift -48 */
1a002fee:	3f30      	subs	r7, #48	; 0x30
1a002ff0:	b2bf      	uxth	r7, r7
1a002ff2:	e7ed      	b.n	1a002fd0 <ff_wtoupper+0x54>
				case 5:	uc -= 26; break;			/* Shift -26 */
1a002ff4:	3f1a      	subs	r7, #26
1a002ff6:	b2bf      	uxth	r7, r7
1a002ff8:	e7ea      	b.n	1a002fd0 <ff_wtoupper+0x54>
				case 6:	uc += 8; break;				/* Shift +8 */
1a002ffa:	3708      	adds	r7, #8
1a002ffc:	b2bf      	uxth	r7, r7
1a002ffe:	e7e7      	b.n	1a002fd0 <ff_wtoupper+0x54>
				case 7: uc -= 80; break;			/* Shift -80 */
1a003000:	3f50      	subs	r7, #80	; 0x50
1a003002:	b2bf      	uxth	r7, r7
1a003004:	e7e4      	b.n	1a002fd0 <ff_wtoupper+0x54>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
1a003006:	f5a7 57e3 	sub.w	r7, r7, #7264	; 0x1c60
1a00300a:	b2bf      	uxth	r7, r7
1a00300c:	e7e0      	b.n	1a002fd0 <ff_wtoupper+0x54>
}
1a00300e:	4770      	bx	lr
1a003010:	1a008500 	.word	0x1a008500
1a003014:	1a0086f4 	.word	0x1a0086f4

1a003018 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
1a003018:	4a12      	ldr	r2, [pc, #72]	; (1a003064 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
1a00301a:	f012 0f07 	tst.w	r2, #7
1a00301e:	d01e      	beq.n	1a00305e <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
1a003020:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a003022:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
1a003026:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
1a00302a:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a00302c:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1a00302e:	480e      	ldr	r0, [pc, #56]	; (1a003068 <prvHeapInit+0x50>)
1a003030:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
1a003032:	2100      	movs	r1, #0
1a003034:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
1a003036:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
1a003038:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a00303a:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
1a00303e:	480b      	ldr	r0, [pc, #44]	; (1a00306c <prvHeapInit+0x54>)
1a003040:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
1a003042:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
1a003044:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
1a003046:	1a99      	subs	r1, r3, r2
1a003048:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
1a00304a:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a00304c:	4b08      	ldr	r3, [pc, #32]	; (1a003070 <prvHeapInit+0x58>)
1a00304e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a003050:	4b08      	ldr	r3, [pc, #32]	; (1a003074 <prvHeapInit+0x5c>)
1a003052:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
1a003054:	4b08      	ldr	r3, [pc, #32]	; (1a003078 <prvHeapInit+0x60>)
1a003056:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
1a00305a:	601a      	str	r2, [r3, #0]
}
1a00305c:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
1a00305e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
1a003062:	e7e4      	b.n	1a00302e <prvHeapInit+0x16>
1a003064:	10000a34 	.word	0x10000a34
1a003068:	10002a40 	.word	0x10002a40
1a00306c:	10000a30 	.word	0x10000a30
1a003070:	10002a3c 	.word	0x10002a3c
1a003074:	10002a38 	.word	0x10002a38
1a003078:	10002a34 	.word	0x10002a34

1a00307c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
1a00307c:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a00307e:	4b13      	ldr	r3, [pc, #76]	; (1a0030cc <prvInsertBlockIntoFreeList+0x50>)
1a003080:	681a      	ldr	r2, [r3, #0]
1a003082:	4282      	cmp	r2, r0
1a003084:	d31b      	bcc.n	1a0030be <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
1a003086:	6859      	ldr	r1, [r3, #4]
1a003088:	185c      	adds	r4, r3, r1
1a00308a:	4284      	cmp	r4, r0
1a00308c:	d103      	bne.n	1a003096 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
1a00308e:	6840      	ldr	r0, [r0, #4]
1a003090:	4401      	add	r1, r0
1a003092:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
1a003094:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
1a003096:	6841      	ldr	r1, [r0, #4]
1a003098:	1844      	adds	r4, r0, r1
1a00309a:	42a2      	cmp	r2, r4
1a00309c:	d113      	bne.n	1a0030c6 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
1a00309e:	4c0c      	ldr	r4, [pc, #48]	; (1a0030d0 <prvInsertBlockIntoFreeList+0x54>)
1a0030a0:	6824      	ldr	r4, [r4, #0]
1a0030a2:	42a2      	cmp	r2, r4
1a0030a4:	d00d      	beq.n	1a0030c2 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
1a0030a6:	6852      	ldr	r2, [r2, #4]
1a0030a8:	4411      	add	r1, r2
1a0030aa:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
1a0030ac:	681a      	ldr	r2, [r3, #0]
1a0030ae:	6812      	ldr	r2, [r2, #0]
1a0030b0:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
1a0030b2:	4298      	cmp	r0, r3
1a0030b4:	d000      	beq.n	1a0030b8 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
1a0030b6:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a0030b8:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0030bc:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a0030be:	4613      	mov	r3, r2
1a0030c0:	e7de      	b.n	1a003080 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
1a0030c2:	6004      	str	r4, [r0, #0]
1a0030c4:	e7f5      	b.n	1a0030b2 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
1a0030c6:	6002      	str	r2, [r0, #0]
1a0030c8:	e7f3      	b.n	1a0030b2 <prvInsertBlockIntoFreeList+0x36>
1a0030ca:	bf00      	nop
1a0030cc:	10002a40 	.word	0x10002a40
1a0030d0:	10000a30 	.word	0x10000a30

1a0030d4 <pvPortMalloc>:
{
1a0030d4:	b570      	push	{r4, r5, r6, lr}
1a0030d6:	4604      	mov	r4, r0
	vTaskSuspendAll();
1a0030d8:	f000 fff6 	bl	1a0040c8 <vTaskSuspendAll>
		if( pxEnd == NULL )
1a0030dc:	4b3f      	ldr	r3, [pc, #252]	; (1a0031dc <pvPortMalloc+0x108>)
1a0030de:	681b      	ldr	r3, [r3, #0]
1a0030e0:	b1a3      	cbz	r3, 1a00310c <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
1a0030e2:	4b3f      	ldr	r3, [pc, #252]	; (1a0031e0 <pvPortMalloc+0x10c>)
1a0030e4:	681b      	ldr	r3, [r3, #0]
1a0030e6:	421c      	tst	r4, r3
1a0030e8:	d013      	beq.n	1a003112 <pvPortMalloc+0x3e>
	( void ) xTaskResumeAll();
1a0030ea:	f001 f887 	bl	1a0041fc <xTaskResumeAll>
void *pvReturn = NULL;
1a0030ee:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
1a0030f0:	f000 fd8c 	bl	1a003c0c <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
1a0030f4:	f016 0f07 	tst.w	r6, #7
1a0030f8:	d06e      	beq.n	1a0031d8 <pvPortMalloc+0x104>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a0030fa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0030fe:	f383 8811 	msr	BASEPRI, r3
1a003102:	f3bf 8f6f 	isb	sy
1a003106:	f3bf 8f4f 	dsb	sy
1a00310a:	e7fe      	b.n	1a00310a <pvPortMalloc+0x36>
			prvHeapInit();
1a00310c:	f7ff ff84 	bl	1a003018 <prvHeapInit>
1a003110:	e7e7      	b.n	1a0030e2 <pvPortMalloc+0xe>
			if( xWantedSize > 0 )
1a003112:	b194      	cbz	r4, 1a00313a <pvPortMalloc+0x66>
				xWantedSize += xHeapStructSize;
1a003114:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
1a003116:	f014 0f07 	tst.w	r4, #7
1a00311a:	d00e      	beq.n	1a00313a <pvPortMalloc+0x66>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a00311c:	f024 0407 	bic.w	r4, r4, #7
1a003120:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
1a003122:	f004 0307 	and.w	r3, r4, #7
1a003126:	b143      	cbz	r3, 1a00313a <pvPortMalloc+0x66>
1a003128:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00312c:	f383 8811 	msr	BASEPRI, r3
1a003130:	f3bf 8f6f 	isb	sy
1a003134:	f3bf 8f4f 	dsb	sy
1a003138:	e7fe      	b.n	1a003138 <pvPortMalloc+0x64>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
1a00313a:	b134      	cbz	r4, 1a00314a <pvPortMalloc+0x76>
1a00313c:	4b29      	ldr	r3, [pc, #164]	; (1a0031e4 <pvPortMalloc+0x110>)
1a00313e:	681b      	ldr	r3, [r3, #0]
1a003140:	42a3      	cmp	r3, r4
1a003142:	d306      	bcc.n	1a003152 <pvPortMalloc+0x7e>
				pxBlock = xStart.pxNextFreeBlock;
1a003144:	4b28      	ldr	r3, [pc, #160]	; (1a0031e8 <pvPortMalloc+0x114>)
1a003146:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a003148:	e009      	b.n	1a00315e <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
1a00314a:	f001 f857 	bl	1a0041fc <xTaskResumeAll>
void *pvReturn = NULL;
1a00314e:	2600      	movs	r6, #0
1a003150:	e7ce      	b.n	1a0030f0 <pvPortMalloc+0x1c>
	( void ) xTaskResumeAll();
1a003152:	f001 f853 	bl	1a0041fc <xTaskResumeAll>
void *pvReturn = NULL;
1a003156:	2600      	movs	r6, #0
1a003158:	e7ca      	b.n	1a0030f0 <pvPortMalloc+0x1c>
					pxPreviousBlock = pxBlock;
1a00315a:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
1a00315c:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a00315e:	686a      	ldr	r2, [r5, #4]
1a003160:	42a2      	cmp	r2, r4
1a003162:	d202      	bcs.n	1a00316a <pvPortMalloc+0x96>
1a003164:	682a      	ldr	r2, [r5, #0]
1a003166:	2a00      	cmp	r2, #0
1a003168:	d1f7      	bne.n	1a00315a <pvPortMalloc+0x86>
				if( pxBlock != pxEnd )
1a00316a:	4a1c      	ldr	r2, [pc, #112]	; (1a0031dc <pvPortMalloc+0x108>)
1a00316c:	6812      	ldr	r2, [r2, #0]
1a00316e:	42aa      	cmp	r2, r5
1a003170:	d014      	beq.n	1a00319c <pvPortMalloc+0xc8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
1a003172:	681e      	ldr	r6, [r3, #0]
1a003174:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1a003176:	682a      	ldr	r2, [r5, #0]
1a003178:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1a00317a:	686b      	ldr	r3, [r5, #4]
1a00317c:	1b1b      	subs	r3, r3, r4
1a00317e:	2b10      	cmp	r3, #16
1a003180:	d914      	bls.n	1a0031ac <pvPortMalloc+0xd8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
1a003182:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
1a003184:	f010 0f07 	tst.w	r0, #7
1a003188:	d00c      	beq.n	1a0031a4 <pvPortMalloc+0xd0>
1a00318a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00318e:	f383 8811 	msr	BASEPRI, r3
1a003192:	f3bf 8f6f 	isb	sy
1a003196:	f3bf 8f4f 	dsb	sy
1a00319a:	e7fe      	b.n	1a00319a <pvPortMalloc+0xc6>
	( void ) xTaskResumeAll();
1a00319c:	f001 f82e 	bl	1a0041fc <xTaskResumeAll>
void *pvReturn = NULL;
1a0031a0:	2600      	movs	r6, #0
1a0031a2:	e7a5      	b.n	1a0030f0 <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
1a0031a4:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
1a0031a6:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
1a0031a8:	f7ff ff68 	bl	1a00307c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
1a0031ac:	686a      	ldr	r2, [r5, #4]
1a0031ae:	490d      	ldr	r1, [pc, #52]	; (1a0031e4 <pvPortMalloc+0x110>)
1a0031b0:	680b      	ldr	r3, [r1, #0]
1a0031b2:	1a9b      	subs	r3, r3, r2
1a0031b4:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
1a0031b6:	490d      	ldr	r1, [pc, #52]	; (1a0031ec <pvPortMalloc+0x118>)
1a0031b8:	6809      	ldr	r1, [r1, #0]
1a0031ba:	428b      	cmp	r3, r1
1a0031bc:	d201      	bcs.n	1a0031c2 <pvPortMalloc+0xee>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
1a0031be:	490b      	ldr	r1, [pc, #44]	; (1a0031ec <pvPortMalloc+0x118>)
1a0031c0:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
1a0031c2:	4b07      	ldr	r3, [pc, #28]	; (1a0031e0 <pvPortMalloc+0x10c>)
1a0031c4:	681b      	ldr	r3, [r3, #0]
1a0031c6:	4313      	orrs	r3, r2
1a0031c8:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
1a0031ca:	2300      	movs	r3, #0
1a0031cc:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
1a0031ce:	f001 f815 	bl	1a0041fc <xTaskResumeAll>
		if( pvReturn == NULL )
1a0031d2:	2e00      	cmp	r6, #0
1a0031d4:	d18e      	bne.n	1a0030f4 <pvPortMalloc+0x20>
1a0031d6:	e78b      	b.n	1a0030f0 <pvPortMalloc+0x1c>
}
1a0031d8:	4630      	mov	r0, r6
1a0031da:	bd70      	pop	{r4, r5, r6, pc}
1a0031dc:	10000a30 	.word	0x10000a30
1a0031e0:	10002a34 	.word	0x10002a34
1a0031e4:	10002a38 	.word	0x10002a38
1a0031e8:	10002a40 	.word	0x10002a40
1a0031ec:	10002a3c 	.word	0x10002a3c

1a0031f0 <vPortFree>:
	if( pv != NULL )
1a0031f0:	b380      	cbz	r0, 1a003254 <vPortFree+0x64>
{
1a0031f2:	b538      	push	{r3, r4, r5, lr}
1a0031f4:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
1a0031f6:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
1a0031fa:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a0031fe:	4916      	ldr	r1, [pc, #88]	; (1a003258 <vPortFree+0x68>)
1a003200:	6809      	ldr	r1, [r1, #0]
1a003202:	420a      	tst	r2, r1
1a003204:	d108      	bne.n	1a003218 <vPortFree+0x28>
1a003206:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00320a:	f383 8811 	msr	BASEPRI, r3
1a00320e:	f3bf 8f6f 	isb	sy
1a003212:	f3bf 8f4f 	dsb	sy
1a003216:	e7fe      	b.n	1a003216 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
1a003218:	f850 0c08 	ldr.w	r0, [r0, #-8]
1a00321c:	b140      	cbz	r0, 1a003230 <vPortFree+0x40>
1a00321e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003222:	f383 8811 	msr	BASEPRI, r3
1a003226:	f3bf 8f6f 	isb	sy
1a00322a:	f3bf 8f4f 	dsb	sy
1a00322e:	e7fe      	b.n	1a00322e <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
1a003230:	ea22 0201 	bic.w	r2, r2, r1
1a003234:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
1a003238:	f000 ff46 	bl	1a0040c8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
1a00323c:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a003240:	4a06      	ldr	r2, [pc, #24]	; (1a00325c <vPortFree+0x6c>)
1a003242:	6813      	ldr	r3, [r2, #0]
1a003244:	440b      	add	r3, r1
1a003246:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1a003248:	4628      	mov	r0, r5
1a00324a:	f7ff ff17 	bl	1a00307c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
1a00324e:	f000 ffd5 	bl	1a0041fc <xTaskResumeAll>
}
1a003252:	bd38      	pop	{r3, r4, r5, pc}
1a003254:	4770      	bx	lr
1a003256:	bf00      	nop
1a003258:	10002a34 	.word	0x10002a34
1a00325c:	10002a38 	.word	0x10002a38

1a003260 <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
1a003260:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a003262:	b123      	cbz	r3, 1a00326e <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
1a003264:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a003266:	6818      	ldr	r0, [r3, #0]
1a003268:	f1c0 0007 	rsb	r0, r0, #7
1a00326c:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
1a00326e:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
1a003270:	4770      	bx	lr

1a003272 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a003272:	b510      	push	{r4, lr}
1a003274:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a003276:	f001 fd75 	bl	1a004d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a00327a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a00327c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a00327e:	429a      	cmp	r2, r3
1a003280:	d004      	beq.n	1a00328c <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a003282:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a003284:	f001 fd90 	bl	1a004da8 <vPortExitCritical>

	return xReturn;
}
1a003288:	4620      	mov	r0, r4
1a00328a:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a00328c:	2401      	movs	r4, #1
1a00328e:	e7f9      	b.n	1a003284 <prvIsQueueFull+0x12>

1a003290 <prvIsQueueEmpty>:
{
1a003290:	b510      	push	{r4, lr}
1a003292:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a003294:	f001 fd66 	bl	1a004d64 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a003298:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a00329a:	b123      	cbz	r3, 1a0032a6 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a00329c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a00329e:	f001 fd83 	bl	1a004da8 <vPortExitCritical>
}
1a0032a2:	4620      	mov	r0, r4
1a0032a4:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a0032a6:	2401      	movs	r4, #1
1a0032a8:	e7f9      	b.n	1a00329e <prvIsQueueEmpty+0xe>

1a0032aa <prvCopyDataToQueue>:
{
1a0032aa:	b570      	push	{r4, r5, r6, lr}
1a0032ac:	4604      	mov	r4, r0
1a0032ae:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a0032b0:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a0032b2:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0032b4:	b95a      	cbnz	r2, 1a0032ce <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a0032b6:	6803      	ldr	r3, [r0, #0]
1a0032b8:	b11b      	cbz	r3, 1a0032c2 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a0032ba:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a0032bc:	3501      	adds	r5, #1
1a0032be:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a0032c0:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a0032c2:	6840      	ldr	r0, [r0, #4]
1a0032c4:	f001 fa02 	bl	1a0046cc <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a0032c8:	2300      	movs	r3, #0
1a0032ca:	6063      	str	r3, [r4, #4]
1a0032cc:	e7f6      	b.n	1a0032bc <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a0032ce:	b96e      	cbnz	r6, 1a0032ec <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a0032d0:	6880      	ldr	r0, [r0, #8]
1a0032d2:	f004 fa69 	bl	1a0077a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a0032d6:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a0032d8:	68a3      	ldr	r3, [r4, #8]
1a0032da:	4413      	add	r3, r2
1a0032dc:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a0032de:	6862      	ldr	r2, [r4, #4]
1a0032e0:	4293      	cmp	r3, r2
1a0032e2:	d319      	bcc.n	1a003318 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a0032e4:	6823      	ldr	r3, [r4, #0]
1a0032e6:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a0032e8:	2000      	movs	r0, #0
1a0032ea:	e7e7      	b.n	1a0032bc <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0032ec:	68c0      	ldr	r0, [r0, #12]
1a0032ee:	f004 fa5b 	bl	1a0077a8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a0032f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a0032f4:	4252      	negs	r2, r2
1a0032f6:	68e3      	ldr	r3, [r4, #12]
1a0032f8:	4413      	add	r3, r2
1a0032fa:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a0032fc:	6821      	ldr	r1, [r4, #0]
1a0032fe:	428b      	cmp	r3, r1
1a003300:	d202      	bcs.n	1a003308 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a003302:	6863      	ldr	r3, [r4, #4]
1a003304:	441a      	add	r2, r3
1a003306:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a003308:	2e02      	cmp	r6, #2
1a00330a:	d001      	beq.n	1a003310 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a00330c:	2000      	movs	r0, #0
1a00330e:	e7d5      	b.n	1a0032bc <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a003310:	b125      	cbz	r5, 1a00331c <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a003312:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a003314:	2000      	movs	r0, #0
1a003316:	e7d1      	b.n	1a0032bc <prvCopyDataToQueue+0x12>
1a003318:	2000      	movs	r0, #0
1a00331a:	e7cf      	b.n	1a0032bc <prvCopyDataToQueue+0x12>
1a00331c:	2000      	movs	r0, #0
1a00331e:	e7cd      	b.n	1a0032bc <prvCopyDataToQueue+0x12>

1a003320 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a003320:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a003322:	b172      	cbz	r2, 1a003342 <prvCopyDataFromQueue+0x22>
{
1a003324:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a003326:	68c3      	ldr	r3, [r0, #12]
1a003328:	4413      	add	r3, r2
1a00332a:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a00332c:	6844      	ldr	r4, [r0, #4]
1a00332e:	42a3      	cmp	r3, r4
1a003330:	d301      	bcc.n	1a003336 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a003332:	6803      	ldr	r3, [r0, #0]
1a003334:	60c3      	str	r3, [r0, #12]
1a003336:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a003338:	68c1      	ldr	r1, [r0, #12]
1a00333a:	4620      	mov	r0, r4
1a00333c:	f004 fa34 	bl	1a0077a8 <memcpy>
}
1a003340:	bd10      	pop	{r4, pc}
1a003342:	4770      	bx	lr

1a003344 <prvUnlockQueue>:
{
1a003344:	b538      	push	{r3, r4, r5, lr}
1a003346:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a003348:	f001 fd0c 	bl	1a004d64 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a00334c:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a003350:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a003352:	e003      	b.n	1a00335c <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a003354:	f001 f948 	bl	1a0045e8 <vTaskMissedYield>
			--cTxLock;
1a003358:	3c01      	subs	r4, #1
1a00335a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a00335c:	2c00      	cmp	r4, #0
1a00335e:	dd08      	ble.n	1a003372 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a003360:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a003362:	b133      	cbz	r3, 1a003372 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a003364:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a003368:	f001 f8ac 	bl	1a0044c4 <xTaskRemoveFromEventList>
1a00336c:	2800      	cmp	r0, #0
1a00336e:	d0f3      	beq.n	1a003358 <prvUnlockQueue+0x14>
1a003370:	e7f0      	b.n	1a003354 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a003372:	23ff      	movs	r3, #255	; 0xff
1a003374:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a003378:	f001 fd16 	bl	1a004da8 <vPortExitCritical>
	taskENTER_CRITICAL();
1a00337c:	f001 fcf2 	bl	1a004d64 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a003380:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a003384:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a003386:	e003      	b.n	1a003390 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a003388:	f001 f92e 	bl	1a0045e8 <vTaskMissedYield>
				--cRxLock;
1a00338c:	3c01      	subs	r4, #1
1a00338e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a003390:	2c00      	cmp	r4, #0
1a003392:	dd08      	ble.n	1a0033a6 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a003394:	692b      	ldr	r3, [r5, #16]
1a003396:	b133      	cbz	r3, 1a0033a6 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a003398:	f105 0010 	add.w	r0, r5, #16
1a00339c:	f001 f892 	bl	1a0044c4 <xTaskRemoveFromEventList>
1a0033a0:	2800      	cmp	r0, #0
1a0033a2:	d0f3      	beq.n	1a00338c <prvUnlockQueue+0x48>
1a0033a4:	e7f0      	b.n	1a003388 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a0033a6:	23ff      	movs	r3, #255	; 0xff
1a0033a8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a0033ac:	f001 fcfc 	bl	1a004da8 <vPortExitCritical>
}
1a0033b0:	bd38      	pop	{r3, r4, r5, pc}
1a0033b2:	Address 0x000000001a0033b2 is out of bounds.


1a0033b4 <xQueueGenericReset>:
{
1a0033b4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a0033b6:	b940      	cbnz	r0, 1a0033ca <xQueueGenericReset+0x16>
1a0033b8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0033bc:	f383 8811 	msr	BASEPRI, r3
1a0033c0:	f3bf 8f6f 	isb	sy
1a0033c4:	f3bf 8f4f 	dsb	sy
1a0033c8:	e7fe      	b.n	1a0033c8 <xQueueGenericReset+0x14>
1a0033ca:	4604      	mov	r4, r0
1a0033cc:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a0033ce:	f001 fcc9 	bl	1a004d64 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a0033d2:	6821      	ldr	r1, [r4, #0]
1a0033d4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0033d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0033d8:	fb03 1002 	mla	r0, r3, r2, r1
1a0033dc:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a0033de:	2000      	movs	r0, #0
1a0033e0:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a0033e2:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a0033e4:	3a01      	subs	r2, #1
1a0033e6:	fb02 1303 	mla	r3, r2, r3, r1
1a0033ea:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a0033ec:	23ff      	movs	r3, #255	; 0xff
1a0033ee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a0033f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a0033f6:	b9a5      	cbnz	r5, 1a003422 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0033f8:	6923      	ldr	r3, [r4, #16]
1a0033fa:	b91b      	cbnz	r3, 1a003404 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a0033fc:	f001 fcd4 	bl	1a004da8 <vPortExitCritical>
}
1a003400:	2001      	movs	r0, #1
1a003402:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a003404:	f104 0010 	add.w	r0, r4, #16
1a003408:	f001 f85c 	bl	1a0044c4 <xTaskRemoveFromEventList>
1a00340c:	2800      	cmp	r0, #0
1a00340e:	d0f5      	beq.n	1a0033fc <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a003410:	4b08      	ldr	r3, [pc, #32]	; (1a003434 <xQueueGenericReset+0x80>)
1a003412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a003416:	601a      	str	r2, [r3, #0]
1a003418:	f3bf 8f4f 	dsb	sy
1a00341c:	f3bf 8f6f 	isb	sy
1a003420:	e7ec      	b.n	1a0033fc <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a003422:	f104 0010 	add.w	r0, r4, #16
1a003426:	f000 fb7a 	bl	1a003b1e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a00342a:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00342e:	f000 fb76 	bl	1a003b1e <vListInitialise>
1a003432:	e7e3      	b.n	1a0033fc <xQueueGenericReset+0x48>
1a003434:	e000ed04 	.word	0xe000ed04

1a003438 <prvInitialiseNewQueue>:
{
1a003438:	b538      	push	{r3, r4, r5, lr}
1a00343a:	461d      	mov	r5, r3
1a00343c:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a00343e:	460b      	mov	r3, r1
1a003440:	b149      	cbz	r1, 1a003456 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a003442:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a003444:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a003446:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a003448:	2101      	movs	r1, #1
1a00344a:	4620      	mov	r0, r4
1a00344c:	f7ff ffb2 	bl	1a0033b4 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a003450:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a003454:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a003456:	6024      	str	r4, [r4, #0]
1a003458:	e7f4      	b.n	1a003444 <prvInitialiseNewQueue+0xc>

1a00345a <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a00345a:	b940      	cbnz	r0, 1a00346e <xQueueGenericCreateStatic+0x14>
1a00345c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003460:	f383 8811 	msr	BASEPRI, r3
1a003464:	f3bf 8f6f 	isb	sy
1a003468:	f3bf 8f4f 	dsb	sy
1a00346c:	e7fe      	b.n	1a00346c <xQueueGenericCreateStatic+0x12>
	{
1a00346e:	b510      	push	{r4, lr}
1a003470:	b084      	sub	sp, #16
1a003472:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a003474:	b153      	cbz	r3, 1a00348c <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a003476:	b192      	cbz	r2, 1a00349e <xQueueGenericCreateStatic+0x44>
1a003478:	b989      	cbnz	r1, 1a00349e <xQueueGenericCreateStatic+0x44>
1a00347a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00347e:	f383 8811 	msr	BASEPRI, r3
1a003482:	f3bf 8f6f 	isb	sy
1a003486:	f3bf 8f4f 	dsb	sy
1a00348a:	e7fe      	b.n	1a00348a <xQueueGenericCreateStatic+0x30>
1a00348c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003490:	f383 8811 	msr	BASEPRI, r3
1a003494:	f3bf 8f6f 	isb	sy
1a003498:	f3bf 8f4f 	dsb	sy
1a00349c:	e7fe      	b.n	1a00349c <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a00349e:	b94a      	cbnz	r2, 1a0034b4 <xQueueGenericCreateStatic+0x5a>
1a0034a0:	b141      	cbz	r1, 1a0034b4 <xQueueGenericCreateStatic+0x5a>
1a0034a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0034a6:	f383 8811 	msr	BASEPRI, r3
1a0034aa:	f3bf 8f6f 	isb	sy
1a0034ae:	f3bf 8f4f 	dsb	sy
1a0034b2:	e7fe      	b.n	1a0034b2 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a0034b4:	2050      	movs	r0, #80	; 0x50
1a0034b6:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a0034b8:	9803      	ldr	r0, [sp, #12]
1a0034ba:	2850      	cmp	r0, #80	; 0x50
1a0034bc:	d008      	beq.n	1a0034d0 <xQueueGenericCreateStatic+0x76>
1a0034be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0034c2:	f383 8811 	msr	BASEPRI, r3
1a0034c6:	f3bf 8f6f 	isb	sy
1a0034ca:	f3bf 8f4f 	dsb	sy
1a0034ce:	e7fe      	b.n	1a0034ce <xQueueGenericCreateStatic+0x74>
1a0034d0:	4620      	mov	r0, r4
1a0034d2:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a0034d4:	2301      	movs	r3, #1
1a0034d6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a0034da:	9400      	str	r4, [sp, #0]
1a0034dc:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a0034e0:	f7ff ffaa 	bl	1a003438 <prvInitialiseNewQueue>
	}
1a0034e4:	4620      	mov	r0, r4
1a0034e6:	b004      	add	sp, #16
1a0034e8:	bd10      	pop	{r4, pc}

1a0034ea <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a0034ea:	b940      	cbnz	r0, 1a0034fe <xQueueGenericCreate+0x14>
1a0034ec:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0034f0:	f383 8811 	msr	BASEPRI, r3
1a0034f4:	f3bf 8f6f 	isb	sy
1a0034f8:	f3bf 8f4f 	dsb	sy
1a0034fc:	e7fe      	b.n	1a0034fc <xQueueGenericCreate+0x12>
	{
1a0034fe:	b5f0      	push	{r4, r5, r6, r7, lr}
1a003500:	b083      	sub	sp, #12
1a003502:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a003504:	b111      	cbz	r1, 1a00350c <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a003506:	fb01 f000 	mul.w	r0, r1, r0
1a00350a:	e000      	b.n	1a00350e <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
1a00350c:	2000      	movs	r0, #0
1a00350e:	4617      	mov	r7, r2
1a003510:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a003512:	3050      	adds	r0, #80	; 0x50
1a003514:	f7ff fdde 	bl	1a0030d4 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a003518:	4605      	mov	r5, r0
1a00351a:	b150      	cbz	r0, 1a003532 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a00351c:	2300      	movs	r3, #0
1a00351e:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a003522:	9000      	str	r0, [sp, #0]
1a003524:	463b      	mov	r3, r7
1a003526:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a00352a:	4621      	mov	r1, r4
1a00352c:	4630      	mov	r0, r6
1a00352e:	f7ff ff83 	bl	1a003438 <prvInitialiseNewQueue>
	}
1a003532:	4628      	mov	r0, r5
1a003534:	b003      	add	sp, #12
1a003536:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a003538 <xQueueGenericSend>:
{
1a003538:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00353a:	b085      	sub	sp, #20
1a00353c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a00353e:	b160      	cbz	r0, 1a00355a <xQueueGenericSend+0x22>
1a003540:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a003542:	b999      	cbnz	r1, 1a00356c <xQueueGenericSend+0x34>
1a003544:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a003546:	b18a      	cbz	r2, 1a00356c <xQueueGenericSend+0x34>
1a003548:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00354c:	f383 8811 	msr	BASEPRI, r3
1a003550:	f3bf 8f6f 	isb	sy
1a003554:	f3bf 8f4f 	dsb	sy
1a003558:	e7fe      	b.n	1a003558 <xQueueGenericSend+0x20>
1a00355a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00355e:	f383 8811 	msr	BASEPRI, r3
1a003562:	f3bf 8f6f 	isb	sy
1a003566:	f3bf 8f4f 	dsb	sy
1a00356a:	e7fe      	b.n	1a00356a <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a00356c:	2b02      	cmp	r3, #2
1a00356e:	d10b      	bne.n	1a003588 <xQueueGenericSend+0x50>
1a003570:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a003572:	2a01      	cmp	r2, #1
1a003574:	d008      	beq.n	1a003588 <xQueueGenericSend+0x50>
1a003576:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00357a:	f383 8811 	msr	BASEPRI, r3
1a00357e:	f3bf 8f6f 	isb	sy
1a003582:	f3bf 8f4f 	dsb	sy
1a003586:	e7fe      	b.n	1a003586 <xQueueGenericSend+0x4e>
1a003588:	461e      	mov	r6, r3
1a00358a:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a00358c:	f001 f832 	bl	1a0045f4 <xTaskGetSchedulerState>
1a003590:	b950      	cbnz	r0, 1a0035a8 <xQueueGenericSend+0x70>
1a003592:	9b01      	ldr	r3, [sp, #4]
1a003594:	b153      	cbz	r3, 1a0035ac <xQueueGenericSend+0x74>
1a003596:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00359a:	f383 8811 	msr	BASEPRI, r3
1a00359e:	f3bf 8f6f 	isb	sy
1a0035a2:	f3bf 8f4f 	dsb	sy
1a0035a6:	e7fe      	b.n	1a0035a6 <xQueueGenericSend+0x6e>
1a0035a8:	2500      	movs	r5, #0
1a0035aa:	e03a      	b.n	1a003622 <xQueueGenericSend+0xea>
1a0035ac:	2500      	movs	r5, #0
1a0035ae:	e038      	b.n	1a003622 <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a0035b0:	4632      	mov	r2, r6
1a0035b2:	4639      	mov	r1, r7
1a0035b4:	4620      	mov	r0, r4
1a0035b6:	f7ff fe78 	bl	1a0032aa <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0035ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0035bc:	b94b      	cbnz	r3, 1a0035d2 <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a0035be:	b1a8      	cbz	r0, 1a0035ec <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a0035c0:	4b3b      	ldr	r3, [pc, #236]	; (1a0036b0 <xQueueGenericSend+0x178>)
1a0035c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0035c6:	601a      	str	r2, [r3, #0]
1a0035c8:	f3bf 8f4f 	dsb	sy
1a0035cc:	f3bf 8f6f 	isb	sy
1a0035d0:	e00c      	b.n	1a0035ec <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0035d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0035d6:	f000 ff75 	bl	1a0044c4 <xTaskRemoveFromEventList>
1a0035da:	b138      	cbz	r0, 1a0035ec <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a0035dc:	4b34      	ldr	r3, [pc, #208]	; (1a0036b0 <xQueueGenericSend+0x178>)
1a0035de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0035e2:	601a      	str	r2, [r3, #0]
1a0035e4:	f3bf 8f4f 	dsb	sy
1a0035e8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a0035ec:	f001 fbdc 	bl	1a004da8 <vPortExitCritical>
				return pdPASS;
1a0035f0:	2001      	movs	r0, #1
}
1a0035f2:	b005      	add	sp, #20
1a0035f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a0035f6:	f001 fbd7 	bl	1a004da8 <vPortExitCritical>
					return errQUEUE_FULL;
1a0035fa:	2000      	movs	r0, #0
1a0035fc:	e7f9      	b.n	1a0035f2 <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a0035fe:	a802      	add	r0, sp, #8
1a003600:	f000 ffa6 	bl	1a004550 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a003604:	2501      	movs	r5, #1
1a003606:	e019      	b.n	1a00363c <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a003608:	2300      	movs	r3, #0
1a00360a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a00360e:	e021      	b.n	1a003654 <xQueueGenericSend+0x11c>
1a003610:	2300      	movs	r3, #0
1a003612:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a003616:	e023      	b.n	1a003660 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a003618:	4620      	mov	r0, r4
1a00361a:	f7ff fe93 	bl	1a003344 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a00361e:	f000 fded 	bl	1a0041fc <xTaskResumeAll>
		taskENTER_CRITICAL();
1a003622:	f001 fb9f 	bl	1a004d64 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a003626:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a003628:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a00362a:	429a      	cmp	r2, r3
1a00362c:	d3c0      	bcc.n	1a0035b0 <xQueueGenericSend+0x78>
1a00362e:	2e02      	cmp	r6, #2
1a003630:	d0be      	beq.n	1a0035b0 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a003632:	9b01      	ldr	r3, [sp, #4]
1a003634:	2b00      	cmp	r3, #0
1a003636:	d0de      	beq.n	1a0035f6 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a003638:	2d00      	cmp	r5, #0
1a00363a:	d0e0      	beq.n	1a0035fe <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a00363c:	f001 fbb4 	bl	1a004da8 <vPortExitCritical>
		vTaskSuspendAll();
1a003640:	f000 fd42 	bl	1a0040c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a003644:	f001 fb8e 	bl	1a004d64 <vPortEnterCritical>
1a003648:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a00364c:	b25b      	sxtb	r3, r3
1a00364e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a003652:	d0d9      	beq.n	1a003608 <xQueueGenericSend+0xd0>
1a003654:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a003658:	b25b      	sxtb	r3, r3
1a00365a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00365e:	d0d7      	beq.n	1a003610 <xQueueGenericSend+0xd8>
1a003660:	f001 fba2 	bl	1a004da8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a003664:	a901      	add	r1, sp, #4
1a003666:	a802      	add	r0, sp, #8
1a003668:	f000 ff7e 	bl	1a004568 <xTaskCheckForTimeOut>
1a00366c:	b9c8      	cbnz	r0, 1a0036a2 <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a00366e:	4620      	mov	r0, r4
1a003670:	f7ff fdff 	bl	1a003272 <prvIsQueueFull>
1a003674:	2800      	cmp	r0, #0
1a003676:	d0cf      	beq.n	1a003618 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a003678:	9901      	ldr	r1, [sp, #4]
1a00367a:	f104 0010 	add.w	r0, r4, #16
1a00367e:	f000 feed 	bl	1a00445c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a003682:	4620      	mov	r0, r4
1a003684:	f7ff fe5e 	bl	1a003344 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a003688:	f000 fdb8 	bl	1a0041fc <xTaskResumeAll>
1a00368c:	2800      	cmp	r0, #0
1a00368e:	d1c8      	bne.n	1a003622 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a003690:	4b07      	ldr	r3, [pc, #28]	; (1a0036b0 <xQueueGenericSend+0x178>)
1a003692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a003696:	601a      	str	r2, [r3, #0]
1a003698:	f3bf 8f4f 	dsb	sy
1a00369c:	f3bf 8f6f 	isb	sy
1a0036a0:	e7bf      	b.n	1a003622 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a0036a2:	4620      	mov	r0, r4
1a0036a4:	f7ff fe4e 	bl	1a003344 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a0036a8:	f000 fda8 	bl	1a0041fc <xTaskResumeAll>
			return errQUEUE_FULL;
1a0036ac:	2000      	movs	r0, #0
1a0036ae:	e7a0      	b.n	1a0035f2 <xQueueGenericSend+0xba>
1a0036b0:	e000ed04 	.word	0xe000ed04

1a0036b4 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
1a0036b4:	b148      	cbz	r0, 1a0036ca <prvInitialiseMutex+0x16>
	{
1a0036b6:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
1a0036b8:	2100      	movs	r1, #0
1a0036ba:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
1a0036bc:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
1a0036be:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
1a0036c0:	460b      	mov	r3, r1
1a0036c2:	460a      	mov	r2, r1
1a0036c4:	f7ff ff38 	bl	1a003538 <xQueueGenericSend>
	}
1a0036c8:	bd08      	pop	{r3, pc}
1a0036ca:	4770      	bx	lr

1a0036cc <xQueueCreateMutex>:
	{
1a0036cc:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
1a0036ce:	4602      	mov	r2, r0
1a0036d0:	2100      	movs	r1, #0
1a0036d2:	2001      	movs	r0, #1
1a0036d4:	f7ff ff09 	bl	1a0034ea <xQueueGenericCreate>
1a0036d8:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
1a0036da:	f7ff ffeb 	bl	1a0036b4 <prvInitialiseMutex>
	}
1a0036de:	4620      	mov	r0, r4
1a0036e0:	bd10      	pop	{r4, pc}

1a0036e2 <xQueueGenericSendFromISR>:
{
1a0036e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a0036e6:	b160      	cbz	r0, 1a003702 <xQueueGenericSendFromISR+0x20>
1a0036e8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0036ea:	b999      	cbnz	r1, 1a003714 <xQueueGenericSendFromISR+0x32>
1a0036ec:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a0036ee:	b188      	cbz	r0, 1a003714 <xQueueGenericSendFromISR+0x32>
1a0036f0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0036f4:	f383 8811 	msr	BASEPRI, r3
1a0036f8:	f3bf 8f6f 	isb	sy
1a0036fc:	f3bf 8f4f 	dsb	sy
1a003700:	e7fe      	b.n	1a003700 <xQueueGenericSendFromISR+0x1e>
1a003702:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003706:	f383 8811 	msr	BASEPRI, r3
1a00370a:	f3bf 8f6f 	isb	sy
1a00370e:	f3bf 8f4f 	dsb	sy
1a003712:	e7fe      	b.n	1a003712 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a003714:	2b02      	cmp	r3, #2
1a003716:	d10b      	bne.n	1a003730 <xQueueGenericSendFromISR+0x4e>
1a003718:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a00371a:	2801      	cmp	r0, #1
1a00371c:	d008      	beq.n	1a003730 <xQueueGenericSendFromISR+0x4e>
1a00371e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003722:	f383 8811 	msr	BASEPRI, r3
1a003726:	f3bf 8f6f 	isb	sy
1a00372a:	f3bf 8f4f 	dsb	sy
1a00372e:	e7fe      	b.n	1a00372e <xQueueGenericSendFromISR+0x4c>
1a003730:	461f      	mov	r7, r3
1a003732:	4690      	mov	r8, r2
1a003734:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a003736:	f001 fc3f 	bl	1a004fb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a00373a:	f3ef 8611 	mrs	r6, BASEPRI
1a00373e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003742:	f383 8811 	msr	BASEPRI, r3
1a003746:	f3bf 8f6f 	isb	sy
1a00374a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a00374e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a003750:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a003752:	429a      	cmp	r2, r3
1a003754:	d303      	bcc.n	1a00375e <xQueueGenericSendFromISR+0x7c>
1a003756:	2f02      	cmp	r7, #2
1a003758:	d001      	beq.n	1a00375e <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a00375a:	2000      	movs	r0, #0
1a00375c:	e00f      	b.n	1a00377e <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a00375e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a003762:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a003764:	463a      	mov	r2, r7
1a003766:	4649      	mov	r1, r9
1a003768:	4620      	mov	r0, r4
1a00376a:	f7ff fd9e 	bl	1a0032aa <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a00376e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a003772:	d008      	beq.n	1a003786 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a003774:	1c6b      	adds	r3, r5, #1
1a003776:	b25b      	sxtb	r3, r3
1a003778:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a00377c:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a00377e:	f386 8811 	msr	BASEPRI, r6
}
1a003782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a003786:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a003788:	b15b      	cbz	r3, 1a0037a2 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a00378a:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00378e:	f000 fe99 	bl	1a0044c4 <xTaskRemoveFromEventList>
1a003792:	b140      	cbz	r0, 1a0037a6 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a003794:	f1b8 0f00 	cmp.w	r8, #0
1a003798:	d007      	beq.n	1a0037aa <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a00379a:	2001      	movs	r0, #1
1a00379c:	f8c8 0000 	str.w	r0, [r8]
1a0037a0:	e7ed      	b.n	1a00377e <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a0037a2:	2001      	movs	r0, #1
1a0037a4:	e7eb      	b.n	1a00377e <xQueueGenericSendFromISR+0x9c>
1a0037a6:	2001      	movs	r0, #1
1a0037a8:	e7e9      	b.n	1a00377e <xQueueGenericSendFromISR+0x9c>
1a0037aa:	2001      	movs	r0, #1
1a0037ac:	e7e7      	b.n	1a00377e <xQueueGenericSendFromISR+0x9c>
1a0037ae:	Address 0x000000001a0037ae is out of bounds.


1a0037b0 <xQueueReceive>:
{
1a0037b0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0037b2:	b085      	sub	sp, #20
1a0037b4:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a0037b6:	b160      	cbz	r0, 1a0037d2 <xQueueReceive+0x22>
1a0037b8:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0037ba:	b999      	cbnz	r1, 1a0037e4 <xQueueReceive+0x34>
1a0037bc:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a0037be:	b18b      	cbz	r3, 1a0037e4 <xQueueReceive+0x34>
	__asm volatile
1a0037c0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0037c4:	f383 8811 	msr	BASEPRI, r3
1a0037c8:	f3bf 8f6f 	isb	sy
1a0037cc:	f3bf 8f4f 	dsb	sy
1a0037d0:	e7fe      	b.n	1a0037d0 <xQueueReceive+0x20>
1a0037d2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0037d6:	f383 8811 	msr	BASEPRI, r3
1a0037da:	f3bf 8f6f 	isb	sy
1a0037de:	f3bf 8f4f 	dsb	sy
1a0037e2:	e7fe      	b.n	1a0037e2 <xQueueReceive+0x32>
1a0037e4:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a0037e6:	f000 ff05 	bl	1a0045f4 <xTaskGetSchedulerState>
1a0037ea:	b950      	cbnz	r0, 1a003802 <xQueueReceive+0x52>
1a0037ec:	9b01      	ldr	r3, [sp, #4]
1a0037ee:	b153      	cbz	r3, 1a003806 <xQueueReceive+0x56>
1a0037f0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0037f4:	f383 8811 	msr	BASEPRI, r3
1a0037f8:	f3bf 8f6f 	isb	sy
1a0037fc:	f3bf 8f4f 	dsb	sy
1a003800:	e7fe      	b.n	1a003800 <xQueueReceive+0x50>
1a003802:	2600      	movs	r6, #0
1a003804:	e03e      	b.n	1a003884 <xQueueReceive+0xd4>
1a003806:	2600      	movs	r6, #0
1a003808:	e03c      	b.n	1a003884 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a00380a:	4639      	mov	r1, r7
1a00380c:	4620      	mov	r0, r4
1a00380e:	f7ff fd87 	bl	1a003320 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a003812:	3d01      	subs	r5, #1
1a003814:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a003816:	6923      	ldr	r3, [r4, #16]
1a003818:	b923      	cbnz	r3, 1a003824 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a00381a:	f001 fac5 	bl	1a004da8 <vPortExitCritical>
				return pdPASS;
1a00381e:	2001      	movs	r0, #1
}
1a003820:	b005      	add	sp, #20
1a003822:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a003824:	f104 0010 	add.w	r0, r4, #16
1a003828:	f000 fe4c 	bl	1a0044c4 <xTaskRemoveFromEventList>
1a00382c:	2800      	cmp	r0, #0
1a00382e:	d0f4      	beq.n	1a00381a <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a003830:	4b34      	ldr	r3, [pc, #208]	; (1a003904 <xQueueReceive+0x154>)
1a003832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a003836:	601a      	str	r2, [r3, #0]
1a003838:	f3bf 8f4f 	dsb	sy
1a00383c:	f3bf 8f6f 	isb	sy
1a003840:	e7eb      	b.n	1a00381a <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a003842:	f001 fab1 	bl	1a004da8 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a003846:	2000      	movs	r0, #0
1a003848:	e7ea      	b.n	1a003820 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a00384a:	a802      	add	r0, sp, #8
1a00384c:	f000 fe80 	bl	1a004550 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a003850:	2601      	movs	r6, #1
1a003852:	e021      	b.n	1a003898 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a003854:	2300      	movs	r3, #0
1a003856:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a00385a:	e029      	b.n	1a0038b0 <xQueueReceive+0x100>
1a00385c:	2300      	movs	r3, #0
1a00385e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a003862:	e02b      	b.n	1a0038bc <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a003864:	4620      	mov	r0, r4
1a003866:	f7ff fd6d 	bl	1a003344 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a00386a:	f000 fcc7 	bl	1a0041fc <xTaskResumeAll>
1a00386e:	e009      	b.n	1a003884 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a003870:	4620      	mov	r0, r4
1a003872:	f7ff fd67 	bl	1a003344 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a003876:	f000 fcc1 	bl	1a0041fc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a00387a:	4620      	mov	r0, r4
1a00387c:	f7ff fd08 	bl	1a003290 <prvIsQueueEmpty>
1a003880:	2800      	cmp	r0, #0
1a003882:	d13d      	bne.n	1a003900 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a003884:	f001 fa6e 	bl	1a004d64 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a003888:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a00388a:	2d00      	cmp	r5, #0
1a00388c:	d1bd      	bne.n	1a00380a <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a00388e:	9b01      	ldr	r3, [sp, #4]
1a003890:	2b00      	cmp	r3, #0
1a003892:	d0d6      	beq.n	1a003842 <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a003894:	2e00      	cmp	r6, #0
1a003896:	d0d8      	beq.n	1a00384a <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a003898:	f001 fa86 	bl	1a004da8 <vPortExitCritical>
		vTaskSuspendAll();
1a00389c:	f000 fc14 	bl	1a0040c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a0038a0:	f001 fa60 	bl	1a004d64 <vPortEnterCritical>
1a0038a4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0038a8:	b25b      	sxtb	r3, r3
1a0038aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0038ae:	d0d1      	beq.n	1a003854 <xQueueReceive+0xa4>
1a0038b0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0038b4:	b25b      	sxtb	r3, r3
1a0038b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0038ba:	d0cf      	beq.n	1a00385c <xQueueReceive+0xac>
1a0038bc:	f001 fa74 	bl	1a004da8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a0038c0:	a901      	add	r1, sp, #4
1a0038c2:	a802      	add	r0, sp, #8
1a0038c4:	f000 fe50 	bl	1a004568 <xTaskCheckForTimeOut>
1a0038c8:	2800      	cmp	r0, #0
1a0038ca:	d1d1      	bne.n	1a003870 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0038cc:	4620      	mov	r0, r4
1a0038ce:	f7ff fcdf 	bl	1a003290 <prvIsQueueEmpty>
1a0038d2:	2800      	cmp	r0, #0
1a0038d4:	d0c6      	beq.n	1a003864 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a0038d6:	9901      	ldr	r1, [sp, #4]
1a0038d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0038dc:	f000 fdbe 	bl	1a00445c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a0038e0:	4620      	mov	r0, r4
1a0038e2:	f7ff fd2f 	bl	1a003344 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a0038e6:	f000 fc89 	bl	1a0041fc <xTaskResumeAll>
1a0038ea:	2800      	cmp	r0, #0
1a0038ec:	d1ca      	bne.n	1a003884 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a0038ee:	4b05      	ldr	r3, [pc, #20]	; (1a003904 <xQueueReceive+0x154>)
1a0038f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0038f4:	601a      	str	r2, [r3, #0]
1a0038f6:	f3bf 8f4f 	dsb	sy
1a0038fa:	f3bf 8f6f 	isb	sy
1a0038fe:	e7c1      	b.n	1a003884 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a003900:	2000      	movs	r0, #0
1a003902:	e78d      	b.n	1a003820 <xQueueReceive+0x70>
1a003904:	e000ed04 	.word	0xe000ed04

1a003908 <xQueueSemaphoreTake>:
{
1a003908:	b570      	push	{r4, r5, r6, lr}
1a00390a:	b084      	sub	sp, #16
1a00390c:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
1a00390e:	b940      	cbnz	r0, 1a003922 <xQueueSemaphoreTake+0x1a>
1a003910:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003914:	f383 8811 	msr	BASEPRI, r3
1a003918:	f3bf 8f6f 	isb	sy
1a00391c:	f3bf 8f4f 	dsb	sy
1a003920:	e7fe      	b.n	1a003920 <xQueueSemaphoreTake+0x18>
1a003922:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
1a003924:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a003926:	b143      	cbz	r3, 1a00393a <xQueueSemaphoreTake+0x32>
1a003928:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00392c:	f383 8811 	msr	BASEPRI, r3
1a003930:	f3bf 8f6f 	isb	sy
1a003934:	f3bf 8f4f 	dsb	sy
1a003938:	e7fe      	b.n	1a003938 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a00393a:	f000 fe5b 	bl	1a0045f4 <xTaskGetSchedulerState>
1a00393e:	b950      	cbnz	r0, 1a003956 <xQueueSemaphoreTake+0x4e>
1a003940:	9b01      	ldr	r3, [sp, #4]
1a003942:	b15b      	cbz	r3, 1a00395c <xQueueSemaphoreTake+0x54>
1a003944:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003948:	f383 8811 	msr	BASEPRI, r3
1a00394c:	f3bf 8f6f 	isb	sy
1a003950:	f3bf 8f4f 	dsb	sy
1a003954:	e7fe      	b.n	1a003954 <xQueueSemaphoreTake+0x4c>
1a003956:	2500      	movs	r5, #0
1a003958:	462e      	mov	r6, r5
1a00395a:	e051      	b.n	1a003a00 <xQueueSemaphoreTake+0xf8>
1a00395c:	2500      	movs	r5, #0
1a00395e:	462e      	mov	r6, r5
1a003960:	e04e      	b.n	1a003a00 <xQueueSemaphoreTake+0xf8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1a003962:	3b01      	subs	r3, #1
1a003964:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a003966:	6823      	ldr	r3, [r4, #0]
1a003968:	b913      	cbnz	r3, 1a003970 <xQueueSemaphoreTake+0x68>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
1a00396a:	f000 ff67 	bl	1a00483c <pvTaskIncrementMutexHeldCount>
1a00396e:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a003970:	6923      	ldr	r3, [r4, #16]
1a003972:	b163      	cbz	r3, 1a00398e <xQueueSemaphoreTake+0x86>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a003974:	f104 0010 	add.w	r0, r4, #16
1a003978:	f000 fda4 	bl	1a0044c4 <xTaskRemoveFromEventList>
1a00397c:	b138      	cbz	r0, 1a00398e <xQueueSemaphoreTake+0x86>
						queueYIELD_IF_USING_PREEMPTION();
1a00397e:	4b48      	ldr	r3, [pc, #288]	; (1a003aa0 <xQueueSemaphoreTake+0x198>)
1a003980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a003984:	601a      	str	r2, [r3, #0]
1a003986:	f3bf 8f4f 	dsb	sy
1a00398a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a00398e:	f001 fa0b 	bl	1a004da8 <vPortExitCritical>
				return pdPASS;
1a003992:	2501      	movs	r5, #1
}
1a003994:	4628      	mov	r0, r5
1a003996:	b004      	add	sp, #16
1a003998:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
1a00399a:	b145      	cbz	r5, 1a0039ae <xQueueSemaphoreTake+0xa6>
1a00399c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0039a0:	f383 8811 	msr	BASEPRI, r3
1a0039a4:	f3bf 8f6f 	isb	sy
1a0039a8:	f3bf 8f4f 	dsb	sy
1a0039ac:	e7fe      	b.n	1a0039ac <xQueueSemaphoreTake+0xa4>
					taskEXIT_CRITICAL();
1a0039ae:	f001 f9fb 	bl	1a004da8 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a0039b2:	e7ef      	b.n	1a003994 <xQueueSemaphoreTake+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a0039b4:	a802      	add	r0, sp, #8
1a0039b6:	f000 fdcb 	bl	1a004550 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a0039ba:	2601      	movs	r6, #1
1a0039bc:	e02a      	b.n	1a003a14 <xQueueSemaphoreTake+0x10c>
		prvLockQueue( pxQueue );
1a0039be:	2300      	movs	r3, #0
1a0039c0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0039c4:	e032      	b.n	1a003a2c <xQueueSemaphoreTake+0x124>
1a0039c6:	2300      	movs	r3, #0
1a0039c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0039cc:	e034      	b.n	1a003a38 <xQueueSemaphoreTake+0x130>
						taskENTER_CRITICAL();
1a0039ce:	f001 f9c9 	bl	1a004d64 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1a0039d2:	6860      	ldr	r0, [r4, #4]
1a0039d4:	f000 fe1e 	bl	1a004614 <xTaskPriorityInherit>
1a0039d8:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
1a0039da:	f001 f9e5 	bl	1a004da8 <vPortExitCritical>
1a0039de:	e03b      	b.n	1a003a58 <xQueueSemaphoreTake+0x150>
				prvUnlockQueue( pxQueue );
1a0039e0:	4620      	mov	r0, r4
1a0039e2:	f7ff fcaf 	bl	1a003344 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a0039e6:	f000 fc09 	bl	1a0041fc <xTaskResumeAll>
1a0039ea:	e009      	b.n	1a003a00 <xQueueSemaphoreTake+0xf8>
			prvUnlockQueue( pxQueue );
1a0039ec:	4620      	mov	r0, r4
1a0039ee:	f7ff fca9 	bl	1a003344 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a0039f2:	f000 fc03 	bl	1a0041fc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0039f6:	4620      	mov	r0, r4
1a0039f8:	f7ff fc4a 	bl	1a003290 <prvIsQueueEmpty>
1a0039fc:	2800      	cmp	r0, #0
1a0039fe:	d140      	bne.n	1a003a82 <xQueueSemaphoreTake+0x17a>
		taskENTER_CRITICAL();
1a003a00:	f001 f9b0 	bl	1a004d64 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1a003a04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1a003a06:	2b00      	cmp	r3, #0
1a003a08:	d1ab      	bne.n	1a003962 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a003a0a:	9b01      	ldr	r3, [sp, #4]
1a003a0c:	2b00      	cmp	r3, #0
1a003a0e:	d0c4      	beq.n	1a00399a <xQueueSemaphoreTake+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a003a10:	2e00      	cmp	r6, #0
1a003a12:	d0cf      	beq.n	1a0039b4 <xQueueSemaphoreTake+0xac>
		taskEXIT_CRITICAL();
1a003a14:	f001 f9c8 	bl	1a004da8 <vPortExitCritical>
		vTaskSuspendAll();
1a003a18:	f000 fb56 	bl	1a0040c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a003a1c:	f001 f9a2 	bl	1a004d64 <vPortEnterCritical>
1a003a20:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a003a24:	b25b      	sxtb	r3, r3
1a003a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a003a2a:	d0c8      	beq.n	1a0039be <xQueueSemaphoreTake+0xb6>
1a003a2c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a003a30:	b25b      	sxtb	r3, r3
1a003a32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a003a36:	d0c6      	beq.n	1a0039c6 <xQueueSemaphoreTake+0xbe>
1a003a38:	f001 f9b6 	bl	1a004da8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a003a3c:	a901      	add	r1, sp, #4
1a003a3e:	a802      	add	r0, sp, #8
1a003a40:	f000 fd92 	bl	1a004568 <xTaskCheckForTimeOut>
1a003a44:	2800      	cmp	r0, #0
1a003a46:	d1d1      	bne.n	1a0039ec <xQueueSemaphoreTake+0xe4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a003a48:	4620      	mov	r0, r4
1a003a4a:	f7ff fc21 	bl	1a003290 <prvIsQueueEmpty>
1a003a4e:	2800      	cmp	r0, #0
1a003a50:	d0c6      	beq.n	1a0039e0 <xQueueSemaphoreTake+0xd8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a003a52:	6823      	ldr	r3, [r4, #0]
1a003a54:	2b00      	cmp	r3, #0
1a003a56:	d0ba      	beq.n	1a0039ce <xQueueSemaphoreTake+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a003a58:	9901      	ldr	r1, [sp, #4]
1a003a5a:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a003a5e:	f000 fcfd 	bl	1a00445c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a003a62:	4620      	mov	r0, r4
1a003a64:	f7ff fc6e 	bl	1a003344 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a003a68:	f000 fbc8 	bl	1a0041fc <xTaskResumeAll>
1a003a6c:	2800      	cmp	r0, #0
1a003a6e:	d1c7      	bne.n	1a003a00 <xQueueSemaphoreTake+0xf8>
					portYIELD_WITHIN_API();
1a003a70:	4b0b      	ldr	r3, [pc, #44]	; (1a003aa0 <xQueueSemaphoreTake+0x198>)
1a003a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a003a76:	601a      	str	r2, [r3, #0]
1a003a78:	f3bf 8f4f 	dsb	sy
1a003a7c:	f3bf 8f6f 	isb	sy
1a003a80:	e7be      	b.n	1a003a00 <xQueueSemaphoreTake+0xf8>
					if( xInheritanceOccurred != pdFALSE )
1a003a82:	2d00      	cmp	r5, #0
1a003a84:	d086      	beq.n	1a003994 <xQueueSemaphoreTake+0x8c>
						taskENTER_CRITICAL();
1a003a86:	f001 f96d 	bl	1a004d64 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1a003a8a:	4620      	mov	r0, r4
1a003a8c:	f7ff fbe8 	bl	1a003260 <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
1a003a90:	4601      	mov	r1, r0
1a003a92:	6860      	ldr	r0, [r4, #4]
1a003a94:	f000 fe72 	bl	1a00477c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
1a003a98:	f001 f986 	bl	1a004da8 <vPortExitCritical>
				return errQUEUE_EMPTY;
1a003a9c:	2500      	movs	r5, #0
1a003a9e:	e779      	b.n	1a003994 <xQueueSemaphoreTake+0x8c>
1a003aa0:	e000ed04 	.word	0xe000ed04

1a003aa4 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a003aa4:	2300      	movs	r3, #0
1a003aa6:	2b07      	cmp	r3, #7
1a003aa8:	d80c      	bhi.n	1a003ac4 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a003aaa:	4a07      	ldr	r2, [pc, #28]	; (1a003ac8 <vQueueAddToRegistry+0x24>)
1a003aac:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a003ab0:	b10a      	cbz	r2, 1a003ab6 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a003ab2:	3301      	adds	r3, #1
1a003ab4:	e7f7      	b.n	1a003aa6 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a003ab6:	4a04      	ldr	r2, [pc, #16]	; (1a003ac8 <vQueueAddToRegistry+0x24>)
1a003ab8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a003abc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a003ac0:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a003ac2:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a003ac4:	4770      	bx	lr
1a003ac6:	bf00      	nop
1a003ac8:	100034b0 	.word	0x100034b0

1a003acc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a003acc:	b570      	push	{r4, r5, r6, lr}
1a003ace:	4604      	mov	r4, r0
1a003ad0:	460d      	mov	r5, r1
1a003ad2:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a003ad4:	f001 f946 	bl	1a004d64 <vPortEnterCritical>
1a003ad8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a003adc:	b25b      	sxtb	r3, r3
1a003ade:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a003ae2:	d00d      	beq.n	1a003b00 <vQueueWaitForMessageRestricted+0x34>
1a003ae4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a003ae8:	b25b      	sxtb	r3, r3
1a003aea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a003aee:	d00b      	beq.n	1a003b08 <vQueueWaitForMessageRestricted+0x3c>
1a003af0:	f001 f95a 	bl	1a004da8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a003af4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a003af6:	b15b      	cbz	r3, 1a003b10 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a003af8:	4620      	mov	r0, r4
1a003afa:	f7ff fc23 	bl	1a003344 <prvUnlockQueue>
	}
1a003afe:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a003b00:	2300      	movs	r3, #0
1a003b02:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a003b06:	e7ed      	b.n	1a003ae4 <vQueueWaitForMessageRestricted+0x18>
1a003b08:	2300      	movs	r3, #0
1a003b0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a003b0e:	e7ef      	b.n	1a003af0 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a003b10:	4632      	mov	r2, r6
1a003b12:	4629      	mov	r1, r5
1a003b14:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a003b18:	f000 fcb8 	bl	1a00448c <vTaskPlaceOnEventListRestricted>
1a003b1c:	e7ec      	b.n	1a003af8 <vQueueWaitForMessageRestricted+0x2c>

1a003b1e <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a003b1e:	f100 0308 	add.w	r3, r0, #8
1a003b22:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a003b24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a003b28:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a003b2a:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a003b2c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a003b2e:	2300      	movs	r3, #0
1a003b30:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a003b32:	4770      	bx	lr

1a003b34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a003b34:	2300      	movs	r3, #0
1a003b36:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a003b38:	4770      	bx	lr

1a003b3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a003b3a:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a003b3c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a003b3e:	689a      	ldr	r2, [r3, #8]
1a003b40:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a003b42:	689a      	ldr	r2, [r3, #8]
1a003b44:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a003b46:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a003b48:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a003b4a:	6803      	ldr	r3, [r0, #0]
1a003b4c:	3301      	adds	r3, #1
1a003b4e:	6003      	str	r3, [r0, #0]
}
1a003b50:	4770      	bx	lr

1a003b52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a003b52:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a003b54:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a003b56:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a003b5a:	d002      	beq.n	1a003b62 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a003b5c:	f100 0208 	add.w	r2, r0, #8
1a003b60:	e002      	b.n	1a003b68 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a003b62:	6902      	ldr	r2, [r0, #16]
1a003b64:	e004      	b.n	1a003b70 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a003b66:	461a      	mov	r2, r3
1a003b68:	6853      	ldr	r3, [r2, #4]
1a003b6a:	681c      	ldr	r4, [r3, #0]
1a003b6c:	42ac      	cmp	r4, r5
1a003b6e:	d9fa      	bls.n	1a003b66 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a003b70:	6853      	ldr	r3, [r2, #4]
1a003b72:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a003b74:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a003b76:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a003b78:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a003b7a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a003b7c:	6803      	ldr	r3, [r0, #0]
1a003b7e:	3301      	adds	r3, #1
1a003b80:	6003      	str	r3, [r0, #0]
}
1a003b82:	bc30      	pop	{r4, r5}
1a003b84:	4770      	bx	lr

1a003b86 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a003b86:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a003b88:	6842      	ldr	r2, [r0, #4]
1a003b8a:	6881      	ldr	r1, [r0, #8]
1a003b8c:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a003b8e:	6882      	ldr	r2, [r0, #8]
1a003b90:	6841      	ldr	r1, [r0, #4]
1a003b92:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a003b94:	685a      	ldr	r2, [r3, #4]
1a003b96:	4282      	cmp	r2, r0
1a003b98:	d006      	beq.n	1a003ba8 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a003b9a:	2200      	movs	r2, #0
1a003b9c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a003b9e:	681a      	ldr	r2, [r3, #0]
1a003ba0:	3a01      	subs	r2, #1
1a003ba2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a003ba4:	6818      	ldr	r0, [r3, #0]
}
1a003ba6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a003ba8:	6882      	ldr	r2, [r0, #8]
1a003baa:	605a      	str	r2, [r3, #4]
1a003bac:	e7f5      	b.n	1a003b9a <uxListRemove+0x14>
1a003bae:	Address 0x000000001a003bae is out of bounds.


1a003bb0 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a003bb0:	4b03      	ldr	r3, [pc, #12]	; (1a003bc0 <vApplicationGetIdleTaskMemory+0x10>)
1a003bb2:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a003bb4:	4b03      	ldr	r3, [pc, #12]	; (1a003bc4 <vApplicationGetIdleTaskMemory+0x14>)
1a003bb6:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a003bb8:	235a      	movs	r3, #90	; 0x5a
1a003bba:	6013      	str	r3, [r2, #0]
}
1a003bbc:	4770      	bx	lr
1a003bbe:	bf00      	nop
1a003bc0:	10003150 	.word	0x10003150
1a003bc4:	10002a48 	.word	0x10002a48

1a003bc8 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a003bc8:	4b03      	ldr	r3, [pc, #12]	; (1a003bd8 <vApplicationGetTimerTaskMemory+0x10>)
1a003bca:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a003bcc:	4b03      	ldr	r3, [pc, #12]	; (1a003bdc <vApplicationGetTimerTaskMemory+0x14>)
1a003bce:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a003bd0:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a003bd4:	6013      	str	r3, [r2, #0]
1a003bd6:	4770      	bx	lr
1a003bd8:	100031b0 	.word	0x100031b0
1a003bdc:	10002bb0 	.word	0x10002bb0

1a003be0 <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a003be0:	b510      	push	{r4, lr}
1a003be2:	b082      	sub	sp, #8
1a003be4:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a003be6:	9001      	str	r0, [sp, #4]
1a003be8:	2300      	movs	r3, #0
1a003bea:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a003bec:	f001 f8ba 	bl	1a004d64 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a003bf0:	9901      	ldr	r1, [sp, #4]
1a003bf2:	4622      	mov	r2, r4
1a003bf4:	4804      	ldr	r0, [pc, #16]	; (1a003c08 <vAssertCalled+0x28>)
1a003bf6:	f003 fe93 	bl	1a007920 <iprintf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a003bfa:	9b00      	ldr	r3, [sp, #0]
1a003bfc:	2b00      	cmp	r3, #0
1a003bfe:	d0fc      	beq.n	1a003bfa <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a003c00:	f001 f8d2 	bl	1a004da8 <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a003c04:	b002      	add	sp, #8
1a003c06:	bd10      	pop	{r4, pc}
1a003c08:	1a008924 	.word	0x1a008924

1a003c0c <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

WEAK void vApplicationMallocFailedHook( void )
{
1a003c0c:	b508      	push	{r3, lr}
   // parts of the demo application.  If heap_1.c, heap_2.c or heap_4.c are used,
   // then the size of the heap available to pvPortMalloc() is defined by
   // configTOTAL_HEAP_SIZE in FreeRTOSConfig.h, and the xPortGetFreeHeapSize()
   // API function can be used to query the size of free heap space that remains.
   // More information is provided in the book text.
   printf( "Application Malloc Failed Hook!\r\n" );
1a003c0e:	4804      	ldr	r0, [pc, #16]	; (1a003c20 <vApplicationMallocFailedHook+0x14>)
1a003c10:	f003 fefa 	bl	1a007a08 <puts>
   vAssertCalled( __LINE__, __FILE__ );
1a003c14:	4903      	ldr	r1, [pc, #12]	; (1a003c24 <vApplicationMallocFailedHook+0x18>)
1a003c16:	202c      	movs	r0, #44	; 0x2c
1a003c18:	f7ff ffe2 	bl	1a003be0 <vAssertCalled>
}
1a003c1c:	bd08      	pop	{r3, pc}
1a003c1e:	bf00      	nop
1a003c20:	1a0088b0 	.word	0x1a0088b0
1a003c24:	1a0088d4 	.word	0x1a0088d4

1a003c28 <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a003c28:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a003c2a:	4804      	ldr	r0, [pc, #16]	; (1a003c3c <vApplicationStackOverflowHook+0x14>)
1a003c2c:	f003 fe78 	bl	1a007920 <iprintf>
   vAssertCalled( __LINE__, __FILE__ );
1a003c30:	4903      	ldr	r1, [pc, #12]	; (1a003c40 <vApplicationStackOverflowHook+0x18>)
1a003c32:	2050      	movs	r0, #80	; 0x50
1a003c34:	f7ff ffd4 	bl	1a003be0 <vAssertCalled>
}
1a003c38:	bd08      	pop	{r3, pc}
1a003c3a:	bf00      	nop
1a003c3c:	1a0088f4 	.word	0x1a0088f4
1a003c40:	1a0088d4 	.word	0x1a0088d4

1a003c44 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a003c44:	4b08      	ldr	r3, [pc, #32]	; (1a003c68 <prvResetNextTaskUnblockTime+0x24>)
1a003c46:	681b      	ldr	r3, [r3, #0]
1a003c48:	681b      	ldr	r3, [r3, #0]
1a003c4a:	b13b      	cbz	r3, 1a003c5c <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a003c4c:	4b06      	ldr	r3, [pc, #24]	; (1a003c68 <prvResetNextTaskUnblockTime+0x24>)
1a003c4e:	681b      	ldr	r3, [r3, #0]
1a003c50:	68db      	ldr	r3, [r3, #12]
1a003c52:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a003c54:	685a      	ldr	r2, [r3, #4]
1a003c56:	4b05      	ldr	r3, [pc, #20]	; (1a003c6c <prvResetNextTaskUnblockTime+0x28>)
1a003c58:	601a      	str	r2, [r3, #0]
	}
}
1a003c5a:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a003c5c:	4b03      	ldr	r3, [pc, #12]	; (1a003c6c <prvResetNextTaskUnblockTime+0x28>)
1a003c5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a003c62:	601a      	str	r2, [r3, #0]
1a003c64:	4770      	bx	lr
1a003c66:	bf00      	nop
1a003c68:	10003214 	.word	0x10003214
1a003c6c:	100032e8 	.word	0x100032e8

1a003c70 <prvInitialiseNewTask>:
{
1a003c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a003c74:	4681      	mov	r9, r0
1a003c76:	460d      	mov	r5, r1
1a003c78:	4617      	mov	r7, r2
1a003c7a:	469a      	mov	sl, r3
1a003c7c:	9e08      	ldr	r6, [sp, #32]
1a003c7e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a003c82:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a003c84:	0092      	lsls	r2, r2, #2
1a003c86:	21a5      	movs	r1, #165	; 0xa5
1a003c88:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a003c8a:	f003 fd98 	bl	1a0077be <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a003c8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a003c90:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a003c94:	3a01      	subs	r2, #1
1a003c96:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a003c9a:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a003c9e:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a003ca0:	2300      	movs	r3, #0
1a003ca2:	2b0f      	cmp	r3, #15
1a003ca4:	d807      	bhi.n	1a003cb6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a003ca6:	5ce9      	ldrb	r1, [r5, r3]
1a003ca8:	18e2      	adds	r2, r4, r3
1a003caa:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a003cae:	5cea      	ldrb	r2, [r5, r3]
1a003cb0:	b10a      	cbz	r2, 1a003cb6 <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a003cb2:	3301      	adds	r3, #1
1a003cb4:	e7f5      	b.n	1a003ca2 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a003cb6:	2300      	movs	r3, #0
1a003cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a003cbc:	2e06      	cmp	r6, #6
1a003cbe:	d900      	bls.n	1a003cc2 <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a003cc0:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a003cc2:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a003cc4:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a003cc6:	2500      	movs	r5, #0
1a003cc8:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a003cca:	1d20      	adds	r0, r4, #4
1a003ccc:	f7ff ff32 	bl	1a003b34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a003cd0:	f104 0018 	add.w	r0, r4, #24
1a003cd4:	f7ff ff2e 	bl	1a003b34 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a003cd8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a003cda:	f1c6 0607 	rsb	r6, r6, #7
1a003cde:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a003ce0:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a003ce2:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a003ce4:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a003ce8:	4652      	mov	r2, sl
1a003cea:	4649      	mov	r1, r9
1a003cec:	4638      	mov	r0, r7
1a003cee:	f001 f80b 	bl	1a004d08 <pxPortInitialiseStack>
1a003cf2:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a003cf4:	f1b8 0f00 	cmp.w	r8, #0
1a003cf8:	d001      	beq.n	1a003cfe <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a003cfa:	f8c8 4000 	str.w	r4, [r8]
}
1a003cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003d02:	Address 0x000000001a003d02 is out of bounds.


1a003d04 <prvInitialiseTaskLists>:
{
1a003d04:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a003d06:	2400      	movs	r4, #0
1a003d08:	e007      	b.n	1a003d1a <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a003d0a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a003d0e:	0093      	lsls	r3, r2, #2
1a003d10:	480e      	ldr	r0, [pc, #56]	; (1a003d4c <prvInitialiseTaskLists+0x48>)
1a003d12:	4418      	add	r0, r3
1a003d14:	f7ff ff03 	bl	1a003b1e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a003d18:	3401      	adds	r4, #1
1a003d1a:	2c06      	cmp	r4, #6
1a003d1c:	d9f5      	bls.n	1a003d0a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a003d1e:	4d0c      	ldr	r5, [pc, #48]	; (1a003d50 <prvInitialiseTaskLists+0x4c>)
1a003d20:	4628      	mov	r0, r5
1a003d22:	f7ff fefc 	bl	1a003b1e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a003d26:	4c0b      	ldr	r4, [pc, #44]	; (1a003d54 <prvInitialiseTaskLists+0x50>)
1a003d28:	4620      	mov	r0, r4
1a003d2a:	f7ff fef8 	bl	1a003b1e <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a003d2e:	480a      	ldr	r0, [pc, #40]	; (1a003d58 <prvInitialiseTaskLists+0x54>)
1a003d30:	f7ff fef5 	bl	1a003b1e <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a003d34:	4809      	ldr	r0, [pc, #36]	; (1a003d5c <prvInitialiseTaskLists+0x58>)
1a003d36:	f7ff fef2 	bl	1a003b1e <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a003d3a:	4809      	ldr	r0, [pc, #36]	; (1a003d60 <prvInitialiseTaskLists+0x5c>)
1a003d3c:	f7ff feef 	bl	1a003b1e <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a003d40:	4b08      	ldr	r3, [pc, #32]	; (1a003d64 <prvInitialiseTaskLists+0x60>)
1a003d42:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a003d44:	4b08      	ldr	r3, [pc, #32]	; (1a003d68 <prvInitialiseTaskLists+0x64>)
1a003d46:	601c      	str	r4, [r3, #0]
}
1a003d48:	bd38      	pop	{r3, r4, r5, pc}
1a003d4a:	bf00      	nop
1a003d4c:	1000321c 	.word	0x1000321c
1a003d50:	100032c0 	.word	0x100032c0
1a003d54:	100032d4 	.word	0x100032d4
1a003d58:	100032f0 	.word	0x100032f0
1a003d5c:	1000331c 	.word	0x1000331c
1a003d60:	10003308 	.word	0x10003308
1a003d64:	10003214 	.word	0x10003214
1a003d68:	10003218 	.word	0x10003218

1a003d6c <prvAddNewTaskToReadyList>:
{
1a003d6c:	b510      	push	{r4, lr}
1a003d6e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a003d70:	f000 fff8 	bl	1a004d64 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a003d74:	4a21      	ldr	r2, [pc, #132]	; (1a003dfc <prvAddNewTaskToReadyList+0x90>)
1a003d76:	6813      	ldr	r3, [r2, #0]
1a003d78:	3301      	adds	r3, #1
1a003d7a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a003d7c:	4b20      	ldr	r3, [pc, #128]	; (1a003e00 <prvAddNewTaskToReadyList+0x94>)
1a003d7e:	681b      	ldr	r3, [r3, #0]
1a003d80:	b15b      	cbz	r3, 1a003d9a <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a003d82:	4b20      	ldr	r3, [pc, #128]	; (1a003e04 <prvAddNewTaskToReadyList+0x98>)
1a003d84:	681b      	ldr	r3, [r3, #0]
1a003d86:	b96b      	cbnz	r3, 1a003da4 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a003d88:	4b1d      	ldr	r3, [pc, #116]	; (1a003e00 <prvAddNewTaskToReadyList+0x94>)
1a003d8a:	681b      	ldr	r3, [r3, #0]
1a003d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a003d8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a003d90:	429a      	cmp	r2, r3
1a003d92:	d807      	bhi.n	1a003da4 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a003d94:	4b1a      	ldr	r3, [pc, #104]	; (1a003e00 <prvAddNewTaskToReadyList+0x94>)
1a003d96:	601c      	str	r4, [r3, #0]
1a003d98:	e004      	b.n	1a003da4 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a003d9a:	4b19      	ldr	r3, [pc, #100]	; (1a003e00 <prvAddNewTaskToReadyList+0x94>)
1a003d9c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a003d9e:	6813      	ldr	r3, [r2, #0]
1a003da0:	2b01      	cmp	r3, #1
1a003da2:	d027      	beq.n	1a003df4 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a003da4:	4a18      	ldr	r2, [pc, #96]	; (1a003e08 <prvAddNewTaskToReadyList+0x9c>)
1a003da6:	6813      	ldr	r3, [r2, #0]
1a003da8:	3301      	adds	r3, #1
1a003daa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a003dac:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a003dae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a003db0:	2201      	movs	r2, #1
1a003db2:	409a      	lsls	r2, r3
1a003db4:	4915      	ldr	r1, [pc, #84]	; (1a003e0c <prvAddNewTaskToReadyList+0xa0>)
1a003db6:	6808      	ldr	r0, [r1, #0]
1a003db8:	4302      	orrs	r2, r0
1a003dba:	600a      	str	r2, [r1, #0]
1a003dbc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a003dc0:	009a      	lsls	r2, r3, #2
1a003dc2:	1d21      	adds	r1, r4, #4
1a003dc4:	4812      	ldr	r0, [pc, #72]	; (1a003e10 <prvAddNewTaskToReadyList+0xa4>)
1a003dc6:	4410      	add	r0, r2
1a003dc8:	f7ff feb7 	bl	1a003b3a <vListInsertEnd>
	taskEXIT_CRITICAL();
1a003dcc:	f000 ffec 	bl	1a004da8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a003dd0:	4b0c      	ldr	r3, [pc, #48]	; (1a003e04 <prvAddNewTaskToReadyList+0x98>)
1a003dd2:	681b      	ldr	r3, [r3, #0]
1a003dd4:	b16b      	cbz	r3, 1a003df2 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a003dd6:	4b0a      	ldr	r3, [pc, #40]	; (1a003e00 <prvAddNewTaskToReadyList+0x94>)
1a003dd8:	681b      	ldr	r3, [r3, #0]
1a003dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a003ddc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a003dde:	429a      	cmp	r2, r3
1a003de0:	d207      	bcs.n	1a003df2 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a003de2:	4b0c      	ldr	r3, [pc, #48]	; (1a003e14 <prvAddNewTaskToReadyList+0xa8>)
1a003de4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a003de8:	601a      	str	r2, [r3, #0]
1a003dea:	f3bf 8f4f 	dsb	sy
1a003dee:	f3bf 8f6f 	isb	sy
}
1a003df2:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a003df4:	f7ff ff86 	bl	1a003d04 <prvInitialiseTaskLists>
1a003df8:	e7d4      	b.n	1a003da4 <prvAddNewTaskToReadyList+0x38>
1a003dfa:	bf00      	nop
1a003dfc:	100032a8 	.word	0x100032a8
1a003e00:	10003210 	.word	0x10003210
1a003e04:	10003304 	.word	0x10003304
1a003e08:	100032b8 	.word	0x100032b8
1a003e0c:	100032bc 	.word	0x100032bc
1a003e10:	1000321c 	.word	0x1000321c
1a003e14:	e000ed04 	.word	0xe000ed04

1a003e18 <prvDeleteTCB>:
	{
1a003e18:	b510      	push	{r4, lr}
1a003e1a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a003e1c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a003e20:	b933      	cbnz	r3, 1a003e30 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a003e22:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a003e24:	f7ff f9e4 	bl	1a0031f0 <vPortFree>
				vPortFree( pxTCB );
1a003e28:	4620      	mov	r0, r4
1a003e2a:	f7ff f9e1 	bl	1a0031f0 <vPortFree>
	}
1a003e2e:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a003e30:	2b01      	cmp	r3, #1
1a003e32:	d00a      	beq.n	1a003e4a <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a003e34:	2b02      	cmp	r3, #2
1a003e36:	d0fa      	beq.n	1a003e2e <prvDeleteTCB+0x16>
1a003e38:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003e3c:	f383 8811 	msr	BASEPRI, r3
1a003e40:	f3bf 8f6f 	isb	sy
1a003e44:	f3bf 8f4f 	dsb	sy
1a003e48:	e7fe      	b.n	1a003e48 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a003e4a:	f7ff f9d1 	bl	1a0031f0 <vPortFree>
1a003e4e:	e7ee      	b.n	1a003e2e <prvDeleteTCB+0x16>

1a003e50 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a003e50:	4b0f      	ldr	r3, [pc, #60]	; (1a003e90 <prvCheckTasksWaitingTermination+0x40>)
1a003e52:	681b      	ldr	r3, [r3, #0]
1a003e54:	b1d3      	cbz	r3, 1a003e8c <prvCheckTasksWaitingTermination+0x3c>
{
1a003e56:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a003e58:	f000 ff84 	bl	1a004d64 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a003e5c:	4b0d      	ldr	r3, [pc, #52]	; (1a003e94 <prvCheckTasksWaitingTermination+0x44>)
1a003e5e:	68db      	ldr	r3, [r3, #12]
1a003e60:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a003e62:	1d20      	adds	r0, r4, #4
1a003e64:	f7ff fe8f 	bl	1a003b86 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a003e68:	4a0b      	ldr	r2, [pc, #44]	; (1a003e98 <prvCheckTasksWaitingTermination+0x48>)
1a003e6a:	6813      	ldr	r3, [r2, #0]
1a003e6c:	3b01      	subs	r3, #1
1a003e6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a003e70:	4a07      	ldr	r2, [pc, #28]	; (1a003e90 <prvCheckTasksWaitingTermination+0x40>)
1a003e72:	6813      	ldr	r3, [r2, #0]
1a003e74:	3b01      	subs	r3, #1
1a003e76:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a003e78:	f000 ff96 	bl	1a004da8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a003e7c:	4620      	mov	r0, r4
1a003e7e:	f7ff ffcb 	bl	1a003e18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a003e82:	4b03      	ldr	r3, [pc, #12]	; (1a003e90 <prvCheckTasksWaitingTermination+0x40>)
1a003e84:	681b      	ldr	r3, [r3, #0]
1a003e86:	2b00      	cmp	r3, #0
1a003e88:	d1e6      	bne.n	1a003e58 <prvCheckTasksWaitingTermination+0x8>
}
1a003e8a:	bd10      	pop	{r4, pc}
1a003e8c:	4770      	bx	lr
1a003e8e:	bf00      	nop
1a003e90:	100032ac 	.word	0x100032ac
1a003e94:	1000331c 	.word	0x1000331c
1a003e98:	100032a8 	.word	0x100032a8

1a003e9c <prvIdleTask>:
{
1a003e9c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a003e9e:	f7ff ffd7 	bl	1a003e50 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a003ea2:	4b06      	ldr	r3, [pc, #24]	; (1a003ebc <prvIdleTask+0x20>)
1a003ea4:	681b      	ldr	r3, [r3, #0]
1a003ea6:	2b01      	cmp	r3, #1
1a003ea8:	d9f9      	bls.n	1a003e9e <prvIdleTask+0x2>
				taskYIELD();
1a003eaa:	4b05      	ldr	r3, [pc, #20]	; (1a003ec0 <prvIdleTask+0x24>)
1a003eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a003eb0:	601a      	str	r2, [r3, #0]
1a003eb2:	f3bf 8f4f 	dsb	sy
1a003eb6:	f3bf 8f6f 	isb	sy
1a003eba:	e7f0      	b.n	1a003e9e <prvIdleTask+0x2>
1a003ebc:	1000321c 	.word	0x1000321c
1a003ec0:	e000ed04 	.word	0xe000ed04

1a003ec4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a003ec4:	b570      	push	{r4, r5, r6, lr}
1a003ec6:	4604      	mov	r4, r0
1a003ec8:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a003eca:	4b1d      	ldr	r3, [pc, #116]	; (1a003f40 <prvAddCurrentTaskToDelayedList+0x7c>)
1a003ecc:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a003ece:	4b1d      	ldr	r3, [pc, #116]	; (1a003f44 <prvAddCurrentTaskToDelayedList+0x80>)
1a003ed0:	6818      	ldr	r0, [r3, #0]
1a003ed2:	3004      	adds	r0, #4
1a003ed4:	f7ff fe57 	bl	1a003b86 <uxListRemove>
1a003ed8:	b950      	cbnz	r0, 1a003ef0 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a003eda:	4b1a      	ldr	r3, [pc, #104]	; (1a003f44 <prvAddCurrentTaskToDelayedList+0x80>)
1a003edc:	681b      	ldr	r3, [r3, #0]
1a003ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a003ee0:	2301      	movs	r3, #1
1a003ee2:	fa03 f202 	lsl.w	r2, r3, r2
1a003ee6:	4918      	ldr	r1, [pc, #96]	; (1a003f48 <prvAddCurrentTaskToDelayedList+0x84>)
1a003ee8:	680b      	ldr	r3, [r1, #0]
1a003eea:	ea23 0302 	bic.w	r3, r3, r2
1a003eee:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a003ef0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a003ef4:	d013      	beq.n	1a003f1e <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a003ef6:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a003ef8:	4b12      	ldr	r3, [pc, #72]	; (1a003f44 <prvAddCurrentTaskToDelayedList+0x80>)
1a003efa:	681b      	ldr	r3, [r3, #0]
1a003efc:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a003efe:	42a5      	cmp	r5, r4
1a003f00:	d816      	bhi.n	1a003f30 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a003f02:	4b12      	ldr	r3, [pc, #72]	; (1a003f4c <prvAddCurrentTaskToDelayedList+0x88>)
1a003f04:	6818      	ldr	r0, [r3, #0]
1a003f06:	4b0f      	ldr	r3, [pc, #60]	; (1a003f44 <prvAddCurrentTaskToDelayedList+0x80>)
1a003f08:	6819      	ldr	r1, [r3, #0]
1a003f0a:	3104      	adds	r1, #4
1a003f0c:	f7ff fe21 	bl	1a003b52 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a003f10:	4b0f      	ldr	r3, [pc, #60]	; (1a003f50 <prvAddCurrentTaskToDelayedList+0x8c>)
1a003f12:	681b      	ldr	r3, [r3, #0]
1a003f14:	42a3      	cmp	r3, r4
1a003f16:	d912      	bls.n	1a003f3e <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a003f18:	4b0d      	ldr	r3, [pc, #52]	; (1a003f50 <prvAddCurrentTaskToDelayedList+0x8c>)
1a003f1a:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a003f1c:	e00f      	b.n	1a003f3e <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a003f1e:	2e00      	cmp	r6, #0
1a003f20:	d0e9      	beq.n	1a003ef6 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a003f22:	4b08      	ldr	r3, [pc, #32]	; (1a003f44 <prvAddCurrentTaskToDelayedList+0x80>)
1a003f24:	6819      	ldr	r1, [r3, #0]
1a003f26:	3104      	adds	r1, #4
1a003f28:	480a      	ldr	r0, [pc, #40]	; (1a003f54 <prvAddCurrentTaskToDelayedList+0x90>)
1a003f2a:	f7ff fe06 	bl	1a003b3a <vListInsertEnd>
1a003f2e:	e006      	b.n	1a003f3e <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a003f30:	4b09      	ldr	r3, [pc, #36]	; (1a003f58 <prvAddCurrentTaskToDelayedList+0x94>)
1a003f32:	6818      	ldr	r0, [r3, #0]
1a003f34:	4b03      	ldr	r3, [pc, #12]	; (1a003f44 <prvAddCurrentTaskToDelayedList+0x80>)
1a003f36:	6819      	ldr	r1, [r3, #0]
1a003f38:	3104      	adds	r1, #4
1a003f3a:	f7ff fe0a 	bl	1a003b52 <vListInsert>
}
1a003f3e:	bd70      	pop	{r4, r5, r6, pc}
1a003f40:	10003330 	.word	0x10003330
1a003f44:	10003210 	.word	0x10003210
1a003f48:	100032bc 	.word	0x100032bc
1a003f4c:	10003214 	.word	0x10003214
1a003f50:	100032e8 	.word	0x100032e8
1a003f54:	10003308 	.word	0x10003308
1a003f58:	10003218 	.word	0x10003218

1a003f5c <xTaskCreateStatic>:
	{
1a003f5c:	b570      	push	{r4, r5, r6, lr}
1a003f5e:	b086      	sub	sp, #24
1a003f60:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a003f62:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a003f64:	b945      	cbnz	r5, 1a003f78 <xTaskCreateStatic+0x1c>
1a003f66:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003f6a:	f383 8811 	msr	BASEPRI, r3
1a003f6e:	f3bf 8f6f 	isb	sy
1a003f72:	f3bf 8f4f 	dsb	sy
1a003f76:	e7fe      	b.n	1a003f76 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a003f78:	b944      	cbnz	r4, 1a003f8c <xTaskCreateStatic+0x30>
1a003f7a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003f7e:	f383 8811 	msr	BASEPRI, r3
1a003f82:	f3bf 8f6f 	isb	sy
1a003f86:	f3bf 8f4f 	dsb	sy
1a003f8a:	e7fe      	b.n	1a003f8a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a003f8c:	2660      	movs	r6, #96	; 0x60
1a003f8e:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a003f90:	9e04      	ldr	r6, [sp, #16]
1a003f92:	2e60      	cmp	r6, #96	; 0x60
1a003f94:	d008      	beq.n	1a003fa8 <xTaskCreateStatic+0x4c>
1a003f96:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003f9a:	f383 8811 	msr	BASEPRI, r3
1a003f9e:	f3bf 8f6f 	isb	sy
1a003fa2:	f3bf 8f4f 	dsb	sy
1a003fa6:	e7fe      	b.n	1a003fa6 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a003fa8:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a003faa:	2502      	movs	r5, #2
1a003fac:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a003fb0:	2500      	movs	r5, #0
1a003fb2:	9503      	str	r5, [sp, #12]
1a003fb4:	9402      	str	r4, [sp, #8]
1a003fb6:	ad05      	add	r5, sp, #20
1a003fb8:	9501      	str	r5, [sp, #4]
1a003fba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a003fbc:	9500      	str	r5, [sp, #0]
1a003fbe:	f7ff fe57 	bl	1a003c70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a003fc2:	4620      	mov	r0, r4
1a003fc4:	f7ff fed2 	bl	1a003d6c <prvAddNewTaskToReadyList>
	}
1a003fc8:	9805      	ldr	r0, [sp, #20]
1a003fca:	b006      	add	sp, #24
1a003fcc:	bd70      	pop	{r4, r5, r6, pc}

1a003fce <xTaskCreate>:
	{
1a003fce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a003fd2:	b085      	sub	sp, #20
1a003fd4:	4607      	mov	r7, r0
1a003fd6:	4688      	mov	r8, r1
1a003fd8:	4615      	mov	r5, r2
1a003fda:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a003fdc:	0090      	lsls	r0, r2, #2
1a003fde:	f7ff f879 	bl	1a0030d4 <pvPortMalloc>
			if( pxStack != NULL )
1a003fe2:	b308      	cbz	r0, 1a004028 <xTaskCreate+0x5a>
1a003fe4:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a003fe6:	2060      	movs	r0, #96	; 0x60
1a003fe8:	f7ff f874 	bl	1a0030d4 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a003fec:	4604      	mov	r4, r0
1a003fee:	b1b8      	cbz	r0, 1a004020 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a003ff0:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a003ff2:	b1e4      	cbz	r4, 1a00402e <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a003ff4:	2300      	movs	r3, #0
1a003ff6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a003ffa:	9303      	str	r3, [sp, #12]
1a003ffc:	9402      	str	r4, [sp, #8]
1a003ffe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a004000:	9301      	str	r3, [sp, #4]
1a004002:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a004004:	9300      	str	r3, [sp, #0]
1a004006:	464b      	mov	r3, r9
1a004008:	462a      	mov	r2, r5
1a00400a:	4641      	mov	r1, r8
1a00400c:	4638      	mov	r0, r7
1a00400e:	f7ff fe2f 	bl	1a003c70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a004012:	4620      	mov	r0, r4
1a004014:	f7ff feaa 	bl	1a003d6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a004018:	2001      	movs	r0, #1
	}
1a00401a:	b005      	add	sp, #20
1a00401c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a004020:	4630      	mov	r0, r6
1a004022:	f7ff f8e5 	bl	1a0031f0 <vPortFree>
1a004026:	e7e4      	b.n	1a003ff2 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a004028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00402c:	e7f5      	b.n	1a00401a <xTaskCreate+0x4c>
1a00402e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a004032:	e7f2      	b.n	1a00401a <xTaskCreate+0x4c>

1a004034 <vTaskStartScheduler>:
{
1a004034:	b510      	push	{r4, lr}
1a004036:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a004038:	2400      	movs	r4, #0
1a00403a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a00403c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a00403e:	aa07      	add	r2, sp, #28
1a004040:	a906      	add	r1, sp, #24
1a004042:	a805      	add	r0, sp, #20
1a004044:	f7ff fdb4 	bl	1a003bb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a004048:	9b05      	ldr	r3, [sp, #20]
1a00404a:	9302      	str	r3, [sp, #8]
1a00404c:	9b06      	ldr	r3, [sp, #24]
1a00404e:	9301      	str	r3, [sp, #4]
1a004050:	9400      	str	r4, [sp, #0]
1a004052:	4623      	mov	r3, r4
1a004054:	9a07      	ldr	r2, [sp, #28]
1a004056:	4917      	ldr	r1, [pc, #92]	; (1a0040b4 <vTaskStartScheduler+0x80>)
1a004058:	4817      	ldr	r0, [pc, #92]	; (1a0040b8 <vTaskStartScheduler+0x84>)
1a00405a:	f7ff ff7f 	bl	1a003f5c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a00405e:	b140      	cbz	r0, 1a004072 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a004060:	f000 fc66 	bl	1a004930 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a004064:	2801      	cmp	r0, #1
1a004066:	d006      	beq.n	1a004076 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a004068:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00406c:	d018      	beq.n	1a0040a0 <vTaskStartScheduler+0x6c>
}
1a00406e:	b008      	add	sp, #32
1a004070:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a004072:	2000      	movs	r0, #0
1a004074:	e7f6      	b.n	1a004064 <vTaskStartScheduler+0x30>
1a004076:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00407a:	f383 8811 	msr	BASEPRI, r3
1a00407e:	f3bf 8f6f 	isb	sy
1a004082:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a004086:	4b0d      	ldr	r3, [pc, #52]	; (1a0040bc <vTaskStartScheduler+0x88>)
1a004088:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00408c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a00408e:	4b0c      	ldr	r3, [pc, #48]	; (1a0040c0 <vTaskStartScheduler+0x8c>)
1a004090:	2201      	movs	r2, #1
1a004092:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a004094:	4b0b      	ldr	r3, [pc, #44]	; (1a0040c4 <vTaskStartScheduler+0x90>)
1a004096:	2200      	movs	r2, #0
1a004098:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a00409a:	f000 ff05 	bl	1a004ea8 <xPortStartScheduler>
1a00409e:	e7e6      	b.n	1a00406e <vTaskStartScheduler+0x3a>
1a0040a0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0040a4:	f383 8811 	msr	BASEPRI, r3
1a0040a8:	f3bf 8f6f 	isb	sy
1a0040ac:	f3bf 8f4f 	dsb	sy
1a0040b0:	e7fe      	b.n	1a0040b0 <vTaskStartScheduler+0x7c>
1a0040b2:	bf00      	nop
1a0040b4:	1a008964 	.word	0x1a008964
1a0040b8:	1a003e9d 	.word	0x1a003e9d
1a0040bc:	100032e8 	.word	0x100032e8
1a0040c0:	10003304 	.word	0x10003304
1a0040c4:	10003330 	.word	0x10003330

1a0040c8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a0040c8:	4a02      	ldr	r2, [pc, #8]	; (1a0040d4 <vTaskSuspendAll+0xc>)
1a0040ca:	6813      	ldr	r3, [r2, #0]
1a0040cc:	3301      	adds	r3, #1
1a0040ce:	6013      	str	r3, [r2, #0]
}
1a0040d0:	4770      	bx	lr
1a0040d2:	bf00      	nop
1a0040d4:	100032b4 	.word	0x100032b4

1a0040d8 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a0040d8:	4b01      	ldr	r3, [pc, #4]	; (1a0040e0 <xTaskGetTickCount+0x8>)
1a0040da:	6818      	ldr	r0, [r3, #0]
}
1a0040dc:	4770      	bx	lr
1a0040de:	bf00      	nop
1a0040e0:	10003330 	.word	0x10003330

1a0040e4 <xTaskIncrementTick>:
{
1a0040e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0040e6:	4b3a      	ldr	r3, [pc, #232]	; (1a0041d0 <xTaskIncrementTick+0xec>)
1a0040e8:	681b      	ldr	r3, [r3, #0]
1a0040ea:	2b00      	cmp	r3, #0
1a0040ec:	d164      	bne.n	1a0041b8 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a0040ee:	4b39      	ldr	r3, [pc, #228]	; (1a0041d4 <xTaskIncrementTick+0xf0>)
1a0040f0:	681d      	ldr	r5, [r3, #0]
1a0040f2:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a0040f4:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a0040f6:	b9c5      	cbnz	r5, 1a00412a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a0040f8:	4b37      	ldr	r3, [pc, #220]	; (1a0041d8 <xTaskIncrementTick+0xf4>)
1a0040fa:	681b      	ldr	r3, [r3, #0]
1a0040fc:	681b      	ldr	r3, [r3, #0]
1a0040fe:	b143      	cbz	r3, 1a004112 <xTaskIncrementTick+0x2e>
1a004100:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004104:	f383 8811 	msr	BASEPRI, r3
1a004108:	f3bf 8f6f 	isb	sy
1a00410c:	f3bf 8f4f 	dsb	sy
1a004110:	e7fe      	b.n	1a004110 <xTaskIncrementTick+0x2c>
1a004112:	4a31      	ldr	r2, [pc, #196]	; (1a0041d8 <xTaskIncrementTick+0xf4>)
1a004114:	6811      	ldr	r1, [r2, #0]
1a004116:	4b31      	ldr	r3, [pc, #196]	; (1a0041dc <xTaskIncrementTick+0xf8>)
1a004118:	6818      	ldr	r0, [r3, #0]
1a00411a:	6010      	str	r0, [r2, #0]
1a00411c:	6019      	str	r1, [r3, #0]
1a00411e:	4a30      	ldr	r2, [pc, #192]	; (1a0041e0 <xTaskIncrementTick+0xfc>)
1a004120:	6813      	ldr	r3, [r2, #0]
1a004122:	3301      	adds	r3, #1
1a004124:	6013      	str	r3, [r2, #0]
1a004126:	f7ff fd8d 	bl	1a003c44 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a00412a:	4b2e      	ldr	r3, [pc, #184]	; (1a0041e4 <xTaskIncrementTick+0x100>)
1a00412c:	681b      	ldr	r3, [r3, #0]
1a00412e:	42ab      	cmp	r3, r5
1a004130:	d938      	bls.n	1a0041a4 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a004132:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a004134:	4b2c      	ldr	r3, [pc, #176]	; (1a0041e8 <xTaskIncrementTick+0x104>)
1a004136:	681b      	ldr	r3, [r3, #0]
1a004138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00413a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00413e:	009a      	lsls	r2, r3, #2
1a004140:	4b2a      	ldr	r3, [pc, #168]	; (1a0041ec <xTaskIncrementTick+0x108>)
1a004142:	589b      	ldr	r3, [r3, r2]
1a004144:	2b01      	cmp	r3, #1
1a004146:	d93c      	bls.n	1a0041c2 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a004148:	2401      	movs	r4, #1
1a00414a:	e03a      	b.n	1a0041c2 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a00414c:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a00414e:	4b22      	ldr	r3, [pc, #136]	; (1a0041d8 <xTaskIncrementTick+0xf4>)
1a004150:	681b      	ldr	r3, [r3, #0]
1a004152:	681b      	ldr	r3, [r3, #0]
1a004154:	b343      	cbz	r3, 1a0041a8 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a004156:	4b20      	ldr	r3, [pc, #128]	; (1a0041d8 <xTaskIncrementTick+0xf4>)
1a004158:	681b      	ldr	r3, [r3, #0]
1a00415a:	68db      	ldr	r3, [r3, #12]
1a00415c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a00415e:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a004160:	429d      	cmp	r5, r3
1a004162:	d326      	bcc.n	1a0041b2 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a004164:	1d37      	adds	r7, r6, #4
1a004166:	4638      	mov	r0, r7
1a004168:	f7ff fd0d 	bl	1a003b86 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a00416c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a00416e:	b11b      	cbz	r3, 1a004178 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a004170:	f106 0018 	add.w	r0, r6, #24
1a004174:	f7ff fd07 	bl	1a003b86 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a004178:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a00417a:	2201      	movs	r2, #1
1a00417c:	409a      	lsls	r2, r3
1a00417e:	491c      	ldr	r1, [pc, #112]	; (1a0041f0 <xTaskIncrementTick+0x10c>)
1a004180:	6808      	ldr	r0, [r1, #0]
1a004182:	4302      	orrs	r2, r0
1a004184:	600a      	str	r2, [r1, #0]
1a004186:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00418a:	009a      	lsls	r2, r3, #2
1a00418c:	4639      	mov	r1, r7
1a00418e:	4817      	ldr	r0, [pc, #92]	; (1a0041ec <xTaskIncrementTick+0x108>)
1a004190:	4410      	add	r0, r2
1a004192:	f7ff fcd2 	bl	1a003b3a <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a004196:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a004198:	4b13      	ldr	r3, [pc, #76]	; (1a0041e8 <xTaskIncrementTick+0x104>)
1a00419a:	681b      	ldr	r3, [r3, #0]
1a00419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00419e:	429a      	cmp	r2, r3
1a0041a0:	d2d4      	bcs.n	1a00414c <xTaskIncrementTick+0x68>
1a0041a2:	e7d4      	b.n	1a00414e <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a0041a4:	2400      	movs	r4, #0
1a0041a6:	e7d2      	b.n	1a00414e <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0041a8:	4b0e      	ldr	r3, [pc, #56]	; (1a0041e4 <xTaskIncrementTick+0x100>)
1a0041aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0041ae:	601a      	str	r2, [r3, #0]
					break;
1a0041b0:	e7c0      	b.n	1a004134 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a0041b2:	4a0c      	ldr	r2, [pc, #48]	; (1a0041e4 <xTaskIncrementTick+0x100>)
1a0041b4:	6013      	str	r3, [r2, #0]
						break;
1a0041b6:	e7bd      	b.n	1a004134 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a0041b8:	4a0e      	ldr	r2, [pc, #56]	; (1a0041f4 <xTaskIncrementTick+0x110>)
1a0041ba:	6813      	ldr	r3, [r2, #0]
1a0041bc:	3301      	adds	r3, #1
1a0041be:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a0041c0:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a0041c2:	4b0d      	ldr	r3, [pc, #52]	; (1a0041f8 <xTaskIncrementTick+0x114>)
1a0041c4:	681b      	ldr	r3, [r3, #0]
1a0041c6:	b103      	cbz	r3, 1a0041ca <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a0041c8:	2401      	movs	r4, #1
}
1a0041ca:	4620      	mov	r0, r4
1a0041cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0041ce:	bf00      	nop
1a0041d0:	100032b4 	.word	0x100032b4
1a0041d4:	10003330 	.word	0x10003330
1a0041d8:	10003214 	.word	0x10003214
1a0041dc:	10003218 	.word	0x10003218
1a0041e0:	100032ec 	.word	0x100032ec
1a0041e4:	100032e8 	.word	0x100032e8
1a0041e8:	10003210 	.word	0x10003210
1a0041ec:	1000321c 	.word	0x1000321c
1a0041f0:	100032bc 	.word	0x100032bc
1a0041f4:	100032b0 	.word	0x100032b0
1a0041f8:	10003334 	.word	0x10003334

1a0041fc <xTaskResumeAll>:
{
1a0041fc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a0041fe:	4b33      	ldr	r3, [pc, #204]	; (1a0042cc <xTaskResumeAll+0xd0>)
1a004200:	681b      	ldr	r3, [r3, #0]
1a004202:	b943      	cbnz	r3, 1a004216 <xTaskResumeAll+0x1a>
1a004204:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004208:	f383 8811 	msr	BASEPRI, r3
1a00420c:	f3bf 8f6f 	isb	sy
1a004210:	f3bf 8f4f 	dsb	sy
1a004214:	e7fe      	b.n	1a004214 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a004216:	f000 fda5 	bl	1a004d64 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a00421a:	4b2c      	ldr	r3, [pc, #176]	; (1a0042cc <xTaskResumeAll+0xd0>)
1a00421c:	681a      	ldr	r2, [r3, #0]
1a00421e:	3a01      	subs	r2, #1
1a004220:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a004222:	681b      	ldr	r3, [r3, #0]
1a004224:	2b00      	cmp	r3, #0
1a004226:	d14d      	bne.n	1a0042c4 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a004228:	4b29      	ldr	r3, [pc, #164]	; (1a0042d0 <xTaskResumeAll+0xd4>)
1a00422a:	681b      	ldr	r3, [r3, #0]
1a00422c:	b923      	cbnz	r3, 1a004238 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a00422e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a004230:	f000 fdba 	bl	1a004da8 <vPortExitCritical>
}
1a004234:	4620      	mov	r0, r4
1a004236:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a004238:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a00423a:	4b26      	ldr	r3, [pc, #152]	; (1a0042d4 <xTaskResumeAll+0xd8>)
1a00423c:	681b      	ldr	r3, [r3, #0]
1a00423e:	b31b      	cbz	r3, 1a004288 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a004240:	4b24      	ldr	r3, [pc, #144]	; (1a0042d4 <xTaskResumeAll+0xd8>)
1a004242:	68db      	ldr	r3, [r3, #12]
1a004244:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a004246:	f104 0018 	add.w	r0, r4, #24
1a00424a:	f7ff fc9c 	bl	1a003b86 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00424e:	1d25      	adds	r5, r4, #4
1a004250:	4628      	mov	r0, r5
1a004252:	f7ff fc98 	bl	1a003b86 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a004256:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a004258:	2201      	movs	r2, #1
1a00425a:	409a      	lsls	r2, r3
1a00425c:	491e      	ldr	r1, [pc, #120]	; (1a0042d8 <xTaskResumeAll+0xdc>)
1a00425e:	6808      	ldr	r0, [r1, #0]
1a004260:	4302      	orrs	r2, r0
1a004262:	600a      	str	r2, [r1, #0]
1a004264:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a004268:	009a      	lsls	r2, r3, #2
1a00426a:	4629      	mov	r1, r5
1a00426c:	481b      	ldr	r0, [pc, #108]	; (1a0042dc <xTaskResumeAll+0xe0>)
1a00426e:	4410      	add	r0, r2
1a004270:	f7ff fc63 	bl	1a003b3a <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a004274:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a004276:	4b1a      	ldr	r3, [pc, #104]	; (1a0042e0 <xTaskResumeAll+0xe4>)
1a004278:	681b      	ldr	r3, [r3, #0]
1a00427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00427c:	429a      	cmp	r2, r3
1a00427e:	d3dc      	bcc.n	1a00423a <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a004280:	4b18      	ldr	r3, [pc, #96]	; (1a0042e4 <xTaskResumeAll+0xe8>)
1a004282:	2201      	movs	r2, #1
1a004284:	601a      	str	r2, [r3, #0]
1a004286:	e7d8      	b.n	1a00423a <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a004288:	b10c      	cbz	r4, 1a00428e <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a00428a:	f7ff fcdb 	bl	1a003c44 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a00428e:	4b16      	ldr	r3, [pc, #88]	; (1a0042e8 <xTaskResumeAll+0xec>)
1a004290:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a004292:	b154      	cbz	r4, 1a0042aa <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a004294:	f7ff ff26 	bl	1a0040e4 <xTaskIncrementTick>
1a004298:	b110      	cbz	r0, 1a0042a0 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a00429a:	4b12      	ldr	r3, [pc, #72]	; (1a0042e4 <xTaskResumeAll+0xe8>)
1a00429c:	2201      	movs	r2, #1
1a00429e:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a0042a0:	3c01      	subs	r4, #1
1a0042a2:	d1f7      	bne.n	1a004294 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a0042a4:	4b10      	ldr	r3, [pc, #64]	; (1a0042e8 <xTaskResumeAll+0xec>)
1a0042a6:	2200      	movs	r2, #0
1a0042a8:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a0042aa:	4b0e      	ldr	r3, [pc, #56]	; (1a0042e4 <xTaskResumeAll+0xe8>)
1a0042ac:	681b      	ldr	r3, [r3, #0]
1a0042ae:	b15b      	cbz	r3, 1a0042c8 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a0042b0:	4b0e      	ldr	r3, [pc, #56]	; (1a0042ec <xTaskResumeAll+0xf0>)
1a0042b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0042b6:	601a      	str	r2, [r3, #0]
1a0042b8:	f3bf 8f4f 	dsb	sy
1a0042bc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a0042c0:	2401      	movs	r4, #1
1a0042c2:	e7b5      	b.n	1a004230 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a0042c4:	2400      	movs	r4, #0
1a0042c6:	e7b3      	b.n	1a004230 <xTaskResumeAll+0x34>
1a0042c8:	2400      	movs	r4, #0
1a0042ca:	e7b1      	b.n	1a004230 <xTaskResumeAll+0x34>
1a0042cc:	100032b4 	.word	0x100032b4
1a0042d0:	100032a8 	.word	0x100032a8
1a0042d4:	100032f0 	.word	0x100032f0
1a0042d8:	100032bc 	.word	0x100032bc
1a0042dc:	1000321c 	.word	0x1000321c
1a0042e0:	10003210 	.word	0x10003210
1a0042e4:	10003334 	.word	0x10003334
1a0042e8:	100032b0 	.word	0x100032b0
1a0042ec:	e000ed04 	.word	0xe000ed04

1a0042f0 <vTaskDelayUntil>:
	{
1a0042f0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
1a0042f2:	b150      	cbz	r0, 1a00430a <vTaskDelayUntil+0x1a>
1a0042f4:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
1a0042f6:	b989      	cbnz	r1, 1a00431c <vTaskDelayUntil+0x2c>
1a0042f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0042fc:	f383 8811 	msr	BASEPRI, r3
1a004300:	f3bf 8f6f 	isb	sy
1a004304:	f3bf 8f4f 	dsb	sy
1a004308:	e7fe      	b.n	1a004308 <vTaskDelayUntil+0x18>
1a00430a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00430e:	f383 8811 	msr	BASEPRI, r3
1a004312:	f3bf 8f6f 	isb	sy
1a004316:	f3bf 8f4f 	dsb	sy
1a00431a:	e7fe      	b.n	1a00431a <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
1a00431c:	4b1a      	ldr	r3, [pc, #104]	; (1a004388 <vTaskDelayUntil+0x98>)
1a00431e:	681b      	ldr	r3, [r3, #0]
1a004320:	b143      	cbz	r3, 1a004334 <vTaskDelayUntil+0x44>
1a004322:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004326:	f383 8811 	msr	BASEPRI, r3
1a00432a:	f3bf 8f6f 	isb	sy
1a00432e:	f3bf 8f4f 	dsb	sy
1a004332:	e7fe      	b.n	1a004332 <vTaskDelayUntil+0x42>
1a004334:	460c      	mov	r4, r1
		vTaskSuspendAll();
1a004336:	f7ff fec7 	bl	1a0040c8 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
1a00433a:	4b14      	ldr	r3, [pc, #80]	; (1a00438c <vTaskDelayUntil+0x9c>)
1a00433c:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1a00433e:	682a      	ldr	r2, [r5, #0]
1a004340:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
1a004342:	4282      	cmp	r2, r0
1a004344:	d918      	bls.n	1a004378 <vTaskDelayUntil+0x88>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a004346:	42a2      	cmp	r2, r4
1a004348:	d80c      	bhi.n	1a004364 <vTaskDelayUntil+0x74>
			*pxPreviousWakeTime = xTimeToWake;
1a00434a:	602c      	str	r4, [r5, #0]
		xAlreadyYielded = xTaskResumeAll();
1a00434c:	f7ff ff56 	bl	1a0041fc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a004350:	b938      	cbnz	r0, 1a004362 <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
1a004352:	4b0f      	ldr	r3, [pc, #60]	; (1a004390 <vTaskDelayUntil+0xa0>)
1a004354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a004358:	601a      	str	r2, [r3, #0]
1a00435a:	f3bf 8f4f 	dsb	sy
1a00435e:	f3bf 8f6f 	isb	sy
	}
1a004362:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a004364:	42a0      	cmp	r0, r4
1a004366:	d301      	bcc.n	1a00436c <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
1a004368:	602c      	str	r4, [r5, #0]
1a00436a:	e7ef      	b.n	1a00434c <vTaskDelayUntil+0x5c>
1a00436c:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1a00436e:	2100      	movs	r1, #0
1a004370:	1a20      	subs	r0, r4, r0
1a004372:	f7ff fda7 	bl	1a003ec4 <prvAddCurrentTaskToDelayedList>
1a004376:	e7e9      	b.n	1a00434c <vTaskDelayUntil+0x5c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1a004378:	42a2      	cmp	r2, r4
1a00437a:	d801      	bhi.n	1a004380 <vTaskDelayUntil+0x90>
1a00437c:	42a0      	cmp	r0, r4
1a00437e:	d201      	bcs.n	1a004384 <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
1a004380:	602c      	str	r4, [r5, #0]
1a004382:	e7f4      	b.n	1a00436e <vTaskDelayUntil+0x7e>
1a004384:	602c      	str	r4, [r5, #0]
1a004386:	e7e1      	b.n	1a00434c <vTaskDelayUntil+0x5c>
1a004388:	100032b4 	.word	0x100032b4
1a00438c:	10003330 	.word	0x10003330
1a004390:	e000ed04 	.word	0xe000ed04

1a004394 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a004394:	4b2c      	ldr	r3, [pc, #176]	; (1a004448 <vTaskSwitchContext+0xb4>)
1a004396:	681b      	ldr	r3, [r3, #0]
1a004398:	b11b      	cbz	r3, 1a0043a2 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a00439a:	4b2c      	ldr	r3, [pc, #176]	; (1a00444c <vTaskSwitchContext+0xb8>)
1a00439c:	2201      	movs	r2, #1
1a00439e:	601a      	str	r2, [r3, #0]
1a0043a0:	4770      	bx	lr
{
1a0043a2:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a0043a4:	4b29      	ldr	r3, [pc, #164]	; (1a00444c <vTaskSwitchContext+0xb8>)
1a0043a6:	2200      	movs	r2, #0
1a0043a8:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a0043aa:	4b29      	ldr	r3, [pc, #164]	; (1a004450 <vTaskSwitchContext+0xbc>)
1a0043ac:	681b      	ldr	r3, [r3, #0]
1a0043ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a0043b0:	681a      	ldr	r2, [r3, #0]
1a0043b2:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0043b6:	d103      	bne.n	1a0043c0 <vTaskSwitchContext+0x2c>
1a0043b8:	685a      	ldr	r2, [r3, #4]
1a0043ba:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0043be:	d01b      	beq.n	1a0043f8 <vTaskSwitchContext+0x64>
1a0043c0:	4b23      	ldr	r3, [pc, #140]	; (1a004450 <vTaskSwitchContext+0xbc>)
1a0043c2:	6818      	ldr	r0, [r3, #0]
1a0043c4:	6819      	ldr	r1, [r3, #0]
1a0043c6:	3134      	adds	r1, #52	; 0x34
1a0043c8:	f7ff fc2e 	bl	1a003c28 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0043cc:	4b21      	ldr	r3, [pc, #132]	; (1a004454 <vTaskSwitchContext+0xc0>)
1a0043ce:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a0043d0:	fab3 f383 	clz	r3, r3
1a0043d4:	b2db      	uxtb	r3, r3
1a0043d6:	f1c3 031f 	rsb	r3, r3, #31
1a0043da:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a0043de:	008a      	lsls	r2, r1, #2
1a0043e0:	491d      	ldr	r1, [pc, #116]	; (1a004458 <vTaskSwitchContext+0xc4>)
1a0043e2:	588a      	ldr	r2, [r1, r2]
1a0043e4:	b98a      	cbnz	r2, 1a00440a <vTaskSwitchContext+0x76>
	__asm volatile
1a0043e6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0043ea:	f383 8811 	msr	BASEPRI, r3
1a0043ee:	f3bf 8f6f 	isb	sy
1a0043f2:	f3bf 8f4f 	dsb	sy
1a0043f6:	e7fe      	b.n	1a0043f6 <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a0043f8:	689a      	ldr	r2, [r3, #8]
1a0043fa:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0043fe:	d1df      	bne.n	1a0043c0 <vTaskSwitchContext+0x2c>
1a004400:	68db      	ldr	r3, [r3, #12]
1a004402:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a004406:	d1db      	bne.n	1a0043c0 <vTaskSwitchContext+0x2c>
1a004408:	e7e0      	b.n	1a0043cc <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a00440a:	4813      	ldr	r0, [pc, #76]	; (1a004458 <vTaskSwitchContext+0xc4>)
1a00440c:	009a      	lsls	r2, r3, #2
1a00440e:	18d4      	adds	r4, r2, r3
1a004410:	00a1      	lsls	r1, r4, #2
1a004412:	4401      	add	r1, r0
1a004414:	684c      	ldr	r4, [r1, #4]
1a004416:	6864      	ldr	r4, [r4, #4]
1a004418:	604c      	str	r4, [r1, #4]
1a00441a:	441a      	add	r2, r3
1a00441c:	0091      	lsls	r1, r2, #2
1a00441e:	3108      	adds	r1, #8
1a004420:	4408      	add	r0, r1
1a004422:	4284      	cmp	r4, r0
1a004424:	d009      	beq.n	1a00443a <vTaskSwitchContext+0xa6>
1a004426:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00442a:	009a      	lsls	r2, r3, #2
1a00442c:	4b0a      	ldr	r3, [pc, #40]	; (1a004458 <vTaskSwitchContext+0xc4>)
1a00442e:	4413      	add	r3, r2
1a004430:	685b      	ldr	r3, [r3, #4]
1a004432:	68da      	ldr	r2, [r3, #12]
1a004434:	4b06      	ldr	r3, [pc, #24]	; (1a004450 <vTaskSwitchContext+0xbc>)
1a004436:	601a      	str	r2, [r3, #0]
}
1a004438:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a00443a:	6861      	ldr	r1, [r4, #4]
1a00443c:	4806      	ldr	r0, [pc, #24]	; (1a004458 <vTaskSwitchContext+0xc4>)
1a00443e:	2214      	movs	r2, #20
1a004440:	fb02 0203 	mla	r2, r2, r3, r0
1a004444:	6051      	str	r1, [r2, #4]
1a004446:	e7ee      	b.n	1a004426 <vTaskSwitchContext+0x92>
1a004448:	100032b4 	.word	0x100032b4
1a00444c:	10003334 	.word	0x10003334
1a004450:	10003210 	.word	0x10003210
1a004454:	100032bc 	.word	0x100032bc
1a004458:	1000321c 	.word	0x1000321c

1a00445c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a00445c:	b940      	cbnz	r0, 1a004470 <vTaskPlaceOnEventList+0x14>
1a00445e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004462:	f383 8811 	msr	BASEPRI, r3
1a004466:	f3bf 8f6f 	isb	sy
1a00446a:	f3bf 8f4f 	dsb	sy
1a00446e:	e7fe      	b.n	1a00446e <vTaskPlaceOnEventList+0x12>
{
1a004470:	b510      	push	{r4, lr}
1a004472:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a004474:	4b04      	ldr	r3, [pc, #16]	; (1a004488 <vTaskPlaceOnEventList+0x2c>)
1a004476:	6819      	ldr	r1, [r3, #0]
1a004478:	3118      	adds	r1, #24
1a00447a:	f7ff fb6a 	bl	1a003b52 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a00447e:	2101      	movs	r1, #1
1a004480:	4620      	mov	r0, r4
1a004482:	f7ff fd1f 	bl	1a003ec4 <prvAddCurrentTaskToDelayedList>
}
1a004486:	bd10      	pop	{r4, pc}
1a004488:	10003210 	.word	0x10003210

1a00448c <vTaskPlaceOnEventListRestricted>:
	{
1a00448c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a00448e:	b940      	cbnz	r0, 1a0044a2 <vTaskPlaceOnEventListRestricted+0x16>
1a004490:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004494:	f383 8811 	msr	BASEPRI, r3
1a004498:	f3bf 8f6f 	isb	sy
1a00449c:	f3bf 8f4f 	dsb	sy
1a0044a0:	e7fe      	b.n	1a0044a0 <vTaskPlaceOnEventListRestricted+0x14>
1a0044a2:	460c      	mov	r4, r1
1a0044a4:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0044a6:	4a06      	ldr	r2, [pc, #24]	; (1a0044c0 <vTaskPlaceOnEventListRestricted+0x34>)
1a0044a8:	6811      	ldr	r1, [r2, #0]
1a0044aa:	3118      	adds	r1, #24
1a0044ac:	f7ff fb45 	bl	1a003b3a <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a0044b0:	b10d      	cbz	r5, 1a0044b6 <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a0044b2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a0044b6:	4629      	mov	r1, r5
1a0044b8:	4620      	mov	r0, r4
1a0044ba:	f7ff fd03 	bl	1a003ec4 <prvAddCurrentTaskToDelayedList>
	}
1a0044be:	bd38      	pop	{r3, r4, r5, pc}
1a0044c0:	10003210 	.word	0x10003210

1a0044c4 <xTaskRemoveFromEventList>:
{
1a0044c4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a0044c6:	68c3      	ldr	r3, [r0, #12]
1a0044c8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a0044ca:	b944      	cbnz	r4, 1a0044de <xTaskRemoveFromEventList+0x1a>
1a0044cc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0044d0:	f383 8811 	msr	BASEPRI, r3
1a0044d4:	f3bf 8f6f 	isb	sy
1a0044d8:	f3bf 8f4f 	dsb	sy
1a0044dc:	e7fe      	b.n	1a0044dc <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a0044de:	f104 0518 	add.w	r5, r4, #24
1a0044e2:	4628      	mov	r0, r5
1a0044e4:	f7ff fb4f 	bl	1a003b86 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0044e8:	4b13      	ldr	r3, [pc, #76]	; (1a004538 <xTaskRemoveFromEventList+0x74>)
1a0044ea:	681b      	ldr	r3, [r3, #0]
1a0044ec:	b9e3      	cbnz	r3, 1a004528 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a0044ee:	1d25      	adds	r5, r4, #4
1a0044f0:	4628      	mov	r0, r5
1a0044f2:	f7ff fb48 	bl	1a003b86 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a0044f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0044f8:	2201      	movs	r2, #1
1a0044fa:	409a      	lsls	r2, r3
1a0044fc:	490f      	ldr	r1, [pc, #60]	; (1a00453c <xTaskRemoveFromEventList+0x78>)
1a0044fe:	6808      	ldr	r0, [r1, #0]
1a004500:	4302      	orrs	r2, r0
1a004502:	600a      	str	r2, [r1, #0]
1a004504:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a004508:	009a      	lsls	r2, r3, #2
1a00450a:	4629      	mov	r1, r5
1a00450c:	480c      	ldr	r0, [pc, #48]	; (1a004540 <xTaskRemoveFromEventList+0x7c>)
1a00450e:	4410      	add	r0, r2
1a004510:	f7ff fb13 	bl	1a003b3a <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a004514:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a004516:	4b0b      	ldr	r3, [pc, #44]	; (1a004544 <xTaskRemoveFromEventList+0x80>)
1a004518:	681b      	ldr	r3, [r3, #0]
1a00451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00451c:	429a      	cmp	r2, r3
1a00451e:	d908      	bls.n	1a004532 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a004520:	2001      	movs	r0, #1
1a004522:	4b09      	ldr	r3, [pc, #36]	; (1a004548 <xTaskRemoveFromEventList+0x84>)
1a004524:	6018      	str	r0, [r3, #0]
}
1a004526:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a004528:	4629      	mov	r1, r5
1a00452a:	4808      	ldr	r0, [pc, #32]	; (1a00454c <xTaskRemoveFromEventList+0x88>)
1a00452c:	f7ff fb05 	bl	1a003b3a <vListInsertEnd>
1a004530:	e7f0      	b.n	1a004514 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a004532:	2000      	movs	r0, #0
	return xReturn;
1a004534:	e7f7      	b.n	1a004526 <xTaskRemoveFromEventList+0x62>
1a004536:	bf00      	nop
1a004538:	100032b4 	.word	0x100032b4
1a00453c:	100032bc 	.word	0x100032bc
1a004540:	1000321c 	.word	0x1000321c
1a004544:	10003210 	.word	0x10003210
1a004548:	10003334 	.word	0x10003334
1a00454c:	100032f0 	.word	0x100032f0

1a004550 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a004550:	4b03      	ldr	r3, [pc, #12]	; (1a004560 <vTaskInternalSetTimeOutState+0x10>)
1a004552:	681b      	ldr	r3, [r3, #0]
1a004554:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a004556:	4b03      	ldr	r3, [pc, #12]	; (1a004564 <vTaskInternalSetTimeOutState+0x14>)
1a004558:	681b      	ldr	r3, [r3, #0]
1a00455a:	6043      	str	r3, [r0, #4]
}
1a00455c:	4770      	bx	lr
1a00455e:	bf00      	nop
1a004560:	100032ec 	.word	0x100032ec
1a004564:	10003330 	.word	0x10003330

1a004568 <xTaskCheckForTimeOut>:
{
1a004568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a00456a:	b150      	cbz	r0, 1a004582 <xTaskCheckForTimeOut+0x1a>
1a00456c:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a00456e:	b989      	cbnz	r1, 1a004594 <xTaskCheckForTimeOut+0x2c>
1a004570:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004574:	f383 8811 	msr	BASEPRI, r3
1a004578:	f3bf 8f6f 	isb	sy
1a00457c:	f3bf 8f4f 	dsb	sy
1a004580:	e7fe      	b.n	1a004580 <xTaskCheckForTimeOut+0x18>
1a004582:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004586:	f383 8811 	msr	BASEPRI, r3
1a00458a:	f3bf 8f6f 	isb	sy
1a00458e:	f3bf 8f4f 	dsb	sy
1a004592:	e7fe      	b.n	1a004592 <xTaskCheckForTimeOut+0x2a>
1a004594:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a004596:	f000 fbe5 	bl	1a004d64 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a00459a:	4b11      	ldr	r3, [pc, #68]	; (1a0045e0 <xTaskCheckForTimeOut+0x78>)
1a00459c:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a00459e:	6868      	ldr	r0, [r5, #4]
1a0045a0:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a0045a2:	6823      	ldr	r3, [r4, #0]
1a0045a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0045a8:	d016      	beq.n	1a0045d8 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a0045aa:	682f      	ldr	r7, [r5, #0]
1a0045ac:	4e0d      	ldr	r6, [pc, #52]	; (1a0045e4 <xTaskCheckForTimeOut+0x7c>)
1a0045ae:	6836      	ldr	r6, [r6, #0]
1a0045b0:	42b7      	cmp	r7, r6
1a0045b2:	d001      	beq.n	1a0045b8 <xTaskCheckForTimeOut+0x50>
1a0045b4:	4288      	cmp	r0, r1
1a0045b6:	d911      	bls.n	1a0045dc <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a0045b8:	4293      	cmp	r3, r2
1a0045ba:	d803      	bhi.n	1a0045c4 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a0045bc:	2300      	movs	r3, #0
1a0045be:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a0045c0:	2401      	movs	r4, #1
1a0045c2:	e005      	b.n	1a0045d0 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a0045c4:	1a9b      	subs	r3, r3, r2
1a0045c6:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a0045c8:	4628      	mov	r0, r5
1a0045ca:	f7ff ffc1 	bl	1a004550 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a0045ce:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0045d0:	f000 fbea 	bl	1a004da8 <vPortExitCritical>
}
1a0045d4:	4620      	mov	r0, r4
1a0045d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a0045d8:	2400      	movs	r4, #0
1a0045da:	e7f9      	b.n	1a0045d0 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a0045dc:	2401      	movs	r4, #1
1a0045de:	e7f7      	b.n	1a0045d0 <xTaskCheckForTimeOut+0x68>
1a0045e0:	10003330 	.word	0x10003330
1a0045e4:	100032ec 	.word	0x100032ec

1a0045e8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a0045e8:	4b01      	ldr	r3, [pc, #4]	; (1a0045f0 <vTaskMissedYield+0x8>)
1a0045ea:	2201      	movs	r2, #1
1a0045ec:	601a      	str	r2, [r3, #0]
}
1a0045ee:	4770      	bx	lr
1a0045f0:	10003334 	.word	0x10003334

1a0045f4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a0045f4:	4b05      	ldr	r3, [pc, #20]	; (1a00460c <xTaskGetSchedulerState+0x18>)
1a0045f6:	681b      	ldr	r3, [r3, #0]
1a0045f8:	b133      	cbz	r3, 1a004608 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0045fa:	4b05      	ldr	r3, [pc, #20]	; (1a004610 <xTaskGetSchedulerState+0x1c>)
1a0045fc:	681b      	ldr	r3, [r3, #0]
1a0045fe:	b10b      	cbz	r3, 1a004604 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a004600:	2000      	movs	r0, #0
	}
1a004602:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a004604:	2002      	movs	r0, #2
1a004606:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a004608:	2001      	movs	r0, #1
1a00460a:	4770      	bx	lr
1a00460c:	10003304 	.word	0x10003304
1a004610:	100032b4 	.word	0x100032b4

1a004614 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
1a004614:	2800      	cmp	r0, #0
1a004616:	d050      	beq.n	1a0046ba <xTaskPriorityInherit+0xa6>
	{
1a004618:	b538      	push	{r3, r4, r5, lr}
1a00461a:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
1a00461c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
1a00461e:	4928      	ldr	r1, [pc, #160]	; (1a0046c0 <xTaskPriorityInherit+0xac>)
1a004620:	6809      	ldr	r1, [r1, #0]
1a004622:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a004624:	428a      	cmp	r2, r1
1a004626:	d23e      	bcs.n	1a0046a6 <xTaskPriorityInherit+0x92>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a004628:	6981      	ldr	r1, [r0, #24]
1a00462a:	2900      	cmp	r1, #0
1a00462c:	db05      	blt.n	1a00463a <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00462e:	4924      	ldr	r1, [pc, #144]	; (1a0046c0 <xTaskPriorityInherit+0xac>)
1a004630:	6809      	ldr	r1, [r1, #0]
1a004632:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a004634:	f1c1 0107 	rsb	r1, r1, #7
1a004638:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
1a00463a:	6960      	ldr	r0, [r4, #20]
1a00463c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a004640:	0091      	lsls	r1, r2, #2
1a004642:	4a20      	ldr	r2, [pc, #128]	; (1a0046c4 <xTaskPriorityInherit+0xb0>)
1a004644:	440a      	add	r2, r1
1a004646:	4290      	cmp	r0, r2
1a004648:	d005      	beq.n	1a004656 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a00464a:	4a1d      	ldr	r2, [pc, #116]	; (1a0046c0 <xTaskPriorityInherit+0xac>)
1a00464c:	6812      	ldr	r2, [r2, #0]
1a00464e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a004650:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
1a004652:	2001      	movs	r0, #1
	}
1a004654:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a004656:	1d25      	adds	r5, r4, #4
1a004658:	4628      	mov	r0, r5
1a00465a:	f7ff fa94 	bl	1a003b86 <uxListRemove>
1a00465e:	b968      	cbnz	r0, 1a00467c <xTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
1a004660:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a004662:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a004666:	008a      	lsls	r2, r1, #2
1a004668:	4916      	ldr	r1, [pc, #88]	; (1a0046c4 <xTaskPriorityInherit+0xb0>)
1a00466a:	588a      	ldr	r2, [r1, r2]
1a00466c:	b932      	cbnz	r2, 1a00467c <xTaskPriorityInherit+0x68>
1a00466e:	2201      	movs	r2, #1
1a004670:	409a      	lsls	r2, r3
1a004672:	4915      	ldr	r1, [pc, #84]	; (1a0046c8 <xTaskPriorityInherit+0xb4>)
1a004674:	680b      	ldr	r3, [r1, #0]
1a004676:	ea23 0302 	bic.w	r3, r3, r2
1a00467a:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a00467c:	4b10      	ldr	r3, [pc, #64]	; (1a0046c0 <xTaskPriorityInherit+0xac>)
1a00467e:	681b      	ldr	r3, [r3, #0]
1a004680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a004682:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
1a004684:	2401      	movs	r4, #1
1a004686:	fa04 f203 	lsl.w	r2, r4, r3
1a00468a:	490f      	ldr	r1, [pc, #60]	; (1a0046c8 <xTaskPriorityInherit+0xb4>)
1a00468c:	6808      	ldr	r0, [r1, #0]
1a00468e:	4302      	orrs	r2, r0
1a004690:	600a      	str	r2, [r1, #0]
1a004692:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a004696:	009a      	lsls	r2, r3, #2
1a004698:	4629      	mov	r1, r5
1a00469a:	480a      	ldr	r0, [pc, #40]	; (1a0046c4 <xTaskPriorityInherit+0xb0>)
1a00469c:	4410      	add	r0, r2
1a00469e:	f7ff fa4c 	bl	1a003b3a <vListInsertEnd>
				xReturn = pdTRUE;
1a0046a2:	4620      	mov	r0, r4
1a0046a4:	e7d6      	b.n	1a004654 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
1a0046a6:	6d02      	ldr	r2, [r0, #80]	; 0x50
1a0046a8:	4b05      	ldr	r3, [pc, #20]	; (1a0046c0 <xTaskPriorityInherit+0xac>)
1a0046aa:	681b      	ldr	r3, [r3, #0]
1a0046ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0046ae:	429a      	cmp	r2, r3
1a0046b0:	d201      	bcs.n	1a0046b6 <xTaskPriorityInherit+0xa2>
					xReturn = pdTRUE;
1a0046b2:	2001      	movs	r0, #1
		return xReturn;
1a0046b4:	e7ce      	b.n	1a004654 <xTaskPriorityInherit+0x40>
	BaseType_t xReturn = pdFALSE;
1a0046b6:	2000      	movs	r0, #0
1a0046b8:	e7cc      	b.n	1a004654 <xTaskPriorityInherit+0x40>
1a0046ba:	2000      	movs	r0, #0
	}
1a0046bc:	4770      	bx	lr
1a0046be:	bf00      	nop
1a0046c0:	10003210 	.word	0x10003210
1a0046c4:	1000321c 	.word	0x1000321c
1a0046c8:	100032bc 	.word	0x100032bc

1a0046cc <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a0046cc:	2800      	cmp	r0, #0
1a0046ce:	d049      	beq.n	1a004764 <xTaskPriorityDisinherit+0x98>
	{
1a0046d0:	b538      	push	{r3, r4, r5, lr}
1a0046d2:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a0046d4:	4a26      	ldr	r2, [pc, #152]	; (1a004770 <xTaskPriorityDisinherit+0xa4>)
1a0046d6:	6812      	ldr	r2, [r2, #0]
1a0046d8:	4282      	cmp	r2, r0
1a0046da:	d008      	beq.n	1a0046ee <xTaskPriorityDisinherit+0x22>
1a0046dc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0046e0:	f383 8811 	msr	BASEPRI, r3
1a0046e4:	f3bf 8f6f 	isb	sy
1a0046e8:	f3bf 8f4f 	dsb	sy
1a0046ec:	e7fe      	b.n	1a0046ec <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a0046ee:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a0046f0:	b942      	cbnz	r2, 1a004704 <xTaskPriorityDisinherit+0x38>
1a0046f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0046f6:	f383 8811 	msr	BASEPRI, r3
1a0046fa:	f3bf 8f6f 	isb	sy
1a0046fe:	f3bf 8f4f 	dsb	sy
1a004702:	e7fe      	b.n	1a004702 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a004704:	3a01      	subs	r2, #1
1a004706:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a004708:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a00470a:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a00470c:	4288      	cmp	r0, r1
1a00470e:	d02b      	beq.n	1a004768 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a004710:	bb62      	cbnz	r2, 1a00476c <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a004712:	1d25      	adds	r5, r4, #4
1a004714:	4628      	mov	r0, r5
1a004716:	f7ff fa36 	bl	1a003b86 <uxListRemove>
1a00471a:	b970      	cbnz	r0, 1a00473a <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a00471c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00471e:	2314      	movs	r3, #20
1a004720:	fb03 f302 	mul.w	r3, r3, r2
1a004724:	4913      	ldr	r1, [pc, #76]	; (1a004774 <xTaskPriorityDisinherit+0xa8>)
1a004726:	58cb      	ldr	r3, [r1, r3]
1a004728:	b93b      	cbnz	r3, 1a00473a <xTaskPriorityDisinherit+0x6e>
1a00472a:	2301      	movs	r3, #1
1a00472c:	fa03 f202 	lsl.w	r2, r3, r2
1a004730:	4911      	ldr	r1, [pc, #68]	; (1a004778 <xTaskPriorityDisinherit+0xac>)
1a004732:	680b      	ldr	r3, [r1, #0]
1a004734:	ea23 0302 	bic.w	r3, r3, r2
1a004738:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a00473a:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a00473c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00473e:	f1c3 0207 	rsb	r2, r3, #7
1a004742:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a004744:	2401      	movs	r4, #1
1a004746:	fa04 f203 	lsl.w	r2, r4, r3
1a00474a:	490b      	ldr	r1, [pc, #44]	; (1a004778 <xTaskPriorityDisinherit+0xac>)
1a00474c:	6808      	ldr	r0, [r1, #0]
1a00474e:	4302      	orrs	r2, r0
1a004750:	600a      	str	r2, [r1, #0]
1a004752:	4629      	mov	r1, r5
1a004754:	4a07      	ldr	r2, [pc, #28]	; (1a004774 <xTaskPriorityDisinherit+0xa8>)
1a004756:	2014      	movs	r0, #20
1a004758:	fb00 2003 	mla	r0, r0, r3, r2
1a00475c:	f7ff f9ed 	bl	1a003b3a <vListInsertEnd>
					xReturn = pdTRUE;
1a004760:	4620      	mov	r0, r4
	}
1a004762:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a004764:	2000      	movs	r0, #0
	}
1a004766:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a004768:	2000      	movs	r0, #0
1a00476a:	e7fa      	b.n	1a004762 <xTaskPriorityDisinherit+0x96>
1a00476c:	2000      	movs	r0, #0
		return xReturn;
1a00476e:	e7f8      	b.n	1a004762 <xTaskPriorityDisinherit+0x96>
1a004770:	10003210 	.word	0x10003210
1a004774:	1000321c 	.word	0x1000321c
1a004778:	100032bc 	.word	0x100032bc

1a00477c <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
1a00477c:	2800      	cmp	r0, #0
1a00477e:	d055      	beq.n	1a00482c <vTaskPriorityDisinheritAfterTimeout+0xb0>
	{
1a004780:	b538      	push	{r3, r4, r5, lr}
1a004782:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
1a004784:	6d40      	ldr	r0, [r0, #84]	; 0x54
1a004786:	b940      	cbnz	r0, 1a00479a <vTaskPriorityDisinheritAfterTimeout+0x1e>
1a004788:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00478c:	f383 8811 	msr	BASEPRI, r3
1a004790:	f3bf 8f6f 	isb	sy
1a004794:	f3bf 8f4f 	dsb	sy
1a004798:	e7fe      	b.n	1a004798 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
1a00479a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
1a00479c:	428a      	cmp	r2, r1
1a00479e:	d200      	bcs.n	1a0047a2 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
1a0047a0:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
1a0047a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1a0047a4:	4291      	cmp	r1, r2
1a0047a6:	d001      	beq.n	1a0047ac <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
1a0047a8:	2801      	cmp	r0, #1
1a0047aa:	d000      	beq.n	1a0047ae <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
1a0047ac:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
1a0047ae:	4820      	ldr	r0, [pc, #128]	; (1a004830 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
1a0047b0:	6800      	ldr	r0, [r0, #0]
1a0047b2:	4298      	cmp	r0, r3
1a0047b4:	d108      	bne.n	1a0047c8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
1a0047b6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0047ba:	f383 8811 	msr	BASEPRI, r3
1a0047be:	f3bf 8f6f 	isb	sy
1a0047c2:	f3bf 8f4f 	dsb	sy
1a0047c6:	e7fe      	b.n	1a0047c6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
1a0047c8:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a0047ca:	6998      	ldr	r0, [r3, #24]
1a0047cc:	2800      	cmp	r0, #0
1a0047ce:	db02      	blt.n	1a0047d6 <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0047d0:	f1c2 0207 	rsb	r2, r2, #7
1a0047d4:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
1a0047d6:	695a      	ldr	r2, [r3, #20]
1a0047d8:	4816      	ldr	r0, [pc, #88]	; (1a004834 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a0047da:	2414      	movs	r4, #20
1a0047dc:	fb04 0101 	mla	r1, r4, r1, r0
1a0047e0:	428a      	cmp	r2, r1
1a0047e2:	d1e3      	bne.n	1a0047ac <vTaskPriorityDisinheritAfterTimeout+0x30>
1a0047e4:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0047e6:	1d1d      	adds	r5, r3, #4
1a0047e8:	4628      	mov	r0, r5
1a0047ea:	f7ff f9cc 	bl	1a003b86 <uxListRemove>
1a0047ee:	b970      	cbnz	r0, 1a00480e <vTaskPriorityDisinheritAfterTimeout+0x92>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a0047f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0047f2:	2314      	movs	r3, #20
1a0047f4:	fb03 f302 	mul.w	r3, r3, r2
1a0047f8:	490e      	ldr	r1, [pc, #56]	; (1a004834 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a0047fa:	58cb      	ldr	r3, [r1, r3]
1a0047fc:	b93b      	cbnz	r3, 1a00480e <vTaskPriorityDisinheritAfterTimeout+0x92>
1a0047fe:	2301      	movs	r3, #1
1a004800:	fa03 f202 	lsl.w	r2, r3, r2
1a004804:	490c      	ldr	r1, [pc, #48]	; (1a004838 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a004806:	680b      	ldr	r3, [r1, #0]
1a004808:	ea23 0302 	bic.w	r3, r3, r2
1a00480c:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
1a00480e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a004810:	2301      	movs	r3, #1
1a004812:	4093      	lsls	r3, r2
1a004814:	4908      	ldr	r1, [pc, #32]	; (1a004838 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a004816:	6808      	ldr	r0, [r1, #0]
1a004818:	4303      	orrs	r3, r0
1a00481a:	600b      	str	r3, [r1, #0]
1a00481c:	4629      	mov	r1, r5
1a00481e:	4b05      	ldr	r3, [pc, #20]	; (1a004834 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a004820:	2014      	movs	r0, #20
1a004822:	fb00 3002 	mla	r0, r0, r2, r3
1a004826:	f7ff f988 	bl	1a003b3a <vListInsertEnd>
	}
1a00482a:	e7bf      	b.n	1a0047ac <vTaskPriorityDisinheritAfterTimeout+0x30>
1a00482c:	4770      	bx	lr
1a00482e:	bf00      	nop
1a004830:	10003210 	.word	0x10003210
1a004834:	1000321c 	.word	0x1000321c
1a004838:	100032bc 	.word	0x100032bc

1a00483c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
1a00483c:	4b05      	ldr	r3, [pc, #20]	; (1a004854 <pvTaskIncrementMutexHeldCount+0x18>)
1a00483e:	681b      	ldr	r3, [r3, #0]
1a004840:	b123      	cbz	r3, 1a00484c <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
1a004842:	4b04      	ldr	r3, [pc, #16]	; (1a004854 <pvTaskIncrementMutexHeldCount+0x18>)
1a004844:	681a      	ldr	r2, [r3, #0]
1a004846:	6d53      	ldr	r3, [r2, #84]	; 0x54
1a004848:	3301      	adds	r3, #1
1a00484a:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
1a00484c:	4b01      	ldr	r3, [pc, #4]	; (1a004854 <pvTaskIncrementMutexHeldCount+0x18>)
1a00484e:	6818      	ldr	r0, [r3, #0]
	}
1a004850:	4770      	bx	lr
1a004852:	bf00      	nop
1a004854:	10003210 	.word	0x10003210

1a004858 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a004858:	4b06      	ldr	r3, [pc, #24]	; (1a004874 <prvGetNextExpireTime+0x1c>)
1a00485a:	681a      	ldr	r2, [r3, #0]
1a00485c:	6813      	ldr	r3, [r2, #0]
1a00485e:	fab3 f383 	clz	r3, r3
1a004862:	095b      	lsrs	r3, r3, #5
1a004864:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a004866:	b913      	cbnz	r3, 1a00486e <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a004868:	68d3      	ldr	r3, [r2, #12]
1a00486a:	6818      	ldr	r0, [r3, #0]
1a00486c:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a00486e:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a004870:	4770      	bx	lr
1a004872:	bf00      	nop
1a004874:	10003338 	.word	0x10003338

1a004878 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a004878:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a00487a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a00487c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a00487e:	4291      	cmp	r1, r2
1a004880:	d80c      	bhi.n	1a00489c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a004882:	1ad2      	subs	r2, r2, r3
1a004884:	6983      	ldr	r3, [r0, #24]
1a004886:	429a      	cmp	r2, r3
1a004888:	d301      	bcc.n	1a00488e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a00488a:	2001      	movs	r0, #1
1a00488c:	e010      	b.n	1a0048b0 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a00488e:	1d01      	adds	r1, r0, #4
1a004890:	4b09      	ldr	r3, [pc, #36]	; (1a0048b8 <prvInsertTimerInActiveList+0x40>)
1a004892:	6818      	ldr	r0, [r3, #0]
1a004894:	f7ff f95d 	bl	1a003b52 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a004898:	2000      	movs	r0, #0
1a00489a:	e009      	b.n	1a0048b0 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a00489c:	429a      	cmp	r2, r3
1a00489e:	d201      	bcs.n	1a0048a4 <prvInsertTimerInActiveList+0x2c>
1a0048a0:	4299      	cmp	r1, r3
1a0048a2:	d206      	bcs.n	1a0048b2 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a0048a4:	1d01      	adds	r1, r0, #4
1a0048a6:	4b05      	ldr	r3, [pc, #20]	; (1a0048bc <prvInsertTimerInActiveList+0x44>)
1a0048a8:	6818      	ldr	r0, [r3, #0]
1a0048aa:	f7ff f952 	bl	1a003b52 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a0048ae:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a0048b0:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a0048b2:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a0048b4:	e7fc      	b.n	1a0048b0 <prvInsertTimerInActiveList+0x38>
1a0048b6:	bf00      	nop
1a0048b8:	1000333c 	.word	0x1000333c
1a0048bc:	10003338 	.word	0x10003338

1a0048c0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a0048c0:	b530      	push	{r4, r5, lr}
1a0048c2:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a0048c4:	f000 fa4e 	bl	1a004d64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a0048c8:	4b11      	ldr	r3, [pc, #68]	; (1a004910 <prvCheckForValidListAndQueue+0x50>)
1a0048ca:	681b      	ldr	r3, [r3, #0]
1a0048cc:	b11b      	cbz	r3, 1a0048d6 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a0048ce:	f000 fa6b 	bl	1a004da8 <vPortExitCritical>
}
1a0048d2:	b003      	add	sp, #12
1a0048d4:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a0048d6:	4d0f      	ldr	r5, [pc, #60]	; (1a004914 <prvCheckForValidListAndQueue+0x54>)
1a0048d8:	4628      	mov	r0, r5
1a0048da:	f7ff f920 	bl	1a003b1e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a0048de:	4c0e      	ldr	r4, [pc, #56]	; (1a004918 <prvCheckForValidListAndQueue+0x58>)
1a0048e0:	4620      	mov	r0, r4
1a0048e2:	f7ff f91c 	bl	1a003b1e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a0048e6:	4b0d      	ldr	r3, [pc, #52]	; (1a00491c <prvCheckForValidListAndQueue+0x5c>)
1a0048e8:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a0048ea:	4b0d      	ldr	r3, [pc, #52]	; (1a004920 <prvCheckForValidListAndQueue+0x60>)
1a0048ec:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a0048ee:	2300      	movs	r3, #0
1a0048f0:	9300      	str	r3, [sp, #0]
1a0048f2:	4b0c      	ldr	r3, [pc, #48]	; (1a004924 <prvCheckForValidListAndQueue+0x64>)
1a0048f4:	4a0c      	ldr	r2, [pc, #48]	; (1a004928 <prvCheckForValidListAndQueue+0x68>)
1a0048f6:	2110      	movs	r1, #16
1a0048f8:	200a      	movs	r0, #10
1a0048fa:	f7fe fdae 	bl	1a00345a <xQueueGenericCreateStatic>
1a0048fe:	4b04      	ldr	r3, [pc, #16]	; (1a004910 <prvCheckForValidListAndQueue+0x50>)
1a004900:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a004902:	2800      	cmp	r0, #0
1a004904:	d0e3      	beq.n	1a0048ce <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a004906:	4909      	ldr	r1, [pc, #36]	; (1a00492c <prvCheckForValidListAndQueue+0x6c>)
1a004908:	f7ff f8cc 	bl	1a003aa4 <vQueueAddToRegistry>
1a00490c:	e7df      	b.n	1a0048ce <prvCheckForValidListAndQueue+0xe>
1a00490e:	bf00      	nop
1a004910:	1000345c 	.word	0x1000345c
1a004914:	100033e0 	.word	0x100033e0
1a004918:	100033f4 	.word	0x100033f4
1a00491c:	10003338 	.word	0x10003338
1a004920:	1000333c 	.word	0x1000333c
1a004924:	1000340c 	.word	0x1000340c
1a004928:	10003340 	.word	0x10003340
1a00492c:	1a00896c 	.word	0x1a00896c

1a004930 <xTimerCreateTimerTask>:
{
1a004930:	b510      	push	{r4, lr}
1a004932:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a004934:	f7ff ffc4 	bl	1a0048c0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a004938:	4b12      	ldr	r3, [pc, #72]	; (1a004984 <xTimerCreateTimerTask+0x54>)
1a00493a:	681b      	ldr	r3, [r3, #0]
1a00493c:	b1cb      	cbz	r3, 1a004972 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a00493e:	2400      	movs	r4, #0
1a004940:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a004942:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a004944:	aa07      	add	r2, sp, #28
1a004946:	a906      	add	r1, sp, #24
1a004948:	a805      	add	r0, sp, #20
1a00494a:	f7ff f93d 	bl	1a003bc8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a00494e:	9b05      	ldr	r3, [sp, #20]
1a004950:	9302      	str	r3, [sp, #8]
1a004952:	9b06      	ldr	r3, [sp, #24]
1a004954:	9301      	str	r3, [sp, #4]
1a004956:	2304      	movs	r3, #4
1a004958:	9300      	str	r3, [sp, #0]
1a00495a:	4623      	mov	r3, r4
1a00495c:	9a07      	ldr	r2, [sp, #28]
1a00495e:	490a      	ldr	r1, [pc, #40]	; (1a004988 <xTimerCreateTimerTask+0x58>)
1a004960:	480a      	ldr	r0, [pc, #40]	; (1a00498c <xTimerCreateTimerTask+0x5c>)
1a004962:	f7ff fafb 	bl	1a003f5c <xTaskCreateStatic>
1a004966:	4b0a      	ldr	r3, [pc, #40]	; (1a004990 <xTimerCreateTimerTask+0x60>)
1a004968:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a00496a:	b110      	cbz	r0, 1a004972 <xTimerCreateTimerTask+0x42>
}
1a00496c:	2001      	movs	r0, #1
1a00496e:	b008      	add	sp, #32
1a004970:	bd10      	pop	{r4, pc}
1a004972:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004976:	f383 8811 	msr	BASEPRI, r3
1a00497a:	f3bf 8f6f 	isb	sy
1a00497e:	f3bf 8f4f 	dsb	sy
1a004982:	e7fe      	b.n	1a004982 <xTimerCreateTimerTask+0x52>
1a004984:	1000345c 	.word	0x1000345c
1a004988:	1a008974 	.word	0x1a008974
1a00498c:	1a004c75 	.word	0x1a004c75
1a004990:	10003460 	.word	0x10003460

1a004994 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a004994:	b1c8      	cbz	r0, 1a0049ca <xTimerGenericCommand+0x36>
{
1a004996:	b530      	push	{r4, r5, lr}
1a004998:	b085      	sub	sp, #20
1a00499a:	4615      	mov	r5, r2
1a00499c:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a00499e:	4a17      	ldr	r2, [pc, #92]	; (1a0049fc <xTimerGenericCommand+0x68>)
1a0049a0:	6810      	ldr	r0, [r2, #0]
1a0049a2:	b340      	cbz	r0, 1a0049f6 <xTimerGenericCommand+0x62>
1a0049a4:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a0049a6:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a0049a8:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a0049aa:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a0049ac:	2905      	cmp	r1, #5
1a0049ae:	dc1d      	bgt.n	1a0049ec <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a0049b0:	f7ff fe20 	bl	1a0045f4 <xTaskGetSchedulerState>
1a0049b4:	2802      	cmp	r0, #2
1a0049b6:	d011      	beq.n	1a0049dc <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a0049b8:	2300      	movs	r3, #0
1a0049ba:	461a      	mov	r2, r3
1a0049bc:	4669      	mov	r1, sp
1a0049be:	480f      	ldr	r0, [pc, #60]	; (1a0049fc <xTimerGenericCommand+0x68>)
1a0049c0:	6800      	ldr	r0, [r0, #0]
1a0049c2:	f7fe fdb9 	bl	1a003538 <xQueueGenericSend>
}
1a0049c6:	b005      	add	sp, #20
1a0049c8:	bd30      	pop	{r4, r5, pc}
1a0049ca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0049ce:	f383 8811 	msr	BASEPRI, r3
1a0049d2:	f3bf 8f6f 	isb	sy
1a0049d6:	f3bf 8f4f 	dsb	sy
1a0049da:	e7fe      	b.n	1a0049da <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a0049dc:	2300      	movs	r3, #0
1a0049de:	9a08      	ldr	r2, [sp, #32]
1a0049e0:	4669      	mov	r1, sp
1a0049e2:	4806      	ldr	r0, [pc, #24]	; (1a0049fc <xTimerGenericCommand+0x68>)
1a0049e4:	6800      	ldr	r0, [r0, #0]
1a0049e6:	f7fe fda7 	bl	1a003538 <xQueueGenericSend>
1a0049ea:	e7ec      	b.n	1a0049c6 <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a0049ec:	2300      	movs	r3, #0
1a0049ee:	4669      	mov	r1, sp
1a0049f0:	f7fe fe77 	bl	1a0036e2 <xQueueGenericSendFromISR>
1a0049f4:	e7e7      	b.n	1a0049c6 <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a0049f6:	2000      	movs	r0, #0
	return xReturn;
1a0049f8:	e7e5      	b.n	1a0049c6 <xTimerGenericCommand+0x32>
1a0049fa:	bf00      	nop
1a0049fc:	1000345c 	.word	0x1000345c

1a004a00 <prvSwitchTimerLists>:
{
1a004a00:	b570      	push	{r4, r5, r6, lr}
1a004a02:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a004a04:	4b1a      	ldr	r3, [pc, #104]	; (1a004a70 <prvSwitchTimerLists+0x70>)
1a004a06:	681b      	ldr	r3, [r3, #0]
1a004a08:	681a      	ldr	r2, [r3, #0]
1a004a0a:	b352      	cbz	r2, 1a004a62 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a004a0c:	68db      	ldr	r3, [r3, #12]
1a004a0e:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a004a10:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a004a12:	1d25      	adds	r5, r4, #4
1a004a14:	4628      	mov	r0, r5
1a004a16:	f7ff f8b6 	bl	1a003b86 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a004a1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a004a1c:	4620      	mov	r0, r4
1a004a1e:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a004a20:	69e3      	ldr	r3, [r4, #28]
1a004a22:	2b01      	cmp	r3, #1
1a004a24:	d1ee      	bne.n	1a004a04 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a004a26:	69a3      	ldr	r3, [r4, #24]
1a004a28:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a004a2a:	429e      	cmp	r6, r3
1a004a2c:	d207      	bcs.n	1a004a3e <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a004a2e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a004a30:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a004a32:	4629      	mov	r1, r5
1a004a34:	4b0e      	ldr	r3, [pc, #56]	; (1a004a70 <prvSwitchTimerLists+0x70>)
1a004a36:	6818      	ldr	r0, [r3, #0]
1a004a38:	f7ff f88b 	bl	1a003b52 <vListInsert>
1a004a3c:	e7e2      	b.n	1a004a04 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a004a3e:	2100      	movs	r1, #0
1a004a40:	9100      	str	r1, [sp, #0]
1a004a42:	460b      	mov	r3, r1
1a004a44:	4632      	mov	r2, r6
1a004a46:	4620      	mov	r0, r4
1a004a48:	f7ff ffa4 	bl	1a004994 <xTimerGenericCommand>
				configASSERT( xResult );
1a004a4c:	2800      	cmp	r0, #0
1a004a4e:	d1d9      	bne.n	1a004a04 <prvSwitchTimerLists+0x4>
1a004a50:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004a54:	f383 8811 	msr	BASEPRI, r3
1a004a58:	f3bf 8f6f 	isb	sy
1a004a5c:	f3bf 8f4f 	dsb	sy
1a004a60:	e7fe      	b.n	1a004a60 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a004a62:	4a04      	ldr	r2, [pc, #16]	; (1a004a74 <prvSwitchTimerLists+0x74>)
1a004a64:	6810      	ldr	r0, [r2, #0]
1a004a66:	4902      	ldr	r1, [pc, #8]	; (1a004a70 <prvSwitchTimerLists+0x70>)
1a004a68:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a004a6a:	6013      	str	r3, [r2, #0]
}
1a004a6c:	b002      	add	sp, #8
1a004a6e:	bd70      	pop	{r4, r5, r6, pc}
1a004a70:	10003338 	.word	0x10003338
1a004a74:	1000333c 	.word	0x1000333c

1a004a78 <prvSampleTimeNow>:
{
1a004a78:	b538      	push	{r3, r4, r5, lr}
1a004a7a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a004a7c:	f7ff fb2c 	bl	1a0040d8 <xTaskGetTickCount>
1a004a80:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a004a82:	4b07      	ldr	r3, [pc, #28]	; (1a004aa0 <prvSampleTimeNow+0x28>)
1a004a84:	681b      	ldr	r3, [r3, #0]
1a004a86:	4283      	cmp	r3, r0
1a004a88:	d805      	bhi.n	1a004a96 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a004a8a:	2300      	movs	r3, #0
1a004a8c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a004a8e:	4b04      	ldr	r3, [pc, #16]	; (1a004aa0 <prvSampleTimeNow+0x28>)
1a004a90:	601c      	str	r4, [r3, #0]
}
1a004a92:	4620      	mov	r0, r4
1a004a94:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a004a96:	f7ff ffb3 	bl	1a004a00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a004a9a:	2301      	movs	r3, #1
1a004a9c:	602b      	str	r3, [r5, #0]
1a004a9e:	e7f6      	b.n	1a004a8e <prvSampleTimeNow+0x16>
1a004aa0:	10003408 	.word	0x10003408

1a004aa4 <prvProcessExpiredTimer>:
{
1a004aa4:	b570      	push	{r4, r5, r6, lr}
1a004aa6:	b082      	sub	sp, #8
1a004aa8:	4605      	mov	r5, r0
1a004aaa:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a004aac:	4b14      	ldr	r3, [pc, #80]	; (1a004b00 <prvProcessExpiredTimer+0x5c>)
1a004aae:	681b      	ldr	r3, [r3, #0]
1a004ab0:	68db      	ldr	r3, [r3, #12]
1a004ab2:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a004ab4:	1d20      	adds	r0, r4, #4
1a004ab6:	f7ff f866 	bl	1a003b86 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a004aba:	69e3      	ldr	r3, [r4, #28]
1a004abc:	2b01      	cmp	r3, #1
1a004abe:	d004      	beq.n	1a004aca <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a004ac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a004ac2:	4620      	mov	r0, r4
1a004ac4:	4798      	blx	r3
}
1a004ac6:	b002      	add	sp, #8
1a004ac8:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a004aca:	69a1      	ldr	r1, [r4, #24]
1a004acc:	462b      	mov	r3, r5
1a004ace:	4632      	mov	r2, r6
1a004ad0:	4429      	add	r1, r5
1a004ad2:	4620      	mov	r0, r4
1a004ad4:	f7ff fed0 	bl	1a004878 <prvInsertTimerInActiveList>
1a004ad8:	2800      	cmp	r0, #0
1a004ada:	d0f1      	beq.n	1a004ac0 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a004adc:	2100      	movs	r1, #0
1a004ade:	9100      	str	r1, [sp, #0]
1a004ae0:	460b      	mov	r3, r1
1a004ae2:	462a      	mov	r2, r5
1a004ae4:	4620      	mov	r0, r4
1a004ae6:	f7ff ff55 	bl	1a004994 <xTimerGenericCommand>
			configASSERT( xResult );
1a004aea:	2800      	cmp	r0, #0
1a004aec:	d1e8      	bne.n	1a004ac0 <prvProcessExpiredTimer+0x1c>
1a004aee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004af2:	f383 8811 	msr	BASEPRI, r3
1a004af6:	f3bf 8f6f 	isb	sy
1a004afa:	f3bf 8f4f 	dsb	sy
1a004afe:	e7fe      	b.n	1a004afe <prvProcessExpiredTimer+0x5a>
1a004b00:	10003338 	.word	0x10003338

1a004b04 <prvProcessTimerOrBlockTask>:
{
1a004b04:	b570      	push	{r4, r5, r6, lr}
1a004b06:	b082      	sub	sp, #8
1a004b08:	4606      	mov	r6, r0
1a004b0a:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a004b0c:	f7ff fadc 	bl	1a0040c8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a004b10:	a801      	add	r0, sp, #4
1a004b12:	f7ff ffb1 	bl	1a004a78 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a004b16:	9b01      	ldr	r3, [sp, #4]
1a004b18:	bb1b      	cbnz	r3, 1a004b62 <prvProcessTimerOrBlockTask+0x5e>
1a004b1a:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a004b1c:	b90c      	cbnz	r4, 1a004b22 <prvProcessTimerOrBlockTask+0x1e>
1a004b1e:	42b0      	cmp	r0, r6
1a004b20:	d218      	bcs.n	1a004b54 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a004b22:	b12c      	cbz	r4, 1a004b30 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a004b24:	4b11      	ldr	r3, [pc, #68]	; (1a004b6c <prvProcessTimerOrBlockTask+0x68>)
1a004b26:	681b      	ldr	r3, [r3, #0]
1a004b28:	681c      	ldr	r4, [r3, #0]
1a004b2a:	fab4 f484 	clz	r4, r4
1a004b2e:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a004b30:	4622      	mov	r2, r4
1a004b32:	1b71      	subs	r1, r6, r5
1a004b34:	4b0e      	ldr	r3, [pc, #56]	; (1a004b70 <prvProcessTimerOrBlockTask+0x6c>)
1a004b36:	6818      	ldr	r0, [r3, #0]
1a004b38:	f7fe ffc8 	bl	1a003acc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a004b3c:	f7ff fb5e 	bl	1a0041fc <xTaskResumeAll>
1a004b40:	b988      	cbnz	r0, 1a004b66 <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a004b42:	4b0c      	ldr	r3, [pc, #48]	; (1a004b74 <prvProcessTimerOrBlockTask+0x70>)
1a004b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a004b48:	601a      	str	r2, [r3, #0]
1a004b4a:	f3bf 8f4f 	dsb	sy
1a004b4e:	f3bf 8f6f 	isb	sy
1a004b52:	e008      	b.n	1a004b66 <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a004b54:	f7ff fb52 	bl	1a0041fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a004b58:	4629      	mov	r1, r5
1a004b5a:	4630      	mov	r0, r6
1a004b5c:	f7ff ffa2 	bl	1a004aa4 <prvProcessExpiredTimer>
1a004b60:	e001      	b.n	1a004b66 <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a004b62:	f7ff fb4b 	bl	1a0041fc <xTaskResumeAll>
}
1a004b66:	b002      	add	sp, #8
1a004b68:	bd70      	pop	{r4, r5, r6, pc}
1a004b6a:	bf00      	nop
1a004b6c:	1000333c 	.word	0x1000333c
1a004b70:	1000345c 	.word	0x1000345c
1a004b74:	e000ed04 	.word	0xe000ed04

1a004b78 <prvProcessReceivedCommands>:
{
1a004b78:	b530      	push	{r4, r5, lr}
1a004b7a:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a004b7c:	e002      	b.n	1a004b84 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a004b7e:	9b04      	ldr	r3, [sp, #16]
1a004b80:	2b00      	cmp	r3, #0
1a004b82:	da0f      	bge.n	1a004ba4 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a004b84:	2200      	movs	r2, #0
1a004b86:	a904      	add	r1, sp, #16
1a004b88:	4b39      	ldr	r3, [pc, #228]	; (1a004c70 <prvProcessReceivedCommands+0xf8>)
1a004b8a:	6818      	ldr	r0, [r3, #0]
1a004b8c:	f7fe fe10 	bl	1a0037b0 <xQueueReceive>
1a004b90:	2800      	cmp	r0, #0
1a004b92:	d06a      	beq.n	1a004c6a <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a004b94:	9b04      	ldr	r3, [sp, #16]
1a004b96:	2b00      	cmp	r3, #0
1a004b98:	daf1      	bge.n	1a004b7e <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a004b9a:	9907      	ldr	r1, [sp, #28]
1a004b9c:	9806      	ldr	r0, [sp, #24]
1a004b9e:	9b05      	ldr	r3, [sp, #20]
1a004ba0:	4798      	blx	r3
1a004ba2:	e7ec      	b.n	1a004b7e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a004ba4:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a004ba6:	6963      	ldr	r3, [r4, #20]
1a004ba8:	b113      	cbz	r3, 1a004bb0 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a004baa:	1d20      	adds	r0, r4, #4
1a004bac:	f7fe ffeb 	bl	1a003b86 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a004bb0:	a803      	add	r0, sp, #12
1a004bb2:	f7ff ff61 	bl	1a004a78 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a004bb6:	9b04      	ldr	r3, [sp, #16]
1a004bb8:	2b09      	cmp	r3, #9
1a004bba:	d8e3      	bhi.n	1a004b84 <prvProcessReceivedCommands+0xc>
1a004bbc:	a201      	add	r2, pc, #4	; (adr r2, 1a004bc4 <prvProcessReceivedCommands+0x4c>)
1a004bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a004bc2:	bf00      	nop
1a004bc4:	1a004bed 	.word	0x1a004bed
1a004bc8:	1a004bed 	.word	0x1a004bed
1a004bcc:	1a004bed 	.word	0x1a004bed
1a004bd0:	1a004b85 	.word	0x1a004b85
1a004bd4:	1a004c35 	.word	0x1a004c35
1a004bd8:	1a004c5b 	.word	0x1a004c5b
1a004bdc:	1a004bed 	.word	0x1a004bed
1a004be0:	1a004bed 	.word	0x1a004bed
1a004be4:	1a004b85 	.word	0x1a004b85
1a004be8:	1a004c35 	.word	0x1a004c35
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a004bec:	9905      	ldr	r1, [sp, #20]
1a004bee:	69a5      	ldr	r5, [r4, #24]
1a004bf0:	460b      	mov	r3, r1
1a004bf2:	4602      	mov	r2, r0
1a004bf4:	4429      	add	r1, r5
1a004bf6:	4620      	mov	r0, r4
1a004bf8:	f7ff fe3e 	bl	1a004878 <prvInsertTimerInActiveList>
1a004bfc:	2800      	cmp	r0, #0
1a004bfe:	d0c1      	beq.n	1a004b84 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a004c00:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a004c02:	4620      	mov	r0, r4
1a004c04:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a004c06:	69e3      	ldr	r3, [r4, #28]
1a004c08:	2b01      	cmp	r3, #1
1a004c0a:	d1bb      	bne.n	1a004b84 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a004c0c:	69a2      	ldr	r2, [r4, #24]
1a004c0e:	2100      	movs	r1, #0
1a004c10:	9100      	str	r1, [sp, #0]
1a004c12:	460b      	mov	r3, r1
1a004c14:	9805      	ldr	r0, [sp, #20]
1a004c16:	4402      	add	r2, r0
1a004c18:	4620      	mov	r0, r4
1a004c1a:	f7ff febb 	bl	1a004994 <xTimerGenericCommand>
							configASSERT( xResult );
1a004c1e:	2800      	cmp	r0, #0
1a004c20:	d1b0      	bne.n	1a004b84 <prvProcessReceivedCommands+0xc>
1a004c22:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004c26:	f383 8811 	msr	BASEPRI, r3
1a004c2a:	f3bf 8f6f 	isb	sy
1a004c2e:	f3bf 8f4f 	dsb	sy
1a004c32:	e7fe      	b.n	1a004c32 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a004c34:	9905      	ldr	r1, [sp, #20]
1a004c36:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a004c38:	b131      	cbz	r1, 1a004c48 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a004c3a:	4603      	mov	r3, r0
1a004c3c:	4602      	mov	r2, r0
1a004c3e:	4401      	add	r1, r0
1a004c40:	4620      	mov	r0, r4
1a004c42:	f7ff fe19 	bl	1a004878 <prvInsertTimerInActiveList>
					break;
1a004c46:	e79d      	b.n	1a004b84 <prvProcessReceivedCommands+0xc>
1a004c48:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004c4c:	f383 8811 	msr	BASEPRI, r3
1a004c50:	f3bf 8f6f 	isb	sy
1a004c54:	f3bf 8f4f 	dsb	sy
1a004c58:	e7fe      	b.n	1a004c58 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a004c5a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a004c5e:	2b00      	cmp	r3, #0
1a004c60:	d190      	bne.n	1a004b84 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a004c62:	4620      	mov	r0, r4
1a004c64:	f7fe fac4 	bl	1a0031f0 <vPortFree>
1a004c68:	e78c      	b.n	1a004b84 <prvProcessReceivedCommands+0xc>
}
1a004c6a:	b009      	add	sp, #36	; 0x24
1a004c6c:	bd30      	pop	{r4, r5, pc}
1a004c6e:	bf00      	nop
1a004c70:	1000345c 	.word	0x1000345c

1a004c74 <prvTimerTask>:
{
1a004c74:	b500      	push	{lr}
1a004c76:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a004c78:	a801      	add	r0, sp, #4
1a004c7a:	f7ff fded 	bl	1a004858 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a004c7e:	9901      	ldr	r1, [sp, #4]
1a004c80:	f7ff ff40 	bl	1a004b04 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a004c84:	f7ff ff78 	bl	1a004b78 <prvProcessReceivedCommands>
1a004c88:	e7f6      	b.n	1a004c78 <prvTimerTask+0x4>
1a004c8a:	Address 0x000000001a004c8a is out of bounds.


1a004c8c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a004c8c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a004c8e:	2300      	movs	r3, #0
1a004c90:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a004c92:	4b0d      	ldr	r3, [pc, #52]	; (1a004cc8 <prvTaskExitError+0x3c>)
1a004c94:	681b      	ldr	r3, [r3, #0]
1a004c96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a004c9a:	d008      	beq.n	1a004cae <prvTaskExitError+0x22>
1a004c9c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004ca0:	f383 8811 	msr	BASEPRI, r3
1a004ca4:	f3bf 8f6f 	isb	sy
1a004ca8:	f3bf 8f4f 	dsb	sy
1a004cac:	e7fe      	b.n	1a004cac <prvTaskExitError+0x20>
1a004cae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004cb2:	f383 8811 	msr	BASEPRI, r3
1a004cb6:	f3bf 8f6f 	isb	sy
1a004cba:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a004cbe:	9b01      	ldr	r3, [sp, #4]
1a004cc0:	2b00      	cmp	r3, #0
1a004cc2:	d0fc      	beq.n	1a004cbe <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a004cc4:	b002      	add	sp, #8
1a004cc6:	4770      	bx	lr
1a004cc8:	10000000 	.word	0x10000000

1a004ccc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a004ccc:	4808      	ldr	r0, [pc, #32]	; (1a004cf0 <prvPortStartFirstTask+0x24>)
1a004cce:	6800      	ldr	r0, [r0, #0]
1a004cd0:	6800      	ldr	r0, [r0, #0]
1a004cd2:	f380 8808 	msr	MSP, r0
1a004cd6:	f04f 0000 	mov.w	r0, #0
1a004cda:	f380 8814 	msr	CONTROL, r0
1a004cde:	b662      	cpsie	i
1a004ce0:	b661      	cpsie	f
1a004ce2:	f3bf 8f4f 	dsb	sy
1a004ce6:	f3bf 8f6f 	isb	sy
1a004cea:	df00      	svc	0
1a004cec:	bf00      	nop
1a004cee:	0000      	.short	0x0000
1a004cf0:	e000ed08 	.word	0xe000ed08

1a004cf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a004cf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a004d04 <vPortEnableVFP+0x10>
1a004cf8:	6801      	ldr	r1, [r0, #0]
1a004cfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a004cfe:	6001      	str	r1, [r0, #0]
1a004d00:	4770      	bx	lr
1a004d02:	0000      	.short	0x0000
1a004d04:	e000ed88 	.word	0xe000ed88

1a004d08 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a004d08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a004d0c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a004d10:	f021 0101 	bic.w	r1, r1, #1
1a004d14:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a004d18:	4b05      	ldr	r3, [pc, #20]	; (1a004d30 <pxPortInitialiseStack+0x28>)
1a004d1a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a004d1e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a004d22:	f06f 0302 	mvn.w	r3, #2
1a004d26:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a004d2a:	3844      	subs	r0, #68	; 0x44
1a004d2c:	4770      	bx	lr
1a004d2e:	bf00      	nop
1a004d30:	1a004c8d 	.word	0x1a004c8d
1a004d34:	ffffffff 	.word	0xffffffff
1a004d38:	ffffffff 	.word	0xffffffff
1a004d3c:	ffffffff 	.word	0xffffffff

1a004d40 <SVC_Handler>:
	__asm volatile (
1a004d40:	4b07      	ldr	r3, [pc, #28]	; (1a004d60 <pxCurrentTCBConst2>)
1a004d42:	6819      	ldr	r1, [r3, #0]
1a004d44:	6808      	ldr	r0, [r1, #0]
1a004d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004d4a:	f380 8809 	msr	PSP, r0
1a004d4e:	f3bf 8f6f 	isb	sy
1a004d52:	f04f 0000 	mov.w	r0, #0
1a004d56:	f380 8811 	msr	BASEPRI, r0
1a004d5a:	4770      	bx	lr
1a004d5c:	f3af 8000 	nop.w

1a004d60 <pxCurrentTCBConst2>:
1a004d60:	10003210 	.word	0x10003210

1a004d64 <vPortEnterCritical>:
1a004d64:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004d68:	f383 8811 	msr	BASEPRI, r3
1a004d6c:	f3bf 8f6f 	isb	sy
1a004d70:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a004d74:	4a0a      	ldr	r2, [pc, #40]	; (1a004da0 <vPortEnterCritical+0x3c>)
1a004d76:	6813      	ldr	r3, [r2, #0]
1a004d78:	3301      	adds	r3, #1
1a004d7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a004d7c:	2b01      	cmp	r3, #1
1a004d7e:	d000      	beq.n	1a004d82 <vPortEnterCritical+0x1e>
}
1a004d80:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a004d82:	4b08      	ldr	r3, [pc, #32]	; (1a004da4 <vPortEnterCritical+0x40>)
1a004d84:	681b      	ldr	r3, [r3, #0]
1a004d86:	f013 0fff 	tst.w	r3, #255	; 0xff
1a004d8a:	d0f9      	beq.n	1a004d80 <vPortEnterCritical+0x1c>
1a004d8c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004d90:	f383 8811 	msr	BASEPRI, r3
1a004d94:	f3bf 8f6f 	isb	sy
1a004d98:	f3bf 8f4f 	dsb	sy
1a004d9c:	e7fe      	b.n	1a004d9c <vPortEnterCritical+0x38>
1a004d9e:	bf00      	nop
1a004da0:	10000000 	.word	0x10000000
1a004da4:	e000ed04 	.word	0xe000ed04

1a004da8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a004da8:	4b09      	ldr	r3, [pc, #36]	; (1a004dd0 <vPortExitCritical+0x28>)
1a004daa:	681b      	ldr	r3, [r3, #0]
1a004dac:	b943      	cbnz	r3, 1a004dc0 <vPortExitCritical+0x18>
1a004dae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004db2:	f383 8811 	msr	BASEPRI, r3
1a004db6:	f3bf 8f6f 	isb	sy
1a004dba:	f3bf 8f4f 	dsb	sy
1a004dbe:	e7fe      	b.n	1a004dbe <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a004dc0:	3b01      	subs	r3, #1
1a004dc2:	4a03      	ldr	r2, [pc, #12]	; (1a004dd0 <vPortExitCritical+0x28>)
1a004dc4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a004dc6:	b90b      	cbnz	r3, 1a004dcc <vPortExitCritical+0x24>
	__asm volatile
1a004dc8:	f383 8811 	msr	BASEPRI, r3
}
1a004dcc:	4770      	bx	lr
1a004dce:	bf00      	nop
1a004dd0:	10000000 	.word	0x10000000
1a004dd4:	ffffffff 	.word	0xffffffff
1a004dd8:	ffffffff 	.word	0xffffffff
1a004ddc:	ffffffff 	.word	0xffffffff

1a004de0 <PendSV_Handler>:
	__asm volatile
1a004de0:	f3ef 8009 	mrs	r0, PSP
1a004de4:	f3bf 8f6f 	isb	sy
1a004de8:	4b15      	ldr	r3, [pc, #84]	; (1a004e40 <pxCurrentTCBConst>)
1a004dea:	681a      	ldr	r2, [r3, #0]
1a004dec:	f01e 0f10 	tst.w	lr, #16
1a004df0:	bf08      	it	eq
1a004df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a004df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004dfa:	6010      	str	r0, [r2, #0]
1a004dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
1a004e00:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a004e04:	f380 8811 	msr	BASEPRI, r0
1a004e08:	f3bf 8f4f 	dsb	sy
1a004e0c:	f3bf 8f6f 	isb	sy
1a004e10:	f7ff fac0 	bl	1a004394 <vTaskSwitchContext>
1a004e14:	f04f 0000 	mov.w	r0, #0
1a004e18:	f380 8811 	msr	BASEPRI, r0
1a004e1c:	bc09      	pop	{r0, r3}
1a004e1e:	6819      	ldr	r1, [r3, #0]
1a004e20:	6808      	ldr	r0, [r1, #0]
1a004e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004e26:	f01e 0f10 	tst.w	lr, #16
1a004e2a:	bf08      	it	eq
1a004e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a004e30:	f380 8809 	msr	PSP, r0
1a004e34:	f3bf 8f6f 	isb	sy
1a004e38:	4770      	bx	lr
1a004e3a:	bf00      	nop
1a004e3c:	f3af 8000 	nop.w

1a004e40 <pxCurrentTCBConst>:
1a004e40:	10003210 	.word	0x10003210

1a004e44 <SysTick_Handler>:
{
1a004e44:	b508      	push	{r3, lr}
	__asm volatile
1a004e46:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004e4a:	f383 8811 	msr	BASEPRI, r3
1a004e4e:	f3bf 8f6f 	isb	sy
1a004e52:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a004e56:	f7ff f945 	bl	1a0040e4 <xTaskIncrementTick>
1a004e5a:	b118      	cbz	r0, 1a004e64 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a004e5c:	4b03      	ldr	r3, [pc, #12]	; (1a004e6c <SysTick_Handler+0x28>)
1a004e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a004e62:	601a      	str	r2, [r3, #0]
	__asm volatile
1a004e64:	2300      	movs	r3, #0
1a004e66:	f383 8811 	msr	BASEPRI, r3
}
1a004e6a:	bd08      	pop	{r3, pc}
1a004e6c:	e000ed04 	.word	0xe000ed04

1a004e70 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a004e70:	4a08      	ldr	r2, [pc, #32]	; (1a004e94 <vPortSetupTimerInterrupt+0x24>)
1a004e72:	2300      	movs	r3, #0
1a004e74:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a004e76:	4908      	ldr	r1, [pc, #32]	; (1a004e98 <vPortSetupTimerInterrupt+0x28>)
1a004e78:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a004e7a:	4b08      	ldr	r3, [pc, #32]	; (1a004e9c <vPortSetupTimerInterrupt+0x2c>)
1a004e7c:	681b      	ldr	r3, [r3, #0]
1a004e7e:	4908      	ldr	r1, [pc, #32]	; (1a004ea0 <vPortSetupTimerInterrupt+0x30>)
1a004e80:	fba1 1303 	umull	r1, r3, r1, r3
1a004e84:	099b      	lsrs	r3, r3, #6
1a004e86:	3b01      	subs	r3, #1
1a004e88:	4906      	ldr	r1, [pc, #24]	; (1a004ea4 <vPortSetupTimerInterrupt+0x34>)
1a004e8a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a004e8c:	2307      	movs	r3, #7
1a004e8e:	6013      	str	r3, [r2, #0]
}
1a004e90:	4770      	bx	lr
1a004e92:	bf00      	nop
1a004e94:	e000e010 	.word	0xe000e010
1a004e98:	e000e018 	.word	0xe000e018
1a004e9c:	100034f0 	.word	0x100034f0
1a004ea0:	10624dd3 	.word	0x10624dd3
1a004ea4:	e000e014 	.word	0xe000e014

1a004ea8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a004ea8:	4b3a      	ldr	r3, [pc, #232]	; (1a004f94 <xPortStartScheduler+0xec>)
1a004eaa:	681a      	ldr	r2, [r3, #0]
1a004eac:	4b3a      	ldr	r3, [pc, #232]	; (1a004f98 <xPortStartScheduler+0xf0>)
1a004eae:	429a      	cmp	r2, r3
1a004eb0:	d00d      	beq.n	1a004ece <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a004eb2:	4b38      	ldr	r3, [pc, #224]	; (1a004f94 <xPortStartScheduler+0xec>)
1a004eb4:	681a      	ldr	r2, [r3, #0]
1a004eb6:	4b39      	ldr	r3, [pc, #228]	; (1a004f9c <xPortStartScheduler+0xf4>)
1a004eb8:	429a      	cmp	r2, r3
1a004eba:	d111      	bne.n	1a004ee0 <xPortStartScheduler+0x38>
	__asm volatile
1a004ebc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004ec0:	f383 8811 	msr	BASEPRI, r3
1a004ec4:	f3bf 8f6f 	isb	sy
1a004ec8:	f3bf 8f4f 	dsb	sy
1a004ecc:	e7fe      	b.n	1a004ecc <xPortStartScheduler+0x24>
1a004ece:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004ed2:	f383 8811 	msr	BASEPRI, r3
1a004ed6:	f3bf 8f6f 	isb	sy
1a004eda:	f3bf 8f4f 	dsb	sy
1a004ede:	e7fe      	b.n	1a004ede <xPortStartScheduler+0x36>
{
1a004ee0:	b510      	push	{r4, lr}
1a004ee2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a004ee4:	4b2e      	ldr	r3, [pc, #184]	; (1a004fa0 <xPortStartScheduler+0xf8>)
1a004ee6:	781a      	ldrb	r2, [r3, #0]
1a004ee8:	b2d2      	uxtb	r2, r2
1a004eea:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a004eec:	22ff      	movs	r2, #255	; 0xff
1a004eee:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a004ef0:	781b      	ldrb	r3, [r3, #0]
1a004ef2:	b2db      	uxtb	r3, r3
1a004ef4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a004ef8:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a004efc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a004f00:	4a28      	ldr	r2, [pc, #160]	; (1a004fa4 <xPortStartScheduler+0xfc>)
1a004f02:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a004f04:	4b28      	ldr	r3, [pc, #160]	; (1a004fa8 <xPortStartScheduler+0x100>)
1a004f06:	2207      	movs	r2, #7
1a004f08:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a004f0a:	e009      	b.n	1a004f20 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a004f0c:	4a26      	ldr	r2, [pc, #152]	; (1a004fa8 <xPortStartScheduler+0x100>)
1a004f0e:	6813      	ldr	r3, [r2, #0]
1a004f10:	3b01      	subs	r3, #1
1a004f12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a004f14:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a004f18:	005b      	lsls	r3, r3, #1
1a004f1a:	b2db      	uxtb	r3, r3
1a004f1c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a004f20:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a004f24:	f013 0f80 	tst.w	r3, #128	; 0x80
1a004f28:	d1f0      	bne.n	1a004f0c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a004f2a:	4b1f      	ldr	r3, [pc, #124]	; (1a004fa8 <xPortStartScheduler+0x100>)
1a004f2c:	681b      	ldr	r3, [r3, #0]
1a004f2e:	2b04      	cmp	r3, #4
1a004f30:	d008      	beq.n	1a004f44 <xPortStartScheduler+0x9c>
1a004f32:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004f36:	f383 8811 	msr	BASEPRI, r3
1a004f3a:	f3bf 8f6f 	isb	sy
1a004f3e:	f3bf 8f4f 	dsb	sy
1a004f42:	e7fe      	b.n	1a004f42 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a004f44:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a004f46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a004f4a:	4a17      	ldr	r2, [pc, #92]	; (1a004fa8 <xPortStartScheduler+0x100>)
1a004f4c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a004f4e:	9b01      	ldr	r3, [sp, #4]
1a004f50:	b2db      	uxtb	r3, r3
1a004f52:	4a13      	ldr	r2, [pc, #76]	; (1a004fa0 <xPortStartScheduler+0xf8>)
1a004f54:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a004f56:	4b15      	ldr	r3, [pc, #84]	; (1a004fac <xPortStartScheduler+0x104>)
1a004f58:	681a      	ldr	r2, [r3, #0]
1a004f5a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a004f5e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a004f60:	681a      	ldr	r2, [r3, #0]
1a004f62:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a004f66:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a004f68:	f7ff ff82 	bl	1a004e70 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a004f6c:	2400      	movs	r4, #0
1a004f6e:	4b10      	ldr	r3, [pc, #64]	; (1a004fb0 <xPortStartScheduler+0x108>)
1a004f70:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a004f72:	f7ff febf 	bl	1a004cf4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a004f76:	4a0f      	ldr	r2, [pc, #60]	; (1a004fb4 <xPortStartScheduler+0x10c>)
1a004f78:	6813      	ldr	r3, [r2, #0]
1a004f7a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a004f7e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a004f80:	f7ff fea4 	bl	1a004ccc <prvPortStartFirstTask>
	vTaskSwitchContext();
1a004f84:	f7ff fa06 	bl	1a004394 <vTaskSwitchContext>
	prvTaskExitError();
1a004f88:	f7ff fe80 	bl	1a004c8c <prvTaskExitError>
}
1a004f8c:	4620      	mov	r0, r4
1a004f8e:	b002      	add	sp, #8
1a004f90:	bd10      	pop	{r4, pc}
1a004f92:	bf00      	nop
1a004f94:	e000ed00 	.word	0xe000ed00
1a004f98:	410fc271 	.word	0x410fc271
1a004f9c:	410fc270 	.word	0x410fc270
1a004fa0:	e000e400 	.word	0xe000e400
1a004fa4:	10003464 	.word	0x10003464
1a004fa8:	10003468 	.word	0x10003468
1a004fac:	e000ed20 	.word	0xe000ed20
1a004fb0:	10000000 	.word	0x10000000
1a004fb4:	e000ef34 	.word	0xe000ef34

1a004fb8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a004fb8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a004fbc:	2b0f      	cmp	r3, #15
1a004fbe:	d90f      	bls.n	1a004fe0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a004fc0:	4a10      	ldr	r2, [pc, #64]	; (1a005004 <vPortValidateInterruptPriority+0x4c>)
1a004fc2:	5c9b      	ldrb	r3, [r3, r2]
1a004fc4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a004fc6:	4a10      	ldr	r2, [pc, #64]	; (1a005008 <vPortValidateInterruptPriority+0x50>)
1a004fc8:	7812      	ldrb	r2, [r2, #0]
1a004fca:	429a      	cmp	r2, r3
1a004fcc:	d908      	bls.n	1a004fe0 <vPortValidateInterruptPriority+0x28>
1a004fce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004fd2:	f383 8811 	msr	BASEPRI, r3
1a004fd6:	f3bf 8f6f 	isb	sy
1a004fda:	f3bf 8f4f 	dsb	sy
1a004fde:	e7fe      	b.n	1a004fde <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a004fe0:	4b0a      	ldr	r3, [pc, #40]	; (1a00500c <vPortValidateInterruptPriority+0x54>)
1a004fe2:	681b      	ldr	r3, [r3, #0]
1a004fe4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a004fe8:	4a09      	ldr	r2, [pc, #36]	; (1a005010 <vPortValidateInterruptPriority+0x58>)
1a004fea:	6812      	ldr	r2, [r2, #0]
1a004fec:	4293      	cmp	r3, r2
1a004fee:	d908      	bls.n	1a005002 <vPortValidateInterruptPriority+0x4a>
1a004ff0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004ff4:	f383 8811 	msr	BASEPRI, r3
1a004ff8:	f3bf 8f6f 	isb	sy
1a004ffc:	f3bf 8f4f 	dsb	sy
1a005000:	e7fe      	b.n	1a005000 <vPortValidateInterruptPriority+0x48>
	}
1a005002:	4770      	bx	lr
1a005004:	e000e3f0 	.word	0xe000e3f0
1a005008:	10003464 	.word	0x10003464
1a00500c:	e000ed0c 	.word	0xe000ed0c
1a005010:	10003468 	.word	0x10003468

1a005014 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a005014:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a005016:	4b05      	ldr	r3, [pc, #20]	; (1a00502c <DAC_IRQHandler+0x18>)
1a005018:	2201      	movs	r2, #1
1a00501a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a00501e:	4b04      	ldr	r3, [pc, #16]	; (1a005030 <DAC_IRQHandler+0x1c>)
1a005020:	681b      	ldr	r3, [r3, #0]
1a005022:	b113      	cbz	r3, 1a00502a <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a005024:	4b02      	ldr	r3, [pc, #8]	; (1a005030 <DAC_IRQHandler+0x1c>)
1a005026:	681b      	ldr	r3, [r3, #0]
1a005028:	4798      	blx	r3
   }
}
1a00502a:	bd08      	pop	{r3, pc}
1a00502c:	e000e100 	.word	0xe000e100
1a005030:	1000346c 	.word	0x1000346c

1a005034 <newCardStatus>:
static FSSDC_StatusUpdateCallback_Func  g_statusUpdateCallback = NULL;
static enum FSSDC_CardStatus            g_cardStatus = FSSDC_CardStatus_Removed;


static void newCardStatus (enum FSSDC_CardStatus cardStatus)
{
1a005034:	b508      	push	{r3, lr}
    g_cardStatus = cardStatus;
1a005036:	4b03      	ldr	r3, [pc, #12]	; (1a005044 <newCardStatus+0x10>)
1a005038:	7018      	strb	r0, [r3, #0]
    if (g_statusUpdateCallback)
1a00503a:	4b03      	ldr	r3, [pc, #12]	; (1a005048 <newCardStatus+0x14>)
1a00503c:	681b      	ldr	r3, [r3, #0]
1a00503e:	b103      	cbz	r3, 1a005042 <newCardStatus+0xe>
    {
        g_statusUpdateCallback (g_cardStatus);
1a005040:	4798      	blx	r3
    }
}
1a005042:	bd08      	pop	{r3, pc}
1a005044:	10000004 	.word	0x10000004
1a005048:	10003474 	.word	0x10003474

1a00504c <chk_power>:

static
int chk_power(void)		/* Socket power state: 0=off, 1=on */
{
	return 1;
}
1a00504c:	2001      	movs	r0, #1
1a00504e:	4770      	bx	lr

1a005050 <SSPSend>:
{
1a005050:	b500      	push	{lr}
1a005052:	b087      	sub	sp, #28
	xferConfig.tx_data = buf;
1a005054:	9001      	str	r0, [sp, #4]
	xferConfig.tx_cnt  = 0;
1a005056:	2300      	movs	r3, #0
1a005058:	9302      	str	r3, [sp, #8]
	xferConfig.rx_data = NULL;
1a00505a:	9303      	str	r3, [sp, #12]
	xferConfig.rx_cnt  = 0;
1a00505c:	9304      	str	r3, [sp, #16]
	xferConfig.length  = Length;
1a00505e:	9105      	str	r1, [sp, #20]
	Chip_SSP_RWFrames_Blocking(LPC_SSP1, &xferConfig);
1a005060:	a901      	add	r1, sp, #4
1a005062:	4803      	ldr	r0, [pc, #12]	; (1a005070 <SSPSend+0x20>)
1a005064:	f001 fbbf 	bl	1a0067e6 <Chip_SSP_RWFrames_Blocking>
}
1a005068:	b007      	add	sp, #28
1a00506a:	f85d fb04 	ldr.w	pc, [sp], #4
1a00506e:	bf00      	nop
1a005070:	400c5000 	.word	0x400c5000

1a005074 <xmit_spi>:
{
1a005074:	b500      	push	{lr}
1a005076:	b083      	sub	sp, #12
1a005078:	ab02      	add	r3, sp, #8
1a00507a:	f803 0d01 	strb.w	r0, [r3, #-1]!
    SSPSend((uint8_t*) &dat, 1);
1a00507e:	2101      	movs	r1, #1
1a005080:	4618      	mov	r0, r3
1a005082:	f7ff ffe5 	bl	1a005050 <SSPSend>
}
1a005086:	b003      	add	sp, #12
1a005088:	f85d fb04 	ldr.w	pc, [sp], #4

1a00508c <SSPReceive>:
{
1a00508c:	b500      	push	{lr}
1a00508e:	b087      	sub	sp, #28
	xferConfig.tx_data = NULL;
1a005090:	2300      	movs	r3, #0
1a005092:	9301      	str	r3, [sp, #4]
	xferConfig.tx_cnt  = 0;
1a005094:	9302      	str	r3, [sp, #8]
	xferConfig.rx_data = buf;
1a005096:	9003      	str	r0, [sp, #12]
	xferConfig.rx_cnt  = 0;
1a005098:	9304      	str	r3, [sp, #16]
	xferConfig.length  = Length;
1a00509a:	9105      	str	r1, [sp, #20]
	Chip_SSP_RWFrames_Blocking(LPC_SSP1, &xferConfig);
1a00509c:	a901      	add	r1, sp, #4
1a00509e:	4803      	ldr	r0, [pc, #12]	; (1a0050ac <SSPReceive+0x20>)
1a0050a0:	f001 fba1 	bl	1a0067e6 <Chip_SSP_RWFrames_Blocking>
}
1a0050a4:	b007      	add	sp, #28
1a0050a6:	f85d fb04 	ldr.w	pc, [sp], #4
1a0050aa:	bf00      	nop
1a0050ac:	400c5000 	.word	0x400c5000

1a0050b0 <rcvr_spi>:
{
1a0050b0:	b500      	push	{lr}
1a0050b2:	b083      	sub	sp, #12
    BYTE data = 0;
1a0050b4:	a802      	add	r0, sp, #8
1a0050b6:	2300      	movs	r3, #0
1a0050b8:	f800 3d01 	strb.w	r3, [r0, #-1]!
    SSPReceive(&data, 1);
1a0050bc:	2101      	movs	r1, #1
1a0050be:	f7ff ffe5 	bl	1a00508c <SSPReceive>
}
1a0050c2:	f89d 0007 	ldrb.w	r0, [sp, #7]
1a0050c6:	b003      	add	sp, #12
1a0050c8:	f85d fb04 	ldr.w	pc, [sp], #4

1a0050cc <wait_ready>:
{
1a0050cc:	b508      	push	{r3, lr}
	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
1a0050ce:	4b07      	ldr	r3, [pc, #28]	; (1a0050ec <wait_ready+0x20>)
1a0050d0:	2232      	movs	r2, #50	; 0x32
1a0050d2:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
1a0050d4:	f7ff ffec 	bl	1a0050b0 <rcvr_spi>
		res = rcvr_spi();
1a0050d8:	f7ff ffea 	bl	1a0050b0 <rcvr_spi>
	while ((res != 0xFF) && Timer2);
1a0050dc:	28ff      	cmp	r0, #255	; 0xff
1a0050de:	d003      	beq.n	1a0050e8 <wait_ready+0x1c>
1a0050e0:	4b02      	ldr	r3, [pc, #8]	; (1a0050ec <wait_ready+0x20>)
1a0050e2:	781b      	ldrb	r3, [r3, #0]
1a0050e4:	2b00      	cmp	r3, #0
1a0050e6:	d1f7      	bne.n	1a0050d8 <wait_ready+0xc>
}
1a0050e8:	bd08      	pop	{r3, pc}
1a0050ea:	bf00      	nop
1a0050ec:	10003472 	.word	0x10003472

1a0050f0 <deselect>:
{
1a0050f0:	b508      	push	{r3, lr}
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutHigh(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->SET[port] = (1 << pin);
1a0050f2:	4a04      	ldr	r2, [pc, #16]	; (1a005104 <deselect+0x14>)
1a0050f4:	f242 230c 	movw	r3, #8716	; 0x220c
1a0050f8:	2101      	movs	r1, #1
1a0050fa:	50d1      	str	r1, [r2, r3]
	rcvr_spi();
1a0050fc:	f7ff ffd8 	bl	1a0050b0 <rcvr_spi>
}
1a005100:	bd08      	pop	{r3, pc}
1a005102:	bf00      	nop
1a005104:	400f4000 	.word	0x400f4000

1a005108 <select_>:
{
1a005108:	b508      	push	{r3, lr}
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutLow(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->CLR[port] = (1 << pin);
1a00510a:	4a07      	ldr	r2, [pc, #28]	; (1a005128 <select_+0x20>)
1a00510c:	f242 238c 	movw	r3, #8844	; 0x228c
1a005110:	2101      	movs	r1, #1
1a005112:	50d1      	str	r1, [r2, r3]
	if (wait_ready() != 0xFF) {
1a005114:	f7ff ffda 	bl	1a0050cc <wait_ready>
1a005118:	28ff      	cmp	r0, #255	; 0xff
1a00511a:	d003      	beq.n	1a005124 <select_+0x1c>
		deselect();
1a00511c:	f7ff ffe8 	bl	1a0050f0 <deselect>
		return FALSE;
1a005120:	2000      	movs	r0, #0
}
1a005122:	bd08      	pop	{r3, pc}
	return TRUE;
1a005124:	2001      	movs	r0, #1
1a005126:	e7fc      	b.n	1a005122 <select_+0x1a>
1a005128:	400f4000 	.word	0x400f4000

1a00512c <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
1a00512c:	b538      	push	{r3, r4, r5, lr}
1a00512e:	4604      	mov	r4, r0
1a005130:	460d      	mov	r5, r1
	BYTE n, res;


    if (cmd & 0x80)                     /* ACMD<n> is the command sequense of CMD55-CMD<n> */
1a005132:	f010 0f80 	tst.w	r0, #128	; 0x80
1a005136:	d129      	bne.n	1a00518c <send_cmd+0x60>
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
1a005138:	f7ff ffda 	bl	1a0050f0 <deselect>
	if (!select_()) 
1a00513c:	f7ff ffe4 	bl	1a005108 <select_>
1a005140:	b3a0      	cbz	r0, 1a0051ac <send_cmd+0x80>
    {
        return 0xFF;
    }

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
1a005142:	4620      	mov	r0, r4
1a005144:	f7ff ff96 	bl	1a005074 <xmit_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
1a005148:	0e28      	lsrs	r0, r5, #24
1a00514a:	f7ff ff93 	bl	1a005074 <xmit_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
1a00514e:	f3c5 4007 	ubfx	r0, r5, #16, #8
1a005152:	f7ff ff8f 	bl	1a005074 <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
1a005156:	f3c5 2007 	ubfx	r0, r5, #8, #8
1a00515a:	f7ff ff8b 	bl	1a005074 <xmit_spi>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
1a00515e:	b2e8      	uxtb	r0, r5
1a005160:	f7ff ff88 	bl	1a005074 <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
    
	if (cmd == CMD0_) 
1a005164:	2c40      	cmp	r4, #64	; 0x40
1a005166:	d01a      	beq.n	1a00519e <send_cmd+0x72>
	n = 0x01;							/* Dummy CRC + Stop */
1a005168:	2001      	movs	r0, #1
    {
        n = 0x95;                       /* Valid CRC for CMD0_(0) */
    }
    
	if (cmd == CMD8)
1a00516a:	2c48      	cmp	r4, #72	; 0x48
1a00516c:	d019      	beq.n	1a0051a2 <send_cmd+0x76>
    {
        n = 0x87;                       /* Valid CRC for CMD8(0x1AA) */
    }
    
	xmit_spi(n);
1a00516e:	f7ff ff81 	bl	1a005074 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12) 
1a005172:	2c4c      	cmp	r4, #76	; 0x4c
1a005174:	d017      	beq.n	1a0051a6 <send_cmd+0x7a>
        n = 0x87;                       /* Valid CRC for CMD8(0x1AA) */
1a005176:	240a      	movs	r4, #10
    }
    
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
    {
		res = rcvr_spi();
1a005178:	f7ff ff9a 	bl	1a0050b0 <rcvr_spi>
    }
	while ((res & 0x80) && --n);
1a00517c:	f010 0f80 	tst.w	r0, #128	; 0x80
1a005180:	d015      	beq.n	1a0051ae <send_cmd+0x82>
1a005182:	1e63      	subs	r3, r4, #1
1a005184:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
1a005188:	d1f6      	bne.n	1a005178 <send_cmd+0x4c>
1a00518a:	e010      	b.n	1a0051ae <send_cmd+0x82>
		cmd &= 0x7F;
1a00518c:	f000 047f 	and.w	r4, r0, #127	; 0x7f
		res = send_cmd(CMD55, 0);
1a005190:	2100      	movs	r1, #0
1a005192:	2077      	movs	r0, #119	; 0x77
1a005194:	f7ff ffca 	bl	1a00512c <send_cmd>
		if (res > 1) return res;
1a005198:	2801      	cmp	r0, #1
1a00519a:	d808      	bhi.n	1a0051ae <send_cmd+0x82>
1a00519c:	e7cc      	b.n	1a005138 <send_cmd+0xc>
        n = 0x95;                       /* Valid CRC for CMD0_(0) */
1a00519e:	2095      	movs	r0, #149	; 0x95
1a0051a0:	e7e3      	b.n	1a00516a <send_cmd+0x3e>
        n = 0x87;                       /* Valid CRC for CMD8(0x1AA) */
1a0051a2:	2087      	movs	r0, #135	; 0x87
1a0051a4:	e7e3      	b.n	1a00516e <send_cmd+0x42>
        rcvr_spi();                     /* Skip a stuff byte when stop reading */
1a0051a6:	f7ff ff83 	bl	1a0050b0 <rcvr_spi>
1a0051aa:	e7e4      	b.n	1a005176 <send_cmd+0x4a>
        return 0xFF;
1a0051ac:	20ff      	movs	r0, #255	; 0xff

	return res;			/* Return with the response value */
}
1a0051ae:	bd38      	pop	{r3, r4, r5, pc}

1a0051b0 <xmit_datablock>:
{
1a0051b0:	b570      	push	{r4, r5, r6, lr}
1a0051b2:	4606      	mov	r6, r0
1a0051b4:	460c      	mov	r4, r1
	if (wait_ready() != 0xFF) 
1a0051b6:	f7ff ff89 	bl	1a0050cc <wait_ready>
1a0051ba:	28ff      	cmp	r0, #255	; 0xff
1a0051bc:	d001      	beq.n	1a0051c2 <xmit_datablock+0x12>
        return FALSE;
1a0051be:	2000      	movs	r0, #0
}
1a0051c0:	bd70      	pop	{r4, r5, r6, pc}
	xmit_spi(token);					/* Xmit data token */
1a0051c2:	4620      	mov	r0, r4
1a0051c4:	f7ff ff56 	bl	1a005074 <xmit_spi>
	if (token != 0xFD)                  /* Is data token */
1a0051c8:	2cfd      	cmp	r4, #253	; 0xfd
1a0051ca:	d01b      	beq.n	1a005204 <xmit_datablock+0x54>
		wc = 0;
1a0051cc:	2400      	movs	r4, #0
			xmit_spi(*buff++);
1a0051ce:	4635      	mov	r5, r6
1a0051d0:	f815 0b02 	ldrb.w	r0, [r5], #2
1a0051d4:	f7ff ff4e 	bl	1a005074 <xmit_spi>
			xmit_spi(*buff++);
1a0051d8:	7870      	ldrb	r0, [r6, #1]
1a0051da:	f7ff ff4b 	bl	1a005074 <xmit_spi>
        while (--wc);
1a0051de:	1e63      	subs	r3, r4, #1
			xmit_spi(*buff++);
1a0051e0:	462e      	mov	r6, r5
        while (--wc);
1a0051e2:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
1a0051e6:	d1f2      	bne.n	1a0051ce <xmit_datablock+0x1e>
		xmit_spi(0xFF);					/* CRC (Dummy) */
1a0051e8:	20ff      	movs	r0, #255	; 0xff
1a0051ea:	f7ff ff43 	bl	1a005074 <xmit_spi>
		xmit_spi(0xFF);
1a0051ee:	20ff      	movs	r0, #255	; 0xff
1a0051f0:	f7ff ff40 	bl	1a005074 <xmit_spi>
		resp = rcvr_spi();				/* Reveive data response */
1a0051f4:	f7ff ff5c 	bl	1a0050b0 <rcvr_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
1a0051f8:	f000 001f 	and.w	r0, r0, #31
1a0051fc:	2805      	cmp	r0, #5
1a0051fe:	d003      	beq.n	1a005208 <xmit_datablock+0x58>
			return FALSE;
1a005200:	2000      	movs	r0, #0
1a005202:	e7dd      	b.n	1a0051c0 <xmit_datablock+0x10>
	return TRUE;
1a005204:	2001      	movs	r0, #1
1a005206:	e7db      	b.n	1a0051c0 <xmit_datablock+0x10>
1a005208:	2001      	movs	r0, #1
1a00520a:	e7d9      	b.n	1a0051c0 <xmit_datablock+0x10>

1a00520c <rcvr_datablock>:
{
1a00520c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00520e:	4604      	mov	r4, r0
1a005210:	460e      	mov	r6, r1
	Timer1 = 20;
1a005212:	4b15      	ldr	r3, [pc, #84]	; (1a005268 <rcvr_datablock+0x5c>)
1a005214:	2214      	movs	r2, #20
1a005216:	701a      	strb	r2, [r3, #0]
		token = rcvr_spi();
1a005218:	f7ff ff4a 	bl	1a0050b0 <rcvr_spi>
    while ((token == 0xFF) && Timer1);
1a00521c:	28ff      	cmp	r0, #255	; 0xff
1a00521e:	d103      	bne.n	1a005228 <rcvr_datablock+0x1c>
1a005220:	4b11      	ldr	r3, [pc, #68]	; (1a005268 <rcvr_datablock+0x5c>)
1a005222:	781b      	ldrb	r3, [r3, #0]
1a005224:	2b00      	cmp	r3, #0
1a005226:	d1f7      	bne.n	1a005218 <rcvr_datablock+0xc>
	if (token != 0xFE) 
1a005228:	28fe      	cmp	r0, #254	; 0xfe
1a00522a:	d001      	beq.n	1a005230 <rcvr_datablock+0x24>
        return FALSE;               /* If not valid data token, retutn with error */
1a00522c:	2000      	movs	r0, #0
}
1a00522e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rcvr_spi_m(buff++);
1a005230:	1c65      	adds	r5, r4, #1
1a005232:	2101      	movs	r1, #1
1a005234:	4620      	mov	r0, r4
1a005236:	f7ff ff29 	bl	1a00508c <SSPReceive>
		rcvr_spi_m(buff++);
1a00523a:	1ca7      	adds	r7, r4, #2
1a00523c:	2101      	movs	r1, #1
1a00523e:	4628      	mov	r0, r5
1a005240:	f7ff ff24 	bl	1a00508c <SSPReceive>
		rcvr_spi_m(buff++);
1a005244:	1ce5      	adds	r5, r4, #3
1a005246:	2101      	movs	r1, #1
1a005248:	4638      	mov	r0, r7
1a00524a:	f7ff ff1f 	bl	1a00508c <SSPReceive>
		rcvr_spi_m(buff++);
1a00524e:	2101      	movs	r1, #1
1a005250:	4628      	mov	r0, r5
1a005252:	3404      	adds	r4, #4
1a005254:	f7ff ff1a 	bl	1a00508c <SSPReceive>
    while (btr -= 4);
1a005258:	3e04      	subs	r6, #4
1a00525a:	d1e9      	bne.n	1a005230 <rcvr_datablock+0x24>
	rcvr_spi();						/* Discard CRC */
1a00525c:	f7ff ff28 	bl	1a0050b0 <rcvr_spi>
	rcvr_spi();
1a005260:	f7ff ff26 	bl	1a0050b0 <rcvr_spi>
	return TRUE;					/* Return with success */
1a005264:	2001      	movs	r0, #1
1a005266:	e7e2      	b.n	1a00522e <rcvr_datablock+0x22>
1a005268:	10003471 	.word	0x10003471

1a00526c <FSSDC_FatFs_DiskStatus>:
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS FSSDC_FatFs_DiskStatus ()
{
	return g_diskStats;
1a00526c:	4b01      	ldr	r3, [pc, #4]	; (1a005274 <FSSDC_FatFs_DiskStatus+0x8>)
1a00526e:	7818      	ldrb	r0, [r3, #0]
}
1a005270:	4770      	bx	lr
1a005272:	bf00      	nop
1a005274:	10000005 	.word	0x10000005

1a005278 <FSSDC_FatFs_DiskInitialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS FSSDC_FatFs_DiskInitialize ()
{
1a005278:	b570      	push	{r4, r5, r6, lr}
1a00527a:	b082      	sub	sp, #8
	BYTE n, cmd, ty, ocr[4];

    if (g_diskStats & STA_NODISK)
1a00527c:	4b5f      	ldr	r3, [pc, #380]	; (1a0053fc <FSSDC_FatFs_DiskInitialize+0x184>)
1a00527e:	781b      	ldrb	r3, [r3, #0]
1a005280:	f013 0f02 	tst.w	r3, #2
1a005284:	d109      	bne.n	1a00529a <FSSDC_FatFs_DiskInitialize+0x22>
    {
        Board_UARTPutSTR ("FSSDC: [Init] No card in socket.\r\n");
        return g_diskStats;                 /* No card in the socket */
    }
    
    if (!(g_diskStats & STA_NOINIT))        /* Already initialized */
1a005286:	4b5d      	ldr	r3, [pc, #372]	; (1a0053fc <FSSDC_FatFs_DiskInitialize+0x184>)
1a005288:	781b      	ldrb	r3, [r3, #0]
1a00528a:	f013 0f01 	tst.w	r3, #1
1a00528e:	d10b      	bne.n	1a0052a8 <FSSDC_FatFs_DiskInitialize+0x30>
    {
        return g_diskStats;
1a005290:	4b5a      	ldr	r3, [pc, #360]	; (1a0053fc <FSSDC_FatFs_DiskInitialize+0x184>)
1a005292:	7818      	ldrb	r0, [r3, #0]
1a005294:	b2c0      	uxtb	r0, r0
        Board_UARTPutSTR ("FSSDC: [Init] New card status: Error (Not Initialized).\r\n");        
        newCardStatus (FSSDC_CardStatus_Error); 
	}

	return g_diskStats;
}
1a005296:	b002      	add	sp, #8
1a005298:	bd70      	pop	{r4, r5, r6, pc}
        Board_UARTPutSTR ("FSSDC: [Init] No card in socket.\r\n");
1a00529a:	4859      	ldr	r0, [pc, #356]	; (1a005400 <FSSDC_FatFs_DiskInitialize+0x188>)
1a00529c:	f000 fc48 	bl	1a005b30 <Board_UARTPutSTR>
        return g_diskStats;                 /* No card in the socket */
1a0052a0:	4b56      	ldr	r3, [pc, #344]	; (1a0053fc <FSSDC_FatFs_DiskInitialize+0x184>)
1a0052a2:	7818      	ldrb	r0, [r3, #0]
1a0052a4:	b2c0      	uxtb	r0, r0
1a0052a6:	e7f6      	b.n	1a005296 <FSSDC_FatFs_DiskInitialize+0x1e>
    Board_UARTPutSTR ("FSSDC: [Init] Initialization begins.\r\n");
1a0052a8:	4856      	ldr	r0, [pc, #344]	; (1a005404 <FSSDC_FatFs_DiskInitialize+0x18c>)
1a0052aa:	f000 fc41 	bl	1a005b30 <Board_UARTPutSTR>
	FCLK_SLOW();
1a0052ae:	4b56      	ldr	r3, [pc, #344]	; (1a005408 <FSSDC_FatFs_DiskInitialize+0x190>)
1a0052b0:	6819      	ldr	r1, [r3, #0]
1a0052b2:	4856      	ldr	r0, [pc, #344]	; (1a00540c <FSSDC_FatFs_DiskInitialize+0x194>)
1a0052b4:	f001 faec 	bl	1a006890 <Chip_SSP_SetBitRate>
	for (n = 10; n; n--) 
1a0052b8:	240a      	movs	r4, #10
1a0052ba:	e003      	b.n	1a0052c4 <FSSDC_FatFs_DiskInitialize+0x4c>
        rcvr_spi();	/* 80 dummy clocks */
1a0052bc:	f7ff fef8 	bl	1a0050b0 <rcvr_spi>
	for (n = 10; n; n--) 
1a0052c0:	3c01      	subs	r4, #1
1a0052c2:	b2e4      	uxtb	r4, r4
1a0052c4:	2c00      	cmp	r4, #0
1a0052c6:	d1f9      	bne.n	1a0052bc <FSSDC_FatFs_DiskInitialize+0x44>
    Board_UARTPutSTR ("FSSDC: [Init] New card status: Native Mode.\r\n");
1a0052c8:	4851      	ldr	r0, [pc, #324]	; (1a005410 <FSSDC_FatFs_DiskInitialize+0x198>)
1a0052ca:	f000 fc31 	bl	1a005b30 <Board_UARTPutSTR>
    newCardStatus (FSSDC_CardStatus_NativeMode);    
1a0052ce:	2003      	movs	r0, #3
1a0052d0:	f7ff feb0 	bl	1a005034 <newCardStatus>
	if (send_cmd(CMD0_, 0) == 1)                                /* Enter Idle state */
1a0052d4:	2100      	movs	r1, #0
1a0052d6:	2040      	movs	r0, #64	; 0x40
1a0052d8:	f7ff ff28 	bl	1a00512c <send_cmd>
1a0052dc:	4605      	mov	r5, r0
1a0052de:	2801      	cmp	r0, #1
1a0052e0:	d019      	beq.n	1a005316 <FSSDC_FatFs_DiskInitialize+0x9e>
	CardType = ty;
1a0052e2:	4b4c      	ldr	r3, [pc, #304]	; (1a005414 <FSSDC_FatFs_DiskInitialize+0x19c>)
1a0052e4:	701c      	strb	r4, [r3, #0]
	deselect();
1a0052e6:	f7ff ff03 	bl	1a0050f0 <deselect>
    if (ty)                                             /* Initialization succeded */
1a0052ea:	2c00      	cmp	r4, #0
1a0052ec:	d07f      	beq.n	1a0053ee <FSSDC_FatFs_DiskInitialize+0x176>
		g_diskStats &= ~STA_NOINIT;                     /* Clear STA_NOINIT */
1a0052ee:	4a43      	ldr	r2, [pc, #268]	; (1a0053fc <FSSDC_FatFs_DiskInitialize+0x184>)
1a0052f0:	7813      	ldrb	r3, [r2, #0]
1a0052f2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
1a0052f6:	7013      	strb	r3, [r2, #0]
		FCLK_FAST();
1a0052f8:	4b47      	ldr	r3, [pc, #284]	; (1a005418 <FSSDC_FatFs_DiskInitialize+0x1a0>)
1a0052fa:	6819      	ldr	r1, [r3, #0]
1a0052fc:	4843      	ldr	r0, [pc, #268]	; (1a00540c <FSSDC_FatFs_DiskInitialize+0x194>)
1a0052fe:	f001 fac7 	bl	1a006890 <Chip_SSP_SetBitRate>
        Board_UARTPutSTR ("FSSDC: [Init] New card status: Ready (Fast Clock).\r\n");        
1a005302:	4846      	ldr	r0, [pc, #280]	; (1a00541c <FSSDC_FatFs_DiskInitialize+0x1a4>)
1a005304:	f000 fc14 	bl	1a005b30 <Board_UARTPutSTR>
        newCardStatus (FSSDC_CardStatus_Ready);        
1a005308:	2005      	movs	r0, #5
1a00530a:	f7ff fe93 	bl	1a005034 <newCardStatus>
	return g_diskStats;
1a00530e:	4b3b      	ldr	r3, [pc, #236]	; (1a0053fc <FSSDC_FatFs_DiskInitialize+0x184>)
1a005310:	7818      	ldrb	r0, [r3, #0]
1a005312:	b2c0      	uxtb	r0, r0
1a005314:	e7bf      	b.n	1a005296 <FSSDC_FatFs_DiskInitialize+0x1e>
        Board_UARTPutSTR ("FSSDC: [Init] New card status: Initializing.\r\n");        
1a005316:	4842      	ldr	r0, [pc, #264]	; (1a005420 <FSSDC_FatFs_DiskInitialize+0x1a8>)
1a005318:	f000 fc0a 	bl	1a005b30 <Board_UARTPutSTR>
        newCardStatus (FSSDC_CardStatus_Initializing);
1a00531c:	2004      	movs	r0, #4
1a00531e:	f7ff fe89 	bl	1a005034 <newCardStatus>
		Timer1 = 100;                                           /* Initialization timeout of 1000 msec */
1a005322:	4b40      	ldr	r3, [pc, #256]	; (1a005424 <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a005324:	2264      	movs	r2, #100	; 0x64
1a005326:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1)                         /* SDHC */
1a005328:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
1a00532c:	2048      	movs	r0, #72	; 0x48
1a00532e:	f7ff fefd 	bl	1a00512c <send_cmd>
1a005332:	2801      	cmp	r0, #1
1a005334:	d139      	bne.n	1a0053aa <FSSDC_FatFs_DiskInitialize+0x132>
			for (n = 0; n < 4; n++) 
1a005336:	4625      	mov	r5, r4
1a005338:	e007      	b.n	1a00534a <FSSDC_FatFs_DiskInitialize+0xd2>
                ocr[n] = rcvr_spi();                            /* Get trailing return value of R7 resp */
1a00533a:	f7ff feb9 	bl	1a0050b0 <rcvr_spi>
1a00533e:	ab02      	add	r3, sp, #8
1a005340:	442b      	add	r3, r5
1a005342:	f803 0c04 	strb.w	r0, [r3, #-4]
			for (n = 0; n < 4; n++) 
1a005346:	3501      	adds	r5, #1
1a005348:	b2ed      	uxtb	r5, r5
1a00534a:	2d03      	cmp	r5, #3
1a00534c:	d9f5      	bls.n	1a00533a <FSSDC_FatFs_DiskInitialize+0xc2>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)               /* The card can work at vdd range of 2.7-3.6V */ 
1a00534e:	f89d 3006 	ldrb.w	r3, [sp, #6]
1a005352:	2b01      	cmp	r3, #1
1a005354:	d1c5      	bne.n	1a0052e2 <FSSDC_FatFs_DiskInitialize+0x6a>
1a005356:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a00535a:	2baa      	cmp	r3, #170	; 0xaa
1a00535c:	d1c1      	bne.n	1a0052e2 <FSSDC_FatFs_DiskInitialize+0x6a>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
1a00535e:	4b31      	ldr	r3, [pc, #196]	; (1a005424 <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a005360:	781b      	ldrb	r3, [r3, #0]
1a005362:	b133      	cbz	r3, 1a005372 <FSSDC_FatFs_DiskInitialize+0xfa>
1a005364:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
1a005368:	20e9      	movs	r0, #233	; 0xe9
1a00536a:	f7ff fedf 	bl	1a00512c <send_cmd>
1a00536e:	2800      	cmp	r0, #0
1a005370:	d1f5      	bne.n	1a00535e <FSSDC_FatFs_DiskInitialize+0xe6>
                if (Timer1 && send_cmd(CMD58, 0) == 0) 
1a005372:	4b2c      	ldr	r3, [pc, #176]	; (1a005424 <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a005374:	781b      	ldrb	r3, [r3, #0]
1a005376:	2b00      	cmp	r3, #0
1a005378:	d0b3      	beq.n	1a0052e2 <FSSDC_FatFs_DiskInitialize+0x6a>
1a00537a:	2100      	movs	r1, #0
1a00537c:	207a      	movs	r0, #122	; 0x7a
1a00537e:	f7ff fed5 	bl	1a00512c <send_cmd>
1a005382:	4605      	mov	r5, r0
1a005384:	b140      	cbz	r0, 1a005398 <FSSDC_FatFs_DiskInitialize+0x120>
1a005386:	e7ac      	b.n	1a0052e2 <FSSDC_FatFs_DiskInitialize+0x6a>
                        ocr[n] = rcvr_spi();
1a005388:	f7ff fe92 	bl	1a0050b0 <rcvr_spi>
1a00538c:	ab02      	add	r3, sp, #8
1a00538e:	442b      	add	r3, r5
1a005390:	f803 0c04 	strb.w	r0, [r3, #-4]
					for (n = 0; n < 4; n++)                     /* Check CCS bit in the OCR */
1a005394:	3501      	adds	r5, #1
1a005396:	b2ed      	uxtb	r5, r5
1a005398:	2d03      	cmp	r5, #3
1a00539a:	d9f5      	bls.n	1a005388 <FSSDC_FatFs_DiskInitialize+0x110>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
1a00539c:	f89d 3004 	ldrb.w	r3, [sp, #4]
1a0053a0:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0053a4:	d021      	beq.n	1a0053ea <FSSDC_FatFs_DiskInitialize+0x172>
1a0053a6:	240c      	movs	r4, #12
1a0053a8:	e79b      	b.n	1a0052e2 <FSSDC_FatFs_DiskInitialize+0x6a>
			if (send_cmd(ACMD41, 0) <= 1)
1a0053aa:	2100      	movs	r1, #0
1a0053ac:	20e9      	movs	r0, #233	; 0xe9
1a0053ae:	f7ff febd 	bl	1a00512c <send_cmd>
1a0053b2:	2801      	cmp	r0, #1
1a0053b4:	d916      	bls.n	1a0053e4 <FSSDC_FatFs_DiskInitialize+0x16c>
				ty = CT_MMC; cmd = CMD1;                        /* MMCv3 */
1a0053b6:	2641      	movs	r6, #65	; 0x41
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
1a0053b8:	4b1a      	ldr	r3, [pc, #104]	; (1a005424 <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a0053ba:	781b      	ldrb	r3, [r3, #0]
1a0053bc:	b12b      	cbz	r3, 1a0053ca <FSSDC_FatFs_DiskInitialize+0x152>
1a0053be:	2100      	movs	r1, #0
1a0053c0:	4630      	mov	r0, r6
1a0053c2:	f7ff feb3 	bl	1a00512c <send_cmd>
1a0053c6:	2800      	cmp	r0, #0
1a0053c8:	d1f6      	bne.n	1a0053b8 <FSSDC_FatFs_DiskInitialize+0x140>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
1a0053ca:	4b16      	ldr	r3, [pc, #88]	; (1a005424 <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a0053cc:	781b      	ldrb	r3, [r3, #0]
1a0053ce:	2b00      	cmp	r3, #0
1a0053d0:	d087      	beq.n	1a0052e2 <FSSDC_FatFs_DiskInitialize+0x6a>
1a0053d2:	f44f 7100 	mov.w	r1, #512	; 0x200
1a0053d6:	2050      	movs	r0, #80	; 0x50
1a0053d8:	f7ff fea8 	bl	1a00512c <send_cmd>
1a0053dc:	2800      	cmp	r0, #0
1a0053de:	d180      	bne.n	1a0052e2 <FSSDC_FatFs_DiskInitialize+0x6a>
1a0053e0:	462c      	mov	r4, r5
1a0053e2:	e77e      	b.n	1a0052e2 <FSSDC_FatFs_DiskInitialize+0x6a>
				ty = CT_SD1; cmd = ACMD41;                      /* SDv1 */
1a0053e4:	2502      	movs	r5, #2
1a0053e6:	26e9      	movs	r6, #233	; 0xe9
1a0053e8:	e7e6      	b.n	1a0053b8 <FSSDC_FatFs_DiskInitialize+0x140>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
1a0053ea:	2404      	movs	r4, #4
1a0053ec:	e779      	b.n	1a0052e2 <FSSDC_FatFs_DiskInitialize+0x6a>
        Board_UARTPutSTR ("FSSDC: [Init] New card status: Error (Not Initialized).\r\n");        
1a0053ee:	480e      	ldr	r0, [pc, #56]	; (1a005428 <FSSDC_FatFs_DiskInitialize+0x1b0>)
1a0053f0:	f000 fb9e 	bl	1a005b30 <Board_UARTPutSTR>
        newCardStatus (FSSDC_CardStatus_Error); 
1a0053f4:	2000      	movs	r0, #0
1a0053f6:	f7ff fe1d 	bl	1a005034 <newCardStatus>
1a0053fa:	e788      	b.n	1a00530e <FSSDC_FatFs_DiskInitialize+0x96>
1a0053fc:	10000005 	.word	0x10000005
1a005400:	1a00897c 	.word	0x1a00897c
1a005404:	1a0089a0 	.word	0x1a0089a0
1a005408:	1000000c 	.word	0x1000000c
1a00540c:	400c5000 	.word	0x400c5000
1a005410:	1a0089c8 	.word	0x1a0089c8
1a005414:	10003470 	.word	0x10003470
1a005418:	10000008 	.word	0x10000008
1a00541c:	1a008a28 	.word	0x1a008a28
1a005420:	1a0089f8 	.word	0x1a0089f8
1a005424:	10003471 	.word	0x10003471
1a005428:	1a008a60 	.word	0x1a008a60

1a00542c <FSSDC_FatFs_DiskRead>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/
DRESULT FSSDC_FatFs_DiskRead (BYTE *buff, DWORD sector, UINT count)
{   
1a00542c:	b538      	push	{r3, r4, r5, lr}
	if (g_diskStats & STA_NOINIT)
1a00542e:	4b1d      	ldr	r3, [pc, #116]	; (1a0054a4 <FSSDC_FatFs_DiskRead+0x78>)
1a005430:	781b      	ldrb	r3, [r3, #0]
1a005432:	f013 0f01 	tst.w	r3, #1
1a005436:	d121      	bne.n	1a00547c <FSSDC_FatFs_DiskRead+0x50>
1a005438:	4605      	mov	r5, r0
1a00543a:	4614      	mov	r4, r2
    {
        Board_UARTPutSTR ("FSSDC: [Read] Card not initialized.\r\n");
        return RES_NOTRDY;
    }

	if (!(CardType & CT_BLOCK)) 
1a00543c:	4b1a      	ldr	r3, [pc, #104]	; (1a0054a8 <FSSDC_FatFs_DiskRead+0x7c>)
1a00543e:	781b      	ldrb	r3, [r3, #0]
1a005440:	f013 0f08 	tst.w	r3, #8
1a005444:	d100      	bne.n	1a005448 <FSSDC_FatFs_DiskRead+0x1c>
    {
        sector *= 512;                      /* Convert to byte address if needed */
1a005446:	0249      	lsls	r1, r1, #9
    }

	if (count == 1) 
1a005448:	2c01      	cmp	r4, #1
1a00544a:	d01c      	beq.n	1a005486 <FSSDC_FatFs_DiskRead+0x5a>
			&& rcvr_datablock(buff, 512))
			count = 0;
	}
	else 
    {                                       /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) 
1a00544c:	2052      	movs	r0, #82	; 0x52
1a00544e:	f7ff fe6d 	bl	1a00512c <send_cmd>
1a005452:	b968      	cbnz	r0, 1a005470 <FSSDC_FatFs_DiskRead+0x44>
        {                                   /* READ_MULTIPLE_BLOCK */
			do 
            {
				if (!rcvr_datablock(buff, 512)) 
1a005454:	f44f 7100 	mov.w	r1, #512	; 0x200
1a005458:	4628      	mov	r0, r5
1a00545a:	f7ff fed7 	bl	1a00520c <rcvr_datablock>
1a00545e:	b118      	cbz	r0, 1a005468 <FSSDC_FatFs_DiskRead+0x3c>
                {
                    break;
                }
				buff += 512;
1a005460:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} 
            while (--count);
1a005464:	3c01      	subs	r4, #1
1a005466:	d1f5      	bne.n	1a005454 <FSSDC_FatFs_DiskRead+0x28>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
1a005468:	2100      	movs	r1, #0
1a00546a:	204c      	movs	r0, #76	; 0x4c
1a00546c:	f7ff fe5e 	bl	1a00512c <send_cmd>
		}
	}
	deselect();
1a005470:	f7ff fe3e 	bl	1a0050f0 <deselect>

	return count ? RES_ERROR : RES_OK;
1a005474:	1c20      	adds	r0, r4, #0
1a005476:	bf18      	it	ne
1a005478:	2001      	movne	r0, #1
}
1a00547a:	bd38      	pop	{r3, r4, r5, pc}
        Board_UARTPutSTR ("FSSDC: [Read] Card not initialized.\r\n");
1a00547c:	480b      	ldr	r0, [pc, #44]	; (1a0054ac <FSSDC_FatFs_DiskRead+0x80>)
1a00547e:	f000 fb57 	bl	1a005b30 <Board_UARTPutSTR>
        return RES_NOTRDY;
1a005482:	2003      	movs	r0, #3
1a005484:	e7f9      	b.n	1a00547a <FSSDC_FatFs_DiskRead+0x4e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
1a005486:	2051      	movs	r0, #81	; 0x51
1a005488:	f7ff fe50 	bl	1a00512c <send_cmd>
1a00548c:	2800      	cmp	r0, #0
1a00548e:	d1ef      	bne.n	1a005470 <FSSDC_FatFs_DiskRead+0x44>
			&& rcvr_datablock(buff, 512))
1a005490:	f44f 7100 	mov.w	r1, #512	; 0x200
1a005494:	4628      	mov	r0, r5
1a005496:	f7ff feb9 	bl	1a00520c <rcvr_datablock>
1a00549a:	2800      	cmp	r0, #0
1a00549c:	d0e8      	beq.n	1a005470 <FSSDC_FatFs_DiskRead+0x44>
			count = 0;
1a00549e:	2400      	movs	r4, #0
1a0054a0:	e7e6      	b.n	1a005470 <FSSDC_FatFs_DiskRead+0x44>
1a0054a2:	bf00      	nop
1a0054a4:	10000005 	.word	0x10000005
1a0054a8:	10003470 	.word	0x10003470
1a0054ac:	1a008ae8 	.word	0x1a008ae8

1a0054b0 <FSSDC_FatFs_DiskWrite>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
DRESULT FSSDC_FatFs_DiskWrite (const BYTE *buff, DWORD sector, UINT count)
{
1a0054b0:	b570      	push	{r4, r5, r6, lr}
	if (g_diskStats & STA_NOINIT)
1a0054b2:	4b28      	ldr	r3, [pc, #160]	; (1a005554 <FSSDC_FatFs_DiskWrite+0xa4>)
1a0054b4:	781b      	ldrb	r3, [r3, #0]
1a0054b6:	f013 0f01 	tst.w	r3, #1
1a0054ba:	d12b      	bne.n	1a005514 <FSSDC_FatFs_DiskWrite+0x64>
1a0054bc:	4605      	mov	r5, r0
1a0054be:	460e      	mov	r6, r1
1a0054c0:	4614      	mov	r4, r2
    {
        Board_UARTPutSTR ("FSSDC: [Write] Card not initialized.\r\n");
        return RES_NOTRDY;
    }
    
	if (g_diskStats & STA_PROTECT)
1a0054c2:	4b24      	ldr	r3, [pc, #144]	; (1a005554 <FSSDC_FatFs_DiskWrite+0xa4>)
1a0054c4:	781b      	ldrb	r3, [r3, #0]
1a0054c6:	f013 0f04 	tst.w	r3, #4
1a0054ca:	d128      	bne.n	1a00551e <FSSDC_FatFs_DiskWrite+0x6e>
    {
        Board_UARTPutSTR ("FSSDC: [Write] Card is write protected.\r\n");
        return RES_WRPRT;
    }

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
1a0054cc:	4b22      	ldr	r3, [pc, #136]	; (1a005558 <FSSDC_FatFs_DiskWrite+0xa8>)
1a0054ce:	781b      	ldrb	r3, [r3, #0]
1a0054d0:	f013 0f08 	tst.w	r3, #8
1a0054d4:	d100      	bne.n	1a0054d8 <FSSDC_FatFs_DiskWrite+0x28>
1a0054d6:	024e      	lsls	r6, r1, #9

	if (count == 1) 
1a0054d8:	2c01      	cmp	r4, #1
1a0054da:	d025      	beq.n	1a005528 <FSSDC_FatFs_DiskWrite+0x78>
			count = 0;
        }
	}
	else 
    {                                           /* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
1a0054dc:	f013 0f06 	tst.w	r3, #6
1a0054e0:	d130      	bne.n	1a005544 <FSSDC_FatFs_DiskWrite+0x94>
		if (send_cmd(CMD25, sector) == 0) 
1a0054e2:	4631      	mov	r1, r6
1a0054e4:	2059      	movs	r0, #89	; 0x59
1a0054e6:	f7ff fe21 	bl	1a00512c <send_cmd>
1a0054ea:	b968      	cbnz	r0, 1a005508 <FSSDC_FatFs_DiskWrite+0x58>
        {                                       /* WRITE_MULTIPLE_BLOCK */
			do 
            {
				if (!xmit_datablock(buff, 0xFC))
1a0054ec:	21fc      	movs	r1, #252	; 0xfc
1a0054ee:	4628      	mov	r0, r5
1a0054f0:	f7ff fe5e 	bl	1a0051b0 <xmit_datablock>
1a0054f4:	b118      	cbz	r0, 1a0054fe <FSSDC_FatFs_DiskWrite+0x4e>
                {
                    break;
                }
				buff += 512;
1a0054f6:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} 
            while (--count);
1a0054fa:	3c01      	subs	r4, #1
1a0054fc:	d1f6      	bne.n	1a0054ec <FSSDC_FatFs_DiskWrite+0x3c>
			if (!xmit_datablock(0, 0xFD))       /* STOP_TRAN token */
1a0054fe:	21fd      	movs	r1, #253	; 0xfd
1a005500:	2000      	movs	r0, #0
1a005502:	f7ff fe55 	bl	1a0051b0 <xmit_datablock>
1a005506:	b310      	cbz	r0, 1a00554e <FSSDC_FatFs_DiskWrite+0x9e>
            {
				count = 1;
            }
		}
	}
	deselect();
1a005508:	f7ff fdf2 	bl	1a0050f0 <deselect>

	return count ? RES_ERROR : RES_OK;
1a00550c:	1c20      	adds	r0, r4, #0
1a00550e:	bf18      	it	ne
1a005510:	2001      	movne	r0, #1
}
1a005512:	bd70      	pop	{r4, r5, r6, pc}
        Board_UARTPutSTR ("FSSDC: [Write] Card not initialized.\r\n");
1a005514:	4811      	ldr	r0, [pc, #68]	; (1a00555c <FSSDC_FatFs_DiskWrite+0xac>)
1a005516:	f000 fb0b 	bl	1a005b30 <Board_UARTPutSTR>
        return RES_NOTRDY;
1a00551a:	2003      	movs	r0, #3
1a00551c:	e7f9      	b.n	1a005512 <FSSDC_FatFs_DiskWrite+0x62>
        Board_UARTPutSTR ("FSSDC: [Write] Card is write protected.\r\n");
1a00551e:	4810      	ldr	r0, [pc, #64]	; (1a005560 <FSSDC_FatFs_DiskWrite+0xb0>)
1a005520:	f000 fb06 	bl	1a005b30 <Board_UARTPutSTR>
        return RES_WRPRT;
1a005524:	2002      	movs	r0, #2
1a005526:	e7f4      	b.n	1a005512 <FSSDC_FatFs_DiskWrite+0x62>
		if ((send_cmd(CMD24, sector) == 0)      /* WRITE_BLOCK */
1a005528:	4631      	mov	r1, r6
1a00552a:	2058      	movs	r0, #88	; 0x58
1a00552c:	f7ff fdfe 	bl	1a00512c <send_cmd>
1a005530:	2800      	cmp	r0, #0
1a005532:	d1e9      	bne.n	1a005508 <FSSDC_FatFs_DiskWrite+0x58>
                    && xmit_datablock(buff, 0xFE))
1a005534:	21fe      	movs	r1, #254	; 0xfe
1a005536:	4628      	mov	r0, r5
1a005538:	f7ff fe3a 	bl	1a0051b0 <xmit_datablock>
1a00553c:	2800      	cmp	r0, #0
1a00553e:	d0e3      	beq.n	1a005508 <FSSDC_FatFs_DiskWrite+0x58>
			count = 0;
1a005540:	2400      	movs	r4, #0
1a005542:	e7e1      	b.n	1a005508 <FSSDC_FatFs_DiskWrite+0x58>
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
1a005544:	4621      	mov	r1, r4
1a005546:	20d7      	movs	r0, #215	; 0xd7
1a005548:	f7ff fdf0 	bl	1a00512c <send_cmd>
1a00554c:	e7c9      	b.n	1a0054e2 <FSSDC_FatFs_DiskWrite+0x32>
				count = 1;
1a00554e:	2401      	movs	r4, #1
1a005550:	e7da      	b.n	1a005508 <FSSDC_FatFs_DiskWrite+0x58>
1a005552:	bf00      	nop
1a005554:	10000005 	.word	0x10000005
1a005558:	10003470 	.word	0x10003470
1a00555c:	1a008b10 	.word	0x1a008b10
1a005560:	1a008b38 	.word	0x1a008b38

1a005564 <FSSDC_FatFs_DiskIoCtl>:

/*-----------------------------------------------------------------------*/
/* Miscellaneous Functions                                               */
/*-----------------------------------------------------------------------*/
DRESULT FSSDC_FatFs_DiskIoCtl (BYTE cmd, void *buff)
{
1a005564:	b570      	push	{r4, r5, r6, lr}
1a005566:	b084      	sub	sp, #16
1a005568:	460d      	mov	r5, r1
	BYTE n, csd[16], *ptr = buff;
	WORD csize;

	res = RES_ERROR;

	if (cmd == CTRL_POWER)
1a00556a:	2805      	cmp	r0, #5
1a00556c:	d018      	beq.n	1a0055a0 <FSSDC_FatFs_DiskIoCtl+0x3c>
			res = RES_PARERR;
		}
	}
	else 
    {
		if (g_diskStats & STA_NOINIT)
1a00556e:	4bb3      	ldr	r3, [pc, #716]	; (1a00583c <FSSDC_FatFs_DiskIoCtl+0x2d8>)
1a005570:	781b      	ldrb	r3, [r3, #0]
1a005572:	f013 0f01 	tst.w	r3, #1
1a005576:	d11f      	bne.n	1a0055b8 <FSSDC_FatFs_DiskIoCtl+0x54>
        {
            Board_UARTPutSTR ("FSSDC: [IOCtl] Card not initialized.\r\n");
            return RES_NOTRDY;
        }

		switch (cmd) {
1a005578:	280e      	cmp	r0, #14
1a00557a:	f200 814a 	bhi.w	1a005812 <FSSDC_FatFs_DiskIoCtl+0x2ae>
1a00557e:	e8df f010 	tbh	[pc, r0, lsl #1]
1a005582:	0020      	.short	0x0020
1a005584:	006f002d 	.word	0x006f002d
1a005588:	01480076 	.word	0x01480076
1a00558c:	01480148 	.word	0x01480148
1a005590:	01480148 	.word	0x01480148
1a005594:	00d30148 	.word	0x00d30148
1a005598:	00ea00da 	.word	0x00ea00da
1a00559c:	010c00f8 	.word	0x010c00f8
		switch (*ptr) {
1a0055a0:	780b      	ldrb	r3, [r1, #0]
1a0055a2:	2b01      	cmp	r3, #1
1a0055a4:	f240 8148 	bls.w	1a005838 <FSSDC_FatFs_DiskIoCtl+0x2d4>
1a0055a8:	2b02      	cmp	r3, #2
1a0055aa:	f040 813e 	bne.w	1a00582a <FSSDC_FatFs_DiskIoCtl+0x2c6>
			*(ptr+1) = (BYTE)chk_power();
1a0055ae:	f7ff fd4d 	bl	1a00504c <chk_power>
1a0055b2:	7068      	strb	r0, [r5, #1]
			res = RES_OK;
1a0055b4:	2400      	movs	r4, #0
1a0055b6:	e13c      	b.n	1a005832 <FSSDC_FatFs_DiskIoCtl+0x2ce>
            Board_UARTPutSTR ("FSSDC: [IOCtl] Card not initialized.\r\n");
1a0055b8:	48a1      	ldr	r0, [pc, #644]	; (1a005840 <FSSDC_FatFs_DiskIoCtl+0x2dc>)
1a0055ba:	f000 fab9 	bl	1a005b30 <Board_UARTPutSTR>
            return RES_NOTRDY;
1a0055be:	2403      	movs	r4, #3
1a0055c0:	e137      	b.n	1a005832 <FSSDC_FatFs_DiskIoCtl+0x2ce>
		case CTRL_SYNC :                    /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select_()) 
1a0055c2:	f7ff fda1 	bl	1a005108 <select_>
1a0055c6:	b918      	cbnz	r0, 1a0055d0 <FSSDC_FatFs_DiskIoCtl+0x6c>

		default:
			res = RES_PARERR;
		}

		deselect();
1a0055c8:	f7ff fd92 	bl	1a0050f0 <deselect>
	res = RES_ERROR;
1a0055cc:	2401      	movs	r4, #1
1a0055ce:	e12d      	b.n	1a00582c <FSSDC_FatFs_DiskIoCtl+0x2c8>
				deselect();
1a0055d0:	f7ff fd8e 	bl	1a0050f0 <deselect>
		deselect();
1a0055d4:	f7ff fd8c 	bl	1a0050f0 <deselect>
				res = RES_OK;
1a0055d8:	2400      	movs	r4, #0
1a0055da:	e12a      	b.n	1a005832 <FSSDC_FatFs_DiskIoCtl+0x2ce>
			if ((send_cmd(CMD9, 0) == 0) 
1a0055dc:	2100      	movs	r1, #0
1a0055de:	2049      	movs	r0, #73	; 0x49
1a0055e0:	f7ff fda4 	bl	1a00512c <send_cmd>
1a0055e4:	2800      	cmp	r0, #0
1a0055e6:	f040 8110 	bne.w	1a00580a <FSSDC_FatFs_DiskIoCtl+0x2a6>
                    && rcvr_datablock(csd, 16))
1a0055ea:	2110      	movs	r1, #16
1a0055ec:	4668      	mov	r0, sp
1a0055ee:	f7ff fe0d 	bl	1a00520c <rcvr_datablock>
1a0055f2:	2800      	cmp	r0, #0
1a0055f4:	f000 8115 	beq.w	1a005822 <FSSDC_FatFs_DiskIoCtl+0x2be>
				if ((csd[0] >> 6) == 1) 
1a0055f8:	f89d 3000 	ldrb.w	r3, [sp]
1a0055fc:	099b      	lsrs	r3, r3, #6
1a0055fe:	2b01      	cmp	r3, #1
1a005600:	d022      	beq.n	1a005648 <FSSDC_FatFs_DiskIoCtl+0xe4>
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
1a005602:	f89d 2005 	ldrb.w	r2, [sp, #5]
1a005606:	f002 020f 	and.w	r2, r2, #15
1a00560a:	f89d 300a 	ldrb.w	r3, [sp, #10]
1a00560e:	eb02 12d3 	add.w	r2, r2, r3, lsr #7
1a005612:	f89d 3009 	ldrb.w	r3, [sp, #9]
1a005616:	005b      	lsls	r3, r3, #1
1a005618:	f003 0306 	and.w	r3, r3, #6
1a00561c:	441a      	add	r2, r3
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
1a00561e:	f89d 3008 	ldrb.w	r3, [sp, #8]
1a005622:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a005626:	099b      	lsrs	r3, r3, #6
1a005628:	eb03 0381 	add.w	r3, r3, r1, lsl #2
1a00562c:	f89d 1006 	ldrb.w	r1, [sp, #6]
1a005630:	0289      	lsls	r1, r1, #10
1a005632:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
1a005636:	440b      	add	r3, r1
1a005638:	3301      	adds	r3, #1
					*(DWORD*)buff = (DWORD)csize << (n - 9);
1a00563a:	3a07      	subs	r2, #7
1a00563c:	4093      	lsls	r3, r2
1a00563e:	602b      	str	r3, [r5, #0]
		deselect();
1a005640:	f7ff fd56 	bl	1a0050f0 <deselect>
				res = RES_OK;
1a005644:	2400      	movs	r4, #0
1a005646:	e0f4      	b.n	1a005832 <FSSDC_FatFs_DiskIoCtl+0x2ce>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
1a005648:	f89d 3009 	ldrb.w	r3, [sp, #9]
1a00564c:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a005650:	eb03 2302 	add.w	r3, r3, r2, lsl #8
1a005654:	b29b      	uxth	r3, r3
1a005656:	3301      	adds	r3, #1
1a005658:	b29b      	uxth	r3, r3
					*(DWORD*)buff = (DWORD)csize << 10;
1a00565a:	029b      	lsls	r3, r3, #10
1a00565c:	602b      	str	r3, [r5, #0]
1a00565e:	e7ef      	b.n	1a005640 <FSSDC_FatFs_DiskIoCtl+0xdc>
			*(WORD*)buff = 512;
1a005660:	f44f 7300 	mov.w	r3, #512	; 0x200
1a005664:	800b      	strh	r3, [r1, #0]
		deselect();
1a005666:	f7ff fd43 	bl	1a0050f0 <deselect>
			res = RES_OK;
1a00566a:	2400      	movs	r4, #0
1a00566c:	e0e1      	b.n	1a005832 <FSSDC_FatFs_DiskIoCtl+0x2ce>
			if (CardType & CT_SD2) {                            /* SDC ver 2.00 */
1a00566e:	4b75      	ldr	r3, [pc, #468]	; (1a005844 <FSSDC_FatFs_DiskIoCtl+0x2e0>)
1a005670:	781b      	ldrb	r3, [r3, #0]
1a005672:	f013 0f04 	tst.w	r3, #4
1a005676:	d020      	beq.n	1a0056ba <FSSDC_FatFs_DiskIoCtl+0x156>
				if (send_cmd(ACMD13, 0) == 0)                   /* Read SD status */
1a005678:	2100      	movs	r1, #0
1a00567a:	20cd      	movs	r0, #205	; 0xcd
1a00567c:	f7ff fd56 	bl	1a00512c <send_cmd>
1a005680:	2800      	cmp	r0, #0
1a005682:	f040 80ba 	bne.w	1a0057fa <FSSDC_FatFs_DiskIoCtl+0x296>
					rcvr_spi();
1a005686:	f7ff fd13 	bl	1a0050b0 <rcvr_spi>
					if (rcvr_datablock(csd, 16))                /* Read partial block */
1a00568a:	2110      	movs	r1, #16
1a00568c:	4668      	mov	r0, sp
1a00568e:	f7ff fdbd 	bl	1a00520c <rcvr_datablock>
1a005692:	2800      	cmp	r0, #0
1a005694:	f000 80b5 	beq.w	1a005802 <FSSDC_FatFs_DiskIoCtl+0x29e>
						for (n = 64 - 16; n; n--) 
1a005698:	2430      	movs	r4, #48	; 0x30
1a00569a:	e003      	b.n	1a0056a4 <FSSDC_FatFs_DiskIoCtl+0x140>
                            rcvr_spi();                         /* Purge trailing data */
1a00569c:	f7ff fd08 	bl	1a0050b0 <rcvr_spi>
						for (n = 64 - 16; n; n--) 
1a0056a0:	3c01      	subs	r4, #1
1a0056a2:	b2e4      	uxtb	r4, r4
1a0056a4:	2c00      	cmp	r4, #0
1a0056a6:	d1f9      	bne.n	1a00569c <FSSDC_FatFs_DiskIoCtl+0x138>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
1a0056a8:	f89d 300a 	ldrb.w	r3, [sp, #10]
1a0056ac:	091a      	lsrs	r2, r3, #4
1a0056ae:	2310      	movs	r3, #16
1a0056b0:	4093      	lsls	r3, r2
1a0056b2:	602b      	str	r3, [r5, #0]
		deselect();
1a0056b4:	f7ff fd1c 	bl	1a0050f0 <deselect>
1a0056b8:	e0bb      	b.n	1a005832 <FSSDC_FatFs_DiskIoCtl+0x2ce>
				if ((send_cmd(CMD9, 0) == 0) 
1a0056ba:	2100      	movs	r1, #0
1a0056bc:	2049      	movs	r0, #73	; 0x49
1a0056be:	f7ff fd35 	bl	1a00512c <send_cmd>
1a0056c2:	2800      	cmp	r0, #0
1a0056c4:	f040 80a9 	bne.w	1a00581a <FSSDC_FatFs_DiskIoCtl+0x2b6>
                        && rcvr_datablock(csd, 16)) 
1a0056c8:	2110      	movs	r1, #16
1a0056ca:	4668      	mov	r0, sp
1a0056cc:	f7ff fd9e 	bl	1a00520c <rcvr_datablock>
1a0056d0:	2800      	cmp	r0, #0
1a0056d2:	f000 808e 	beq.w	1a0057f2 <FSSDC_FatFs_DiskIoCtl+0x28e>
					if (CardType & CT_SD1)
1a0056d6:	4b5b      	ldr	r3, [pc, #364]	; (1a005844 <FSSDC_FatFs_DiskIoCtl+0x2e0>)
1a0056d8:	781b      	ldrb	r3, [r3, #0]
1a0056da:	f013 0f02 	tst.w	r3, #2
1a0056de:	d013      	beq.n	1a005708 <FSSDC_FatFs_DiskIoCtl+0x1a4>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
1a0056e0:	f89d 300a 	ldrb.w	r3, [sp, #10]
1a0056e4:	005b      	lsls	r3, r3, #1
1a0056e6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
1a0056ea:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a0056ee:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
1a0056f2:	3301      	adds	r3, #1
1a0056f4:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0056f8:	0992      	lsrs	r2, r2, #6
1a0056fa:	3a01      	subs	r2, #1
1a0056fc:	4093      	lsls	r3, r2
1a0056fe:	602b      	str	r3, [r5, #0]
		deselect();
1a005700:	f7ff fcf6 	bl	1a0050f0 <deselect>
					res = RES_OK;
1a005704:	2400      	movs	r4, #0
1a005706:	e094      	b.n	1a005832 <FSSDC_FatFs_DiskIoCtl+0x2ce>
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
1a005708:	f89d 300a 	ldrb.w	r3, [sp, #10]
1a00570c:	f3c3 0284 	ubfx	r2, r3, #2, #5
1a005710:	f89d 100b 	ldrb.w	r1, [sp, #11]
1a005714:	00cb      	lsls	r3, r1, #3
1a005716:	f003 0318 	and.w	r3, r3, #24
1a00571a:	eb03 1351 	add.w	r3, r3, r1, lsr #5
1a00571e:	3301      	adds	r3, #1
1a005720:	fb02 3303 	mla	r3, r2, r3, r3
1a005724:	602b      	str	r3, [r5, #0]
1a005726:	e7eb      	b.n	1a005700 <FSSDC_FatFs_DiskIoCtl+0x19c>
			*ptr = CardType;
1a005728:	4b46      	ldr	r3, [pc, #280]	; (1a005844 <FSSDC_FatFs_DiskIoCtl+0x2e0>)
1a00572a:	781b      	ldrb	r3, [r3, #0]
1a00572c:	700b      	strb	r3, [r1, #0]
		deselect();
1a00572e:	f7ff fcdf 	bl	1a0050f0 <deselect>
			res = RES_OK;
1a005732:	2400      	movs	r4, #0
1a005734:	e07d      	b.n	1a005832 <FSSDC_FatFs_DiskIoCtl+0x2ce>
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
1a005736:	2100      	movs	r1, #0
1a005738:	2049      	movs	r0, #73	; 0x49
1a00573a:	f7ff fcf7 	bl	1a00512c <send_cmd>
1a00573e:	2800      	cmp	r0, #0
1a005740:	d153      	bne.n	1a0057ea <FSSDC_FatFs_DiskIoCtl+0x286>
                    && rcvr_datablock(ptr, 16))
1a005742:	2110      	movs	r1, #16
1a005744:	4628      	mov	r0, r5
1a005746:	f7ff fd61 	bl	1a00520c <rcvr_datablock>
1a00574a:	2800      	cmp	r0, #0
1a00574c:	d149      	bne.n	1a0057e2 <FSSDC_FatFs_DiskIoCtl+0x27e>
		deselect();
1a00574e:	f7ff fccf 	bl	1a0050f0 <deselect>
	res = RES_ERROR;
1a005752:	2401      	movs	r4, #1
1a005754:	e06a      	b.n	1a00582c <FSSDC_FatFs_DiskIoCtl+0x2c8>
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
1a005756:	2100      	movs	r1, #0
1a005758:	204a      	movs	r0, #74	; 0x4a
1a00575a:	f7ff fce7 	bl	1a00512c <send_cmd>
1a00575e:	bbe0      	cbnz	r0, 1a0057da <FSSDC_FatFs_DiskIoCtl+0x276>
                    && rcvr_datablock(ptr, 16))
1a005760:	2110      	movs	r1, #16
1a005762:	4628      	mov	r0, r5
1a005764:	f7ff fd52 	bl	1a00520c <rcvr_datablock>
1a005768:	bb98      	cbnz	r0, 1a0057d2 <FSSDC_FatFs_DiskIoCtl+0x26e>
		deselect();
1a00576a:	f7ff fcc1 	bl	1a0050f0 <deselect>
	res = RES_ERROR;
1a00576e:	2401      	movs	r4, #1
1a005770:	e05c      	b.n	1a00582c <FSSDC_FatFs_DiskIoCtl+0x2c8>
			if (send_cmd(CMD58, 0) == 0) 
1a005772:	2100      	movs	r1, #0
1a005774:	207a      	movs	r0, #122	; 0x7a
1a005776:	f7ff fcd9 	bl	1a00512c <send_cmd>
1a00577a:	bb30      	cbnz	r0, 1a0057ca <FSSDC_FatFs_DiskIoCtl+0x266>
				for (n = 4; n; n--) 
1a00577c:	2404      	movs	r4, #4
1a00577e:	e006      	b.n	1a00578e <FSSDC_FatFs_DiskIoCtl+0x22a>
                    *ptr++ = rcvr_spi();
1a005780:	1c6e      	adds	r6, r5, #1
1a005782:	f7ff fc95 	bl	1a0050b0 <rcvr_spi>
1a005786:	7028      	strb	r0, [r5, #0]
				for (n = 4; n; n--) 
1a005788:	3c01      	subs	r4, #1
1a00578a:	b2e4      	uxtb	r4, r4
                    *ptr++ = rcvr_spi();
1a00578c:	4635      	mov	r5, r6
				for (n = 4; n; n--) 
1a00578e:	2c00      	cmp	r4, #0
1a005790:	d1f6      	bne.n	1a005780 <FSSDC_FatFs_DiskIoCtl+0x21c>
		deselect();
1a005792:	f7ff fcad 	bl	1a0050f0 <deselect>
				res = RES_OK;
1a005796:	2400      	movs	r4, #0
1a005798:	e04b      	b.n	1a005832 <FSSDC_FatFs_DiskIoCtl+0x2ce>
			if (send_cmd(ACMD13, 0) == 0) 
1a00579a:	2100      	movs	r1, #0
1a00579c:	20cd      	movs	r0, #205	; 0xcd
1a00579e:	f7ff fcc5 	bl	1a00512c <send_cmd>
1a0057a2:	b970      	cbnz	r0, 1a0057c2 <FSSDC_FatFs_DiskIoCtl+0x25e>
				rcvr_spi();
1a0057a4:	f7ff fc84 	bl	1a0050b0 <rcvr_spi>
				if (rcvr_datablock(ptr, 64))
1a0057a8:	2140      	movs	r1, #64	; 0x40
1a0057aa:	4628      	mov	r0, r5
1a0057ac:	f7ff fd2e 	bl	1a00520c <rcvr_datablock>
1a0057b0:	b918      	cbnz	r0, 1a0057ba <FSSDC_FatFs_DiskIoCtl+0x256>
		deselect();
1a0057b2:	f7ff fc9d 	bl	1a0050f0 <deselect>
	res = RES_ERROR;
1a0057b6:	2401      	movs	r4, #1
1a0057b8:	e038      	b.n	1a00582c <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a0057ba:	f7ff fc99 	bl	1a0050f0 <deselect>
					res = RES_OK;
1a0057be:	2400      	movs	r4, #0
1a0057c0:	e037      	b.n	1a005832 <FSSDC_FatFs_DiskIoCtl+0x2ce>
		deselect();
1a0057c2:	f7ff fc95 	bl	1a0050f0 <deselect>
	res = RES_ERROR;
1a0057c6:	2401      	movs	r4, #1
1a0057c8:	e030      	b.n	1a00582c <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a0057ca:	f7ff fc91 	bl	1a0050f0 <deselect>
	res = RES_ERROR;
1a0057ce:	2401      	movs	r4, #1
1a0057d0:	e02c      	b.n	1a00582c <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a0057d2:	f7ff fc8d 	bl	1a0050f0 <deselect>
				res = RES_OK;
1a0057d6:	2400      	movs	r4, #0
1a0057d8:	e02b      	b.n	1a005832 <FSSDC_FatFs_DiskIoCtl+0x2ce>
		deselect();
1a0057da:	f7ff fc89 	bl	1a0050f0 <deselect>
	res = RES_ERROR;
1a0057de:	2401      	movs	r4, #1
1a0057e0:	e024      	b.n	1a00582c <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a0057e2:	f7ff fc85 	bl	1a0050f0 <deselect>
				res = RES_OK;
1a0057e6:	2400      	movs	r4, #0
1a0057e8:	e023      	b.n	1a005832 <FSSDC_FatFs_DiskIoCtl+0x2ce>
		deselect();
1a0057ea:	f7ff fc81 	bl	1a0050f0 <deselect>
	res = RES_ERROR;
1a0057ee:	2401      	movs	r4, #1
1a0057f0:	e01c      	b.n	1a00582c <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a0057f2:	f7ff fc7d 	bl	1a0050f0 <deselect>
	res = RES_ERROR;
1a0057f6:	2401      	movs	r4, #1
1a0057f8:	e018      	b.n	1a00582c <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a0057fa:	f7ff fc79 	bl	1a0050f0 <deselect>
	res = RES_ERROR;
1a0057fe:	2401      	movs	r4, #1
1a005800:	e014      	b.n	1a00582c <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a005802:	f7ff fc75 	bl	1a0050f0 <deselect>
	res = RES_ERROR;
1a005806:	2401      	movs	r4, #1
1a005808:	e010      	b.n	1a00582c <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a00580a:	f7ff fc71 	bl	1a0050f0 <deselect>
	res = RES_ERROR;
1a00580e:	2401      	movs	r4, #1
1a005810:	e00c      	b.n	1a00582c <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a005812:	f7ff fc6d 	bl	1a0050f0 <deselect>
			res = RES_PARERR;
1a005816:	2404      	movs	r4, #4
1a005818:	e008      	b.n	1a00582c <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a00581a:	f7ff fc69 	bl	1a0050f0 <deselect>
	res = RES_ERROR;
1a00581e:	2401      	movs	r4, #1
1a005820:	e004      	b.n	1a00582c <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a005822:	f7ff fc65 	bl	1a0050f0 <deselect>
	res = RES_ERROR;
1a005826:	2401      	movs	r4, #1
1a005828:	e000      	b.n	1a00582c <FSSDC_FatFs_DiskIoCtl+0x2c8>
			res = RES_PARERR;
1a00582a:	2404      	movs	r4, #4
	}
    
    if (res != RES_OK)
    {
        Board_UARTPutSTR ("FSSDC: [IOCtl] Returning Error.\r\n");        
1a00582c:	4806      	ldr	r0, [pc, #24]	; (1a005848 <FSSDC_FatFs_DiskIoCtl+0x2e4>)
1a00582e:	f000 f97f 	bl	1a005b30 <Board_UARTPutSTR>
    }

	return res;
}
1a005832:	4620      	mov	r0, r4
1a005834:	b004      	add	sp, #16
1a005836:	bd70      	pop	{r4, r5, r6, pc}
			res = RES_OK;
1a005838:	2400      	movs	r4, #0
1a00583a:	e7fa      	b.n	1a005832 <FSSDC_FatFs_DiskIoCtl+0x2ce>
1a00583c:	10000005 	.word	0x10000005
1a005840:	1a008a9c 	.word	0x1a008a9c
1a005844:	10003470 	.word	0x10003470
1a005848:	1a008ac4 	.word	0x1a008ac4

1a00584c <FSSDC_InitSPI>:
    WARNING: for card connectors without presence detection
    >>>> Only call this function when the card is inserted!
--------------------------------------------------------------------------------
*/
void FSSDC_InitSPI ()
{
1a00584c:	b510      	push	{r4, lr}
        seems to work at mode 0 at the SPI mode. Thus the SPI mode 0 (CPHA=0, CPOL=0)
        is the proper setting to control MMC/SDC
        
        http://elm-chan.org/docs/mmc/mmc_e.html#spimode
    */
    Chip_SSP_Init       (LPC_SSP1);
1a00584e:	4c13      	ldr	r4, [pc, #76]	; (1a00589c <FSSDC_InitSPI+0x50>)
1a005850:	4620      	mov	r0, r4
1a005852:	f001 f83d 	bl	1a0068d0 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a005856:	6863      	ldr	r3, [r4, #4]
1a005858:	f023 0304 	bic.w	r3, r3, #4
1a00585c:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00585e:	6823      	ldr	r3, [r4, #0]
1a005860:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a005864:	f043 0307 	orr.w	r3, r3, #7
1a005868:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode   (LPC_SSP1, SSP_MODE_MASTER);
    Chip_SSP_SetFormat  (LPC_SSP1, SSP_BITS_8, SSP_FRAMEFORMAT_SPI,
                         SSP_CLOCK_CPHA0_CPOL0);
    FCLK_SLOW           ();
1a00586a:	4b0d      	ldr	r3, [pc, #52]	; (1a0058a0 <FSSDC_InitSPI+0x54>)
1a00586c:	6819      	ldr	r1, [r3, #0]
1a00586e:	4620      	mov	r0, r4
1a005870:	f001 f80e 	bl	1a006890 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a005874:	6863      	ldr	r3, [r4, #4]
1a005876:	f043 0302 	orr.w	r3, r3, #2
1a00587a:	6063      	str	r3, [r4, #4]
    Chip_SSP_Enable     (LPC_SSP1);
    
    // PLEASE NOTE: muxing and direction of CS signal on FSSDC_CS_{PIN/PORT}
    //              must be configured beforehand!
    deselect ();    
1a00587c:	f7ff fc38 	bl	1a0050f0 <deselect>
    
#ifndef FSSDC_SUPPORTS_HOT_INSERTION
    g_diskStats &= ~STA_NODISK;
1a005880:	4a08      	ldr	r2, [pc, #32]	; (1a0058a4 <FSSDC_InitSPI+0x58>)
1a005882:	7813      	ldrb	r3, [r2, #0]
1a005884:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
1a005888:	7013      	strb	r3, [r2, #0]
    Board_UARTPutSTR ("FSSDC: [InitSPI] New card status: Inserted.\r\n");
1a00588a:	4807      	ldr	r0, [pc, #28]	; (1a0058a8 <FSSDC_InitSPI+0x5c>)
1a00588c:	f000 f950 	bl	1a005b30 <Board_UARTPutSTR>
    newCardStatus (FSSDC_CardStatus_Inserted);
1a005890:	2002      	movs	r0, #2
1a005892:	f7ff fbcf 	bl	1a005034 <newCardStatus>
    FSSDC_FatFs_DiskInitialize ();
1a005896:	f7ff fcef 	bl	1a005278 <FSSDC_FatFs_DiskInitialize>
#endif
}
1a00589a:	bd10      	pop	{r4, pc}
1a00589c:	400c5000 	.word	0x400c5000
1a0058a0:	1000000c 	.word	0x1000000c
1a0058a4:	10000005 	.word	0x10000005
1a0058a8:	1a008b64 	.word	0x1a008b64

1a0058ac <FSSDC_Update>:
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */
void FSSDC_Update ()
{   
    if (Timer1)             /* 100Hz decrement timer */
1a0058ac:	4b08      	ldr	r3, [pc, #32]	; (1a0058d0 <FSSDC_Update+0x24>)
1a0058ae:	781b      	ldrb	r3, [r3, #0]
1a0058b0:	b123      	cbz	r3, 1a0058bc <FSSDC_Update+0x10>
    {
        -- Timer1;
1a0058b2:	4a07      	ldr	r2, [pc, #28]	; (1a0058d0 <FSSDC_Update+0x24>)
1a0058b4:	7813      	ldrb	r3, [r2, #0]
1a0058b6:	3b01      	subs	r3, #1
1a0058b8:	b2db      	uxtb	r3, r3
1a0058ba:	7013      	strb	r3, [r2, #0]
    }
    
    if (Timer2)
1a0058bc:	4b05      	ldr	r3, [pc, #20]	; (1a0058d4 <FSSDC_Update+0x28>)
1a0058be:	781b      	ldrb	r3, [r3, #0]
1a0058c0:	b123      	cbz	r3, 1a0058cc <FSSDC_Update+0x20>
    {
        -- Timer2;
1a0058c2:	4a04      	ldr	r2, [pc, #16]	; (1a0058d4 <FSSDC_Update+0x28>)
1a0058c4:	7813      	ldrb	r3, [r2, #0]
1a0058c6:	3b01      	subs	r3, #1
1a0058c8:	b2db      	uxtb	r3, r3
1a0058ca:	7013      	strb	r3, [r2, #0]
			s &= ~STA_NODISK;

		g_diskStats = s;
	}
    #endif
}
1a0058cc:	4770      	bx	lr
1a0058ce:	bf00      	nop
1a0058d0:	10003471 	.word	0x10003471
1a0058d4:	10003472 	.word	0x10003472

1a0058d8 <get_fattime>:


// Definitions required by FatFs according to ffconf.h
#if !FF_FS_READONLY && !FF_FS_NORTC
DWORD get_fattime (void)
{
1a0058d8:	b500      	push	{lr}
1a0058da:	b089      	sub	sp, #36	; 0x24
	/* Get local time */
    RTC_TIME_T rtcTime;
	Chip_RTC_GetFullTime (LPC_RTC, &rtcTime);
1a0058dc:	4669      	mov	r1, sp
1a0058de:	480c      	ldr	r0, [pc, #48]	; (1a005910 <get_fattime+0x38>)
1a0058e0:	f000 fdf6 	bl	1a0064d0 <Chip_RTC_GetFullTime>

	/* Pack date and time into a DWORD variable */
	return (  (DWORD) (rtcTime.time[RTC_TIMETYPE_YEAR] - 1980)  << 25)
1a0058e4:	9b07      	ldr	r3, [sp, #28]
1a0058e6:	f2a3 70bc 	subw	r0, r3, #1980	; 0x7bc
		   | ((DWORD)  rtcTime.time[RTC_TIMETYPE_MONTH]         << 21)
1a0058ea:	9b06      	ldr	r3, [sp, #24]
1a0058ec:	055b      	lsls	r3, r3, #21
1a0058ee:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
		   | ((DWORD)  rtcTime.time[RTC_TIMETYPE_DAYOFMONTH]    << 16)
1a0058f2:	9803      	ldr	r0, [sp, #12]
1a0058f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
		   | ((DWORD)  rtcTime.time[RTC_TIMETYPE_HOUR]          << 11)
1a0058f8:	9802      	ldr	r0, [sp, #8]
1a0058fa:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
		   | ((DWORD)  rtcTime.time[RTC_TIMETYPE_MINUTE]        << 5)
1a0058fe:	9801      	ldr	r0, [sp, #4]
1a005900:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
		   | ((DWORD)  rtcTime.time[RTC_TIMETYPE_SECOND]        >> 1);
}
1a005904:	9800      	ldr	r0, [sp, #0]
1a005906:	ea43 0050 	orr.w	r0, r3, r0, lsr #1
1a00590a:	b009      	add	sp, #36	; 0x24
1a00590c:	f85d fb04 	ldr.w	pc, [sp], #4
1a005910:	40046000 	.word	0x40046000

1a005914 <disk_timerproc>:
};
#endif

// Must be called once every 10 ms ideally from PendSV, not SysTickHandler!
void disk_timerproc (void)
{
1a005914:	b508      	push	{r3, lr}
    FSSDC_Update ();
1a005916:	f7ff ffc9 	bl	1a0058ac <FSSDC_Update>
    #ifdef LPCUSBLIB_HOST_MASS_STORAGE
    FSUSB_Update ();
    #endif
}
1a00591a:	bd08      	pop	{r3, pc}

1a00591c <disk_status>:

DSTATUS disk_status (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{    
    switch (pdrv)
1a00591c:	b108      	cbz	r0, 1a005922 <disk_status+0x6>
            #else
            break;
            #endif
    }

    return STA_NOINIT;
1a00591e:	2001      	movs	r0, #1
}
1a005920:	4770      	bx	lr
{    
1a005922:	b508      	push	{r3, lr}
            return FSSDC_FatFs_DiskStatus ();
1a005924:	f7ff fca2 	bl	1a00526c <FSSDC_FatFs_DiskStatus>
}
1a005928:	bd08      	pop	{r3, pc}

1a00592a <disk_initialize>:

DSTATUS disk_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv)
1a00592a:	b108      	cbz	r0, 1a005930 <disk_initialize+0x6>
            #else
            break;
            #endif
    }
    
    return STA_NOINIT;
1a00592c:	2001      	movs	r0, #1
}
1a00592e:	4770      	bx	lr
{
1a005930:	b508      	push	{r3, lr}
            return FSSDC_FatFs_DiskInitialize ();
1a005932:	f7ff fca1 	bl	1a005278 <FSSDC_FatFs_DiskInitialize>
}
1a005936:	bd08      	pop	{r3, pc}

1a005938 <disk_read>:
	BYTE *buff,         /* Data buffer to store read data */
	DWORD sector,       /* Start sector in LBA */
	UINT count          /* Number of sectors to read */
)
{
	if (!buff || !count) 
1a005938:	b141      	cbz	r1, 1a00594c <disk_read+0x14>
{
1a00593a:	b510      	push	{r4, lr}
	if (!buff || !count) 
1a00593c:	b143      	cbz	r3, 1a005950 <disk_read+0x18>
    {
		return RES_PARERR;
	}
    
    switch (pdrv)
1a00593e:	b948      	cbnz	r0, 1a005954 <disk_read+0x1c>
1a005940:	4608      	mov	r0, r1
1a005942:	4611      	mov	r1, r2
    {
        case FATFS_DISK_DRIVE_FSSDC:
            return FSSDC_FatFs_DiskRead (buff, sector, count);
1a005944:	461a      	mov	r2, r3
1a005946:	f7ff fd71 	bl	1a00542c <FSSDC_FatFs_DiskRead>
            break;
            #endif
    }
    
    return RES_PARERR;
}
1a00594a:	bd10      	pop	{r4, pc}
		return RES_PARERR;
1a00594c:	2004      	movs	r0, #4
}
1a00594e:	4770      	bx	lr
		return RES_PARERR;
1a005950:	2004      	movs	r0, #4
1a005952:	e7fa      	b.n	1a00594a <disk_read+0x12>
    return RES_PARERR;
1a005954:	2004      	movs	r0, #4
1a005956:	e7f8      	b.n	1a00594a <disk_read+0x12>

1a005958 <disk_write>:
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
	if (!buff || !count)
1a005958:	b141      	cbz	r1, 1a00596c <disk_write+0x14>
{
1a00595a:	b510      	push	{r4, lr}
	if (!buff || !count)
1a00595c:	b143      	cbz	r3, 1a005970 <disk_write+0x18>
    {
		return RES_PARERR;
	}
    
    switch (pdrv)
1a00595e:	b948      	cbnz	r0, 1a005974 <disk_write+0x1c>
1a005960:	4608      	mov	r0, r1
1a005962:	4611      	mov	r1, r2
    {
        case FATFS_DISK_DRIVE_FSSDC:
            return FSSDC_FatFs_DiskWrite (buff, sector, count);
1a005964:	461a      	mov	r2, r3
1a005966:	f7ff fda3 	bl	1a0054b0 <FSSDC_FatFs_DiskWrite>
            break;
            #endif
    }
    
	return RES_PARERR;
}
1a00596a:	bd10      	pop	{r4, pc}
		return RES_PARERR;
1a00596c:	2004      	movs	r0, #4
}
1a00596e:	4770      	bx	lr
		return RES_PARERR;
1a005970:	2004      	movs	r0, #4
1a005972:	e7fa      	b.n	1a00596a <disk_write+0x12>
	return RES_PARERR;
1a005974:	2004      	movs	r0, #4
1a005976:	e7f8      	b.n	1a00596a <disk_write+0x12>

1a005978 <disk_ioctl>:
	BYTE pdrv,          /* Physical drive nmuber (0..) */
	BYTE cmd,           /* Control code */
	void *buff          /* Buffer to send/receive control data */
)
{   
    switch (pdrv)
1a005978:	b928      	cbnz	r0, 1a005986 <disk_ioctl+0xe>
{   
1a00597a:	b508      	push	{r3, lr}
1a00597c:	4608      	mov	r0, r1
    {
        case FATFS_DISK_DRIVE_FSSDC:
            return FSSDC_FatFs_DiskIoCtl (cmd, buff);
1a00597e:	4611      	mov	r1, r2
1a005980:	f7ff fdf0 	bl	1a005564 <FSSDC_FatFs_DiskIoCtl>
            break;
            #endif
    }

	return RES_PARERR;
}
1a005984:	bd08      	pop	{r3, pc}
	return RES_PARERR;
1a005986:	2004      	movs	r0, #4
}
1a005988:	4770      	bx	lr
1a00598a:	Address 0x000000001a00598a is out of bounds.


1a00598c <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00598c:	2200      	movs	r2, #0
1a00598e:	2a05      	cmp	r2, #5
1a005990:	d819      	bhi.n	1a0059c6 <Board_LED_Init+0x3a>
{
1a005992:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a005994:	490c      	ldr	r1, [pc, #48]	; (1a0059c8 <Board_LED_Init+0x3c>)
1a005996:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a00599a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a00599e:	784c      	ldrb	r4, [r1, #1]
	pGPIO->DIR[port] |= 1UL << pin;
1a0059a0:	4b0a      	ldr	r3, [pc, #40]	; (1a0059cc <Board_LED_Init+0x40>)
1a0059a2:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a0059a6:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a0059aa:	2001      	movs	r0, #1
1a0059ac:	40a0      	lsls	r0, r4
1a0059ae:	4301      	orrs	r1, r0
1a0059b0:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a0059b4:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a0059b8:	2100      	movs	r1, #0
1a0059ba:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0059bc:	3201      	adds	r2, #1
1a0059be:	2a05      	cmp	r2, #5
1a0059c0:	d9e8      	bls.n	1a005994 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a0059c2:	bc70      	pop	{r4, r5, r6}
1a0059c4:	4770      	bx	lr
1a0059c6:	4770      	bx	lr
1a0059c8:	1a008ba0 	.word	0x1a008ba0
1a0059cc:	400f4000 	.word	0x400f4000

1a0059d0 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0059d0:	2300      	movs	r3, #0
1a0059d2:	2b03      	cmp	r3, #3
1a0059d4:	d816      	bhi.n	1a005a04 <Board_TEC_Init+0x34>
{
1a0059d6:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0059d8:	490b      	ldr	r1, [pc, #44]	; (1a005a08 <Board_TEC_Init+0x38>)
1a0059da:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0059de:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0059e2:	784d      	ldrb	r5, [r1, #1]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0059e4:	4c09      	ldr	r4, [pc, #36]	; (1a005a0c <Board_TEC_Init+0x3c>)
1a0059e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0059ea:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0059ee:	2001      	movs	r0, #1
1a0059f0:	40a8      	lsls	r0, r5
1a0059f2:	ea21 0100 	bic.w	r1, r1, r0
1a0059f6:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0059fa:	3301      	adds	r3, #1
1a0059fc:	2b03      	cmp	r3, #3
1a0059fe:	d9eb      	bls.n	1a0059d8 <Board_TEC_Init+0x8>
   }
}
1a005a00:	bc30      	pop	{r4, r5}
1a005a02:	4770      	bx	lr
1a005a04:	4770      	bx	lr
1a005a06:	bf00      	nop
1a005a08:	1a008b98 	.word	0x1a008b98
1a005a0c:	400f4000 	.word	0x400f4000

1a005a10 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a005a10:	2300      	movs	r3, #0
1a005a12:	2b08      	cmp	r3, #8
1a005a14:	d816      	bhi.n	1a005a44 <Board_GPIO_Init+0x34>
{
1a005a16:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a005a18:	490b      	ldr	r1, [pc, #44]	; (1a005a48 <Board_GPIO_Init+0x38>)
1a005a1a:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a005a1e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a005a22:	784d      	ldrb	r5, [r1, #1]
1a005a24:	4c09      	ldr	r4, [pc, #36]	; (1a005a4c <Board_GPIO_Init+0x3c>)
1a005a26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a005a2a:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a005a2e:	2001      	movs	r0, #1
1a005a30:	40a8      	lsls	r0, r5
1a005a32:	ea21 0100 	bic.w	r1, r1, r0
1a005a36:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a005a3a:	3301      	adds	r3, #1
1a005a3c:	2b08      	cmp	r3, #8
1a005a3e:	d9eb      	bls.n	1a005a18 <Board_GPIO_Init+0x8>
   }
}
1a005a40:	bc30      	pop	{r4, r5}
1a005a42:	4770      	bx	lr
1a005a44:	4770      	bx	lr
1a005a46:	bf00      	nop
1a005a48:	1a008bac 	.word	0x1a008bac
1a005a4c:	400f4000 	.word	0x400f4000

1a005a50 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a005a50:	b510      	push	{r4, lr}
1a005a52:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a005a54:	4c08      	ldr	r4, [pc, #32]	; (1a005a78 <Board_ADC_Init+0x28>)
1a005a56:	4669      	mov	r1, sp
1a005a58:	4620      	mov	r0, r4
1a005a5a:	f000 fa27 	bl	1a005eac <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a005a5e:	4a07      	ldr	r2, [pc, #28]	; (1a005a7c <Board_ADC_Init+0x2c>)
1a005a60:	4669      	mov	r1, sp
1a005a62:	4620      	mov	r0, r4
1a005a64:	f000 fa42 	bl	1a005eec <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a005a68:	2200      	movs	r2, #0
1a005a6a:	4669      	mov	r1, sp
1a005a6c:	4620      	mov	r0, r4
1a005a6e:	f000 fa56 	bl	1a005f1e <Chip_ADC_SetResolution>
}
1a005a72:	b002      	add	sp, #8
1a005a74:	bd10      	pop	{r4, pc}
1a005a76:	bf00      	nop
1a005a78:	400e3000 	.word	0x400e3000
1a005a7c:	00061a80 	.word	0x00061a80

1a005a80 <Board_SPI_Init>:
{
1a005a80:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a005a82:	4c0b      	ldr	r4, [pc, #44]	; (1a005ab0 <Board_SPI_Init+0x30>)
1a005a84:	4620      	mov	r0, r4
1a005a86:	f000 ff23 	bl	1a0068d0 <Chip_SSP_Init>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a005a8a:	6863      	ldr	r3, [r4, #4]
1a005a8c:	f023 0304 	bic.w	r3, r3, #4
1a005a90:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a005a92:	6823      	ldr	r3, [r4, #0]
1a005a94:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a005a98:	f043 0307 	orr.w	r3, r3, #7
1a005a9c:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a005a9e:	4905      	ldr	r1, [pc, #20]	; (1a005ab4 <Board_SPI_Init+0x34>)
1a005aa0:	4620      	mov	r0, r4
1a005aa2:	f000 fef5 	bl	1a006890 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a005aa6:	6863      	ldr	r3, [r4, #4]
1a005aa8:	f043 0302 	orr.w	r3, r3, #2
1a005aac:	6063      	str	r3, [r4, #4]
}
1a005aae:	bd10      	pop	{r4, pc}
1a005ab0:	400c5000 	.word	0x400c5000
1a005ab4:	000186a0 	.word	0x000186a0

1a005ab8 <Board_I2C_Init>:
{
1a005ab8:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a005aba:	2000      	movs	r0, #0
1a005abc:	f000 f8d0 	bl	1a005c60 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a005ac0:	4b04      	ldr	r3, [pc, #16]	; (1a005ad4 <Board_I2C_Init+0x1c>)
1a005ac2:	f640 0208 	movw	r2, #2056	; 0x808
1a005ac6:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a005aca:	4903      	ldr	r1, [pc, #12]	; (1a005ad8 <Board_I2C_Init+0x20>)
1a005acc:	2000      	movs	r0, #0
1a005ace:	f000 f8d9 	bl	1a005c84 <Chip_I2C_SetClockRate>
}
1a005ad2:	bd08      	pop	{r3, pc}
1a005ad4:	40086000 	.word	0x40086000
1a005ad8:	000f4240 	.word	0x000f4240

1a005adc <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a005adc:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a005ade:	4c07      	ldr	r4, [pc, #28]	; (1a005afc <Board_Debug_Init+0x20>)
1a005ae0:	4620      	mov	r0, r4
1a005ae2:	f000 f901 	bl	1a005ce8 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a005ae6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a005aea:	4620      	mov	r0, r4
1a005aec:	f000 f946 	bl	1a005d7c <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a005af0:	2303      	movs	r3, #3
1a005af2:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a005af4:	2301      	movs	r3, #1
1a005af6:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a005af8:	bd10      	pop	{r4, pc}
1a005afa:	bf00      	nop
1a005afc:	400c1000 	.word	0x400c1000

1a005b00 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a005b00:	4b03      	ldr	r3, [pc, #12]	; (1a005b10 <Board_UARTPutChar+0x10>)
1a005b02:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a005b04:	f013 0f20 	tst.w	r3, #32
1a005b08:	d0fa      	beq.n	1a005b00 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a005b0a:	4b01      	ldr	r3, [pc, #4]	; (1a005b10 <Board_UARTPutChar+0x10>)
1a005b0c:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a005b0e:	4770      	bx	lr
1a005b10:	400c1000 	.word	0x400c1000

1a005b14 <Board_UARTGetChar>:
	return pUART->LSR;
1a005b14:	4b05      	ldr	r3, [pc, #20]	; (1a005b2c <Board_UARTGetChar+0x18>)
1a005b16:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a005b18:	f013 0f01 	tst.w	r3, #1
1a005b1c:	d003      	beq.n	1a005b26 <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a005b1e:	4b03      	ldr	r3, [pc, #12]	; (1a005b2c <Board_UARTGetChar+0x18>)
1a005b20:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a005b22:	b2c0      	uxtb	r0, r0
1a005b24:	4770      	bx	lr
   }
   return EOF;
1a005b26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a005b2a:	4770      	bx	lr
1a005b2c:	400c1000 	.word	0x400c1000

1a005b30 <Board_UARTPutSTR>:


void Board_UARTPutSTR(const char *str)
{
1a005b30:	b510      	push	{r4, lr}
1a005b32:	4604      	mov	r4, r0
   while (*str != '\0') {
1a005b34:	e002      	b.n	1a005b3c <Board_UARTPutSTR+0xc>
      Board_UARTPutChar(*str++);
1a005b36:	3401      	adds	r4, #1
1a005b38:	f7ff ffe2 	bl	1a005b00 <Board_UARTPutChar>
   while (*str != '\0') {
1a005b3c:	7820      	ldrb	r0, [r4, #0]
1a005b3e:	2800      	cmp	r0, #0
1a005b40:	d1f9      	bne.n	1a005b36 <Board_UARTPutSTR+0x6>
   }
}
1a005b42:	bd10      	pop	{r4, pc}

1a005b44 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a005b44:	b508      	push	{r3, lr}
   DEBUGINIT();
1a005b46:	f7ff ffc9 	bl	1a005adc <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a005b4a:	4809      	ldr	r0, [pc, #36]	; (1a005b70 <Board_Init+0x2c>)
1a005b4c:	f000 fcdf 	bl	1a00650e <Chip_GPIO_Init>

   Board_GPIO_Init();
1a005b50:	f7ff ff5e 	bl	1a005a10 <Board_GPIO_Init>
   Board_ADC_Init();
1a005b54:	f7ff ff7c 	bl	1a005a50 <Board_ADC_Init>
   Board_SPI_Init();
1a005b58:	f7ff ff92 	bl	1a005a80 <Board_SPI_Init>
   Board_I2C_Init();
1a005b5c:	f7ff ffac 	bl	1a005ab8 <Board_I2C_Init>

   Board_LED_Init();
1a005b60:	f7ff ff14 	bl	1a00598c <Board_LED_Init>
   Board_TEC_Init();
1a005b64:	f7ff ff34 	bl	1a0059d0 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a005b68:	f000 fca8 	bl	1a0064bc <SystemCoreClockUpdate>
}
1a005b6c:	bd08      	pop	{r3, pc}
1a005b6e:	bf00      	nop
1a005b70:	400f4000 	.word	0x400f4000

1a005b74 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a005b74:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a005b76:	b2c0      	uxtb	r0, r0
1a005b78:	f7ff ffc2 	bl	1a005b00 <Board_UARTPutChar>
}
1a005b7c:	bd08      	pop	{r3, pc}

1a005b7e <__stdio_getchar>:

int __stdio_getchar()
{
1a005b7e:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a005b80:	f7ff ffc8 	bl	1a005b14 <Board_UARTGetChar>
}
1a005b84:	bd08      	pop	{r3, pc}

1a005b86 <__stdio_init>:

void __stdio_init()
{
1a005b86:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a005b88:	f7ff ffa8 	bl	1a005adc <Board_Debug_Init>
1a005b8c:	bd08      	pop	{r3, pc}
1a005b8e:	Address 0x000000001a005b8e is out of bounds.


1a005b90 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a005b90:	2300      	movs	r3, #0
1a005b92:	2b1c      	cmp	r3, #28
1a005b94:	d812      	bhi.n	1a005bbc <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a005b96:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a005b98:	4a09      	ldr	r2, [pc, #36]	; (1a005bc0 <Board_SetupMuxing+0x30>)
1a005b9a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a005b9e:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a005ba2:	784a      	ldrb	r2, [r1, #1]
1a005ba4:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a005ba6:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a005baa:	4906      	ldr	r1, [pc, #24]	; (1a005bc4 <Board_SetupMuxing+0x34>)
1a005bac:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a005bb0:	3301      	adds	r3, #1
1a005bb2:	2b1c      	cmp	r3, #28
1a005bb4:	d9f0      	bls.n	1a005b98 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a005bb6:	f85d 4b04 	ldr.w	r4, [sp], #4
1a005bba:	4770      	bx	lr
1a005bbc:	4770      	bx	lr
1a005bbe:	bf00      	nop
1a005bc0:	1a008bc8 	.word	0x1a008bc8
1a005bc4:	40086000 	.word	0x40086000

1a005bc8 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a005bc8:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a005bca:	4a17      	ldr	r2, [pc, #92]	; (1a005c28 <Board_SetupClocking+0x60>)
1a005bcc:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a005bd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a005bd4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a005bd8:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a005bdc:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a005be0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a005be4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a005be8:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a005bec:	2201      	movs	r2, #1
1a005bee:	490f      	ldr	r1, [pc, #60]	; (1a005c2c <Board_SetupClocking+0x64>)
1a005bf0:	2006      	movs	r0, #6
1a005bf2:	f000 fc8d 	bl	1a006510 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a005bf6:	2400      	movs	r4, #0
1a005bf8:	b14c      	cbz	r4, 1a005c0e <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a005bfa:	4b0b      	ldr	r3, [pc, #44]	; (1a005c28 <Board_SetupClocking+0x60>)
1a005bfc:	685a      	ldr	r2, [r3, #4]
1a005bfe:	f022 020c 	bic.w	r2, r2, #12
1a005c02:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a005c04:	685a      	ldr	r2, [r3, #4]
1a005c06:	f042 0203 	orr.w	r2, r2, #3
1a005c0a:	605a      	str	r2, [r3, #4]
}
1a005c0c:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a005c0e:	4808      	ldr	r0, [pc, #32]	; (1a005c30 <Board_SetupClocking+0x68>)
1a005c10:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a005c14:	2301      	movs	r3, #1
1a005c16:	788a      	ldrb	r2, [r1, #2]
1a005c18:	7849      	ldrb	r1, [r1, #1]
1a005c1a:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a005c1e:	f000 fba9 	bl	1a006374 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a005c22:	3401      	adds	r4, #1
1a005c24:	e7e8      	b.n	1a005bf8 <Board_SetupClocking+0x30>
1a005c26:	bf00      	nop
1a005c28:	40043000 	.word	0x40043000
1a005c2c:	0c28cb00 	.word	0x0c28cb00
1a005c30:	1a008bc4 	.word	0x1a008bc4

1a005c34 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a005c34:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a005c36:	f7ff ffab 	bl	1a005b90 <Board_SetupMuxing>
    Board_SetupClocking();
1a005c3a:	f7ff ffc5 	bl	1a005bc8 <Board_SetupClocking>
}
1a005c3e:	bd08      	pop	{r3, pc}

1a005c40 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a005c40:	2901      	cmp	r1, #1
1a005c42:	d000      	beq.n	1a005c46 <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a005c44:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a005c46:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a005c4a:	0082      	lsls	r2, r0, #2
1a005c4c:	4b03      	ldr	r3, [pc, #12]	; (1a005c5c <Chip_I2C_EventHandler+0x1c>)
1a005c4e:	4413      	add	r3, r2
1a005c50:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a005c52:	7d13      	ldrb	r3, [r2, #20]
1a005c54:	b2db      	uxtb	r3, r3
1a005c56:	2b04      	cmp	r3, #4
1a005c58:	d0fb      	beq.n	1a005c52 <Chip_I2C_EventHandler+0x12>
1a005c5a:	e7f3      	b.n	1a005c44 <Chip_I2C_EventHandler+0x4>
1a005c5c:	10000014 	.word	0x10000014

1a005c60 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a005c60:	b570      	push	{r4, r5, r6, lr}
1a005c62:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a005c64:	4e06      	ldr	r6, [pc, #24]	; (1a005c80 <Chip_I2C_Init+0x20>)
1a005c66:	00c4      	lsls	r4, r0, #3
1a005c68:	1a22      	subs	r2, r4, r0
1a005c6a:	0093      	lsls	r3, r2, #2
1a005c6c:	4433      	add	r3, r6
1a005c6e:	8898      	ldrh	r0, [r3, #4]
1a005c70:	f000 fbe4 	bl	1a00643c <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a005c74:	1b64      	subs	r4, r4, r5
1a005c76:	00a3      	lsls	r3, r4, #2
1a005c78:	58f3      	ldr	r3, [r6, r3]
1a005c7a:	226c      	movs	r2, #108	; 0x6c
1a005c7c:	619a      	str	r2, [r3, #24]
}
1a005c7e:	bd70      	pop	{r4, r5, r6, pc}
1a005c80:	10000014 	.word	0x10000014

1a005c84 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a005c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a005c88:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a005c8a:	4e0b      	ldr	r6, [pc, #44]	; (1a005cb8 <Chip_I2C_SetClockRate+0x34>)
1a005c8c:	00c5      	lsls	r5, r0, #3
1a005c8e:	1a2b      	subs	r3, r5, r0
1a005c90:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a005c94:	eb06 0308 	add.w	r3, r6, r8
1a005c98:	8898      	ldrh	r0, [r3, #4]
1a005c9a:	f000 fbe9 	bl	1a006470 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a005c9e:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a005ca2:	f856 3008 	ldr.w	r3, [r6, r8]
1a005ca6:	0842      	lsrs	r2, r0, #1
1a005ca8:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a005caa:	f856 3008 	ldr.w	r3, [r6, r8]
1a005cae:	691a      	ldr	r2, [r3, #16]
1a005cb0:	1a80      	subs	r0, r0, r2
1a005cb2:	6158      	str	r0, [r3, #20]
}
1a005cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a005cb8:	10000014 	.word	0x10000014

1a005cbc <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a005cbc:	4b09      	ldr	r3, [pc, #36]	; (1a005ce4 <Chip_UART_GetIndex+0x28>)
1a005cbe:	4298      	cmp	r0, r3
1a005cc0:	d009      	beq.n	1a005cd6 <Chip_UART_GetIndex+0x1a>
1a005cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a005cc6:	4298      	cmp	r0, r3
1a005cc8:	d007      	beq.n	1a005cda <Chip_UART_GetIndex+0x1e>
1a005cca:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a005cce:	4298      	cmp	r0, r3
1a005cd0:	d005      	beq.n	1a005cde <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a005cd2:	2000      	movs	r0, #0
1a005cd4:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a005cd6:	2002      	movs	r0, #2
1a005cd8:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a005cda:	2003      	movs	r0, #3
1a005cdc:	4770      	bx	lr
			return 1;
1a005cde:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a005ce0:	4770      	bx	lr
1a005ce2:	bf00      	nop
1a005ce4:	400c1000 	.word	0x400c1000

1a005ce8 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a005ce8:	b530      	push	{r4, r5, lr}
1a005cea:	b083      	sub	sp, #12
1a005cec:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a005cee:	f7ff ffe5 	bl	1a005cbc <Chip_UART_GetIndex>
1a005cf2:	2301      	movs	r3, #1
1a005cf4:	461a      	mov	r2, r3
1a005cf6:	4619      	mov	r1, r3
1a005cf8:	4d0e      	ldr	r5, [pc, #56]	; (1a005d34 <Chip_UART_Init+0x4c>)
1a005cfa:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a005cfe:	f000 fb7f 	bl	1a006400 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a005d02:	2307      	movs	r3, #7
1a005d04:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a005d06:	2300      	movs	r3, #0
1a005d08:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a005d0a:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a005d0c:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a005d0e:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a005d10:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a005d12:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a005d14:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a005d16:	4b08      	ldr	r3, [pc, #32]	; (1a005d38 <Chip_UART_Init+0x50>)
1a005d18:	429c      	cmp	r4, r3
1a005d1a:	d006      	beq.n	1a005d2a <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a005d1c:	2303      	movs	r3, #3
1a005d1e:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a005d20:	2310      	movs	r3, #16
1a005d22:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a005d24:	9b01      	ldr	r3, [sp, #4]
}
1a005d26:	b003      	add	sp, #12
1a005d28:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a005d2a:	2300      	movs	r3, #0
1a005d2c:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a005d2e:	69a3      	ldr	r3, [r4, #24]
1a005d30:	9301      	str	r3, [sp, #4]
1a005d32:	e7f3      	b.n	1a005d1c <Chip_UART_Init+0x34>
1a005d34:	1a008c44 	.word	0x1a008c44
1a005d38:	40082000 	.word	0x40082000

1a005d3c <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a005d3c:	b538      	push	{r3, r4, r5, lr}
1a005d3e:	4605      	mov	r5, r0
1a005d40:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a005d42:	f7ff ffbb 	bl	1a005cbc <Chip_UART_GetIndex>
1a005d46:	4b0c      	ldr	r3, [pc, #48]	; (1a005d78 <Chip_UART_SetBaud+0x3c>)
1a005d48:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a005d4c:	f000 fb90 	bl	1a006470 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a005d50:	0123      	lsls	r3, r4, #4
1a005d52:	fbb0 f3f3 	udiv	r3, r0, r3
1a005d56:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a005d58:	68ea      	ldr	r2, [r5, #12]
1a005d5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a005d5e:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a005d60:	6029      	str	r1, [r5, #0]
1a005d62:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a005d66:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a005d68:	68ea      	ldr	r2, [r5, #12]
1a005d6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a005d6e:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a005d70:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a005d74:	0900      	lsrs	r0, r0, #4
1a005d76:	bd38      	pop	{r3, r4, r5, pc}
1a005d78:	1a008c3c 	.word	0x1a008c3c

1a005d7c <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a005d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a005d80:	b083      	sub	sp, #12
1a005d82:	4683      	mov	fp, r0
1a005d84:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a005d86:	f7ff ff99 	bl	1a005cbc <Chip_UART_GetIndex>
1a005d8a:	4b35      	ldr	r3, [pc, #212]	; (1a005e60 <Chip_UART_SetBaudFDR+0xe4>)
1a005d8c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a005d90:	f000 fb6e 	bl	1a006470 <Chip_Clock_GetRate>
1a005d94:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a005d96:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a005d9a:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a005d9c:	2300      	movs	r3, #0
1a005d9e:	9301      	str	r3, [sp, #4]
1a005da0:	46a2      	mov	sl, r4
1a005da2:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a005da4:	e02a      	b.n	1a005dfc <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a005da6:	4242      	negs	r2, r0
				div ++;
1a005da8:	1c4b      	adds	r3, r1, #1
1a005daa:	e017      	b.n	1a005ddc <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a005dac:	b30a      	cbz	r2, 1a005df2 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a005dae:	4617      	mov	r7, r2
			sd = d;
1a005db0:	9501      	str	r5, [sp, #4]
			sm = m;
1a005db2:	46a2      	mov	sl, r4
			sdiv = div;
1a005db4:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a005db6:	3501      	adds	r5, #1
1a005db8:	42ac      	cmp	r4, r5
1a005dba:	d91e      	bls.n	1a005dfa <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a005dbc:	0933      	lsrs	r3, r6, #4
1a005dbe:	0730      	lsls	r0, r6, #28
1a005dc0:	fba4 0100 	umull	r0, r1, r4, r0
1a005dc4:	fb04 1103 	mla	r1, r4, r3, r1
1a005dc8:	1962      	adds	r2, r4, r5
1a005dca:	fb08 f202 	mul.w	r2, r8, r2
1a005dce:	2300      	movs	r3, #0
1a005dd0:	f001 f9cc 	bl	1a00716c <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a005dd4:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a005dd6:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a005dd8:	2800      	cmp	r0, #0
1a005dda:	dbe4      	blt.n	1a005da6 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a005ddc:	4297      	cmp	r7, r2
1a005dde:	d3ea      	bcc.n	1a005db6 <Chip_UART_SetBaudFDR+0x3a>
1a005de0:	2b00      	cmp	r3, #0
1a005de2:	d0e8      	beq.n	1a005db6 <Chip_UART_SetBaudFDR+0x3a>
1a005de4:	0c19      	lsrs	r1, r3, #16
1a005de6:	d1e6      	bne.n	1a005db6 <Chip_UART_SetBaudFDR+0x3a>
1a005de8:	2b02      	cmp	r3, #2
1a005dea:	d8df      	bhi.n	1a005dac <Chip_UART_SetBaudFDR+0x30>
1a005dec:	2d00      	cmp	r5, #0
1a005dee:	d0dd      	beq.n	1a005dac <Chip_UART_SetBaudFDR+0x30>
1a005df0:	e7e1      	b.n	1a005db6 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a005df2:	4617      	mov	r7, r2
			sd = d;
1a005df4:	9501      	str	r5, [sp, #4]
			sm = m;
1a005df6:	46a2      	mov	sl, r4
			sdiv = div;
1a005df8:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a005dfa:	3401      	adds	r4, #1
1a005dfc:	b11f      	cbz	r7, 1a005e06 <Chip_UART_SetBaudFDR+0x8a>
1a005dfe:	2c0f      	cmp	r4, #15
1a005e00:	d801      	bhi.n	1a005e06 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a005e02:	2500      	movs	r5, #0
1a005e04:	e7d8      	b.n	1a005db8 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a005e06:	f1b9 0f00 	cmp.w	r9, #0
1a005e0a:	d024      	beq.n	1a005e56 <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a005e0c:	f8db 300c 	ldr.w	r3, [fp, #12]
1a005e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a005e14:	f8cb 300c 	str.w	r3, [fp, #12]
1a005e18:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a005e1c:	f8cb 3000 	str.w	r3, [fp]
1a005e20:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a005e24:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a005e28:	f8db 300c 	ldr.w	r3, [fp, #12]
1a005e2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a005e30:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a005e34:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a005e38:	b2db      	uxtb	r3, r3
1a005e3a:	9901      	ldr	r1, [sp, #4]
1a005e3c:	f001 020f 	and.w	r2, r1, #15
1a005e40:	4313      	orrs	r3, r2
1a005e42:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a005e46:	0933      	lsrs	r3, r6, #4
1a005e48:	fb0a f303 	mul.w	r3, sl, r3
1a005e4c:	448a      	add	sl, r1
1a005e4e:	fb09 f90a 	mul.w	r9, r9, sl
1a005e52:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a005e56:	4648      	mov	r0, r9
1a005e58:	b003      	add	sp, #12
1a005e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005e5e:	bf00      	nop
1a005e60:	1a008c3c 	.word	0x1a008c3c

1a005e64 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a005e64:	4b03      	ldr	r3, [pc, #12]	; (1a005e74 <Chip_ADC_GetClockIndex+0x10>)
1a005e66:	4298      	cmp	r0, r3
1a005e68:	d001      	beq.n	1a005e6e <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a005e6a:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a005e6c:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a005e6e:	2004      	movs	r0, #4
1a005e70:	4770      	bx	lr
1a005e72:	bf00      	nop
1a005e74:	400e4000 	.word	0x400e4000

1a005e78 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a005e78:	b570      	push	{r4, r5, r6, lr}
1a005e7a:	460d      	mov	r5, r1
1a005e7c:	4614      	mov	r4, r2
1a005e7e:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a005e80:	f7ff fff0 	bl	1a005e64 <Chip_ADC_GetClockIndex>
1a005e84:	f000 faf4 	bl	1a006470 <Chip_Clock_GetRate>
	if (burstMode) {
1a005e88:	b965      	cbnz	r5, 1a005ea4 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a005e8a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a005e8e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a005e92:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a005e96:	0064      	lsls	r4, r4, #1
1a005e98:	fbb0 f0f4 	udiv	r0, r0, r4
1a005e9c:	b2c0      	uxtb	r0, r0
1a005e9e:	3801      	subs	r0, #1
	return div;
}
1a005ea0:	b2c0      	uxtb	r0, r0
1a005ea2:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a005ea4:	fb04 f406 	mul.w	r4, r4, r6
1a005ea8:	e7f3      	b.n	1a005e92 <getClkDiv+0x1a>
1a005eaa:	Address 0x000000001a005eaa is out of bounds.


1a005eac <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a005eac:	b538      	push	{r3, r4, r5, lr}
1a005eae:	4605      	mov	r5, r0
1a005eb0:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a005eb2:	f7ff ffd7 	bl	1a005e64 <Chip_ADC_GetClockIndex>
1a005eb6:	2301      	movs	r3, #1
1a005eb8:	461a      	mov	r2, r3
1a005eba:	4619      	mov	r1, r3
1a005ebc:	f000 faa0 	bl	1a006400 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a005ec0:	2100      	movs	r1, #0
1a005ec2:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a005ec4:	4a08      	ldr	r2, [pc, #32]	; (1a005ee8 <Chip_ADC_Init+0x3c>)
1a005ec6:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a005ec8:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a005eca:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a005ecc:	230b      	movs	r3, #11
1a005ece:	4628      	mov	r0, r5
1a005ed0:	f7ff ffd2 	bl	1a005e78 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a005ed4:	0200      	lsls	r0, r0, #8
1a005ed6:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a005eda:	7920      	ldrb	r0, [r4, #4]
1a005edc:	0440      	lsls	r0, r0, #17
1a005ede:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a005ee2:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a005ee4:	6028      	str	r0, [r5, #0]
}
1a005ee6:	bd38      	pop	{r3, r4, r5, pc}
1a005ee8:	00061a80 	.word	0x00061a80

1a005eec <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a005eec:	b570      	push	{r4, r5, r6, lr}
1a005eee:	4605      	mov	r5, r0
1a005ef0:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a005ef2:	6804      	ldr	r4, [r0, #0]
1a005ef4:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a005ef8:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a005efc:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a005efe:	790b      	ldrb	r3, [r1, #4]
1a005f00:	f1c3 030b 	rsb	r3, r3, #11
1a005f04:	b2db      	uxtb	r3, r3
1a005f06:	7949      	ldrb	r1, [r1, #5]
1a005f08:	f7ff ffb6 	bl	1a005e78 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a005f0c:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a005f10:	7930      	ldrb	r0, [r6, #4]
1a005f12:	0440      	lsls	r0, r0, #17
1a005f14:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a005f18:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a005f1a:	6028      	str	r0, [r5, #0]
}
1a005f1c:	bd70      	pop	{r4, r5, r6, pc}

1a005f1e <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a005f1e:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a005f20:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a005f22:	680a      	ldr	r2, [r1, #0]
1a005f24:	f7ff ffe2 	bl	1a005eec <Chip_ADC_SetSampleRate>
}
1a005f28:	bd08      	pop	{r3, pc}
1a005f2a:	Address 0x000000001a005f2a is out of bounds.


1a005f2c <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a005f2c:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a005f2e:	680b      	ldr	r3, [r1, #0]
1a005f30:	f013 0f80 	tst.w	r3, #128	; 0x80
1a005f34:	d002      	beq.n	1a005f3c <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a005f36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a005f3a:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a005f3c:	4607      	mov	r7, r0
1a005f3e:	2501      	movs	r5, #1
1a005f40:	e03b      	b.n	1a005fba <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a005f42:	694b      	ldr	r3, [r1, #20]
1a005f44:	fb03 f302 	mul.w	r3, r3, r2
1a005f48:	fbb3 f3f5 	udiv	r3, r3, r5
1a005f4c:	e014      	b.n	1a005f78 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a005f4e:	461c      	mov	r4, r3
1a005f50:	e020      	b.n	1a005f94 <pll_calc_divs+0x68>
		return -val;
1a005f52:	f1cc 0c00 	rsb	ip, ip, #0
1a005f56:	e020      	b.n	1a005f9a <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a005f58:	3201      	adds	r2, #1
1a005f5a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a005f5e:	dc26      	bgt.n	1a005fae <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a005f60:	680c      	ldr	r4, [r1, #0]
1a005f62:	f014 0f40 	tst.w	r4, #64	; 0x40
1a005f66:	d0ec      	beq.n	1a005f42 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a005f68:	1c73      	adds	r3, r6, #1
1a005f6a:	fa02 fc03 	lsl.w	ip, r2, r3
1a005f6e:	694b      	ldr	r3, [r1, #20]
1a005f70:	fb03 f30c 	mul.w	r3, r3, ip
1a005f74:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a005f78:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a005fc8 <pll_calc_divs+0x9c>
1a005f7c:	4563      	cmp	r3, ip
1a005f7e:	d9eb      	bls.n	1a005f58 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a005f80:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a005fcc <pll_calc_divs+0xa0>
1a005f84:	4563      	cmp	r3, ip
1a005f86:	d812      	bhi.n	1a005fae <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a005f88:	f014 0f80 	tst.w	r4, #128	; 0x80
1a005f8c:	d1df      	bne.n	1a005f4e <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a005f8e:	1c74      	adds	r4, r6, #1
1a005f90:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a005f94:	ebb0 0c04 	subs.w	ip, r0, r4
1a005f98:	d4db      	bmi.n	1a005f52 <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a005f9a:	4567      	cmp	r7, ip
1a005f9c:	d9dc      	bls.n	1a005f58 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a005f9e:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a005fa0:	1c77      	adds	r7, r6, #1
1a005fa2:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a005fa4:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a005fa6:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a005fa8:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a005faa:	4667      	mov	r7, ip
1a005fac:	e7d4      	b.n	1a005f58 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a005fae:	3601      	adds	r6, #1
1a005fb0:	2e03      	cmp	r6, #3
1a005fb2:	dc01      	bgt.n	1a005fb8 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a005fb4:	2201      	movs	r2, #1
1a005fb6:	e7d0      	b.n	1a005f5a <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a005fb8:	3501      	adds	r5, #1
1a005fba:	2d04      	cmp	r5, #4
1a005fbc:	dc01      	bgt.n	1a005fc2 <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a005fbe:	2600      	movs	r6, #0
1a005fc0:	e7f6      	b.n	1a005fb0 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a005fc2:	bcf0      	pop	{r4, r5, r6, r7}
1a005fc4:	4770      	bx	lr
1a005fc6:	bf00      	nop
1a005fc8:	094c5eff 	.word	0x094c5eff
1a005fcc:	1312d000 	.word	0x1312d000

1a005fd0 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a005fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a005fd2:	b099      	sub	sp, #100	; 0x64
1a005fd4:	4605      	mov	r5, r0
1a005fd6:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a005fd8:	225c      	movs	r2, #92	; 0x5c
1a005fda:	2100      	movs	r1, #0
1a005fdc:	a801      	add	r0, sp, #4
1a005fde:	f001 fbee 	bl	1a0077be <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a005fe2:	2380      	movs	r3, #128	; 0x80
1a005fe4:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a005fe6:	6963      	ldr	r3, [r4, #20]
1a005fe8:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a005fea:	7923      	ldrb	r3, [r4, #4]
1a005fec:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a005ff0:	4669      	mov	r1, sp
1a005ff2:	4628      	mov	r0, r5
1a005ff4:	f7ff ff9a 	bl	1a005f2c <pll_calc_divs>
	if (pll[0].fout == freq) {
1a005ff8:	9b06      	ldr	r3, [sp, #24]
1a005ffa:	42ab      	cmp	r3, r5
1a005ffc:	d027      	beq.n	1a00604e <pll_get_frac+0x7e>
	if (val < 0)
1a005ffe:	1aeb      	subs	r3, r5, r3
1a006000:	d42e      	bmi.n	1a006060 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a006002:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a006004:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a006006:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00600a:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a00600c:	6963      	ldr	r3, [r4, #20]
1a00600e:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a006010:	7923      	ldrb	r3, [r4, #4]
1a006012:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a006016:	a910      	add	r1, sp, #64	; 0x40
1a006018:	4628      	mov	r0, r5
1a00601a:	f7ff ff87 	bl	1a005f2c <pll_calc_divs>
	if (pll[2].fout == freq) {
1a00601e:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a006020:	42ab      	cmp	r3, r5
1a006022:	d01f      	beq.n	1a006064 <pll_get_frac+0x94>
	if (val < 0)
1a006024:	1aeb      	subs	r3, r5, r3
1a006026:	d425      	bmi.n	1a006074 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a006028:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a00602a:	4b2b      	ldr	r3, [pc, #172]	; (1a0060d8 <pll_get_frac+0x108>)
1a00602c:	429d      	cmp	r5, r3
1a00602e:	d923      	bls.n	1a006078 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a006030:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a006032:	1aed      	subs	r5, r5, r3
1a006034:	d433      	bmi.n	1a00609e <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a006036:	42ae      	cmp	r6, r5
1a006038:	dc3b      	bgt.n	1a0060b2 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a00603a:	42be      	cmp	r6, r7
1a00603c:	dc31      	bgt.n	1a0060a2 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a00603e:	466d      	mov	r5, sp
1a006040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a006042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a006044:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a006048:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00604c:	e006      	b.n	1a00605c <pll_get_frac+0x8c>
		*ppll = pll[0];
1a00604e:	466d      	mov	r5, sp
1a006050:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a006052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a006054:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a006058:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a00605c:	b019      	add	sp, #100	; 0x64
1a00605e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a006060:	425b      	negs	r3, r3
1a006062:	e7ce      	b.n	1a006002 <pll_get_frac+0x32>
		*ppll = pll[2];
1a006064:	ad10      	add	r5, sp, #64	; 0x40
1a006066:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a006068:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00606a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00606e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a006072:	e7f3      	b.n	1a00605c <pll_get_frac+0x8c>
		return -val;
1a006074:	425b      	negs	r3, r3
1a006076:	e7d7      	b.n	1a006028 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a006078:	2340      	movs	r3, #64	; 0x40
1a00607a:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a00607c:	6963      	ldr	r3, [r4, #20]
1a00607e:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a006080:	a908      	add	r1, sp, #32
1a006082:	4628      	mov	r0, r5
1a006084:	f7ff ff52 	bl	1a005f2c <pll_calc_divs>
		if (pll[1].fout == freq) {
1a006088:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00608a:	42ab      	cmp	r3, r5
1a00608c:	d1d0      	bne.n	1a006030 <pll_get_frac+0x60>
			*ppll = pll[1];
1a00608e:	ad08      	add	r5, sp, #32
1a006090:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a006092:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a006094:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a006098:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a00609c:	e7de      	b.n	1a00605c <pll_get_frac+0x8c>
		return -val;
1a00609e:	426d      	negs	r5, r5
1a0060a0:	e7c9      	b.n	1a006036 <pll_get_frac+0x66>
			*ppll = pll[2];
1a0060a2:	ad10      	add	r5, sp, #64	; 0x40
1a0060a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0060a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0060a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0060ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0060b0:	e7d4      	b.n	1a00605c <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a0060b2:	42af      	cmp	r7, r5
1a0060b4:	db07      	blt.n	1a0060c6 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a0060b6:	ad08      	add	r5, sp, #32
1a0060b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0060ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0060bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0060c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0060c4:	e7ca      	b.n	1a00605c <pll_get_frac+0x8c>
			*ppll = pll[2];
1a0060c6:	ad10      	add	r5, sp, #64	; 0x40
1a0060c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0060ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0060cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0060d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0060d4:	e7c2      	b.n	1a00605c <pll_get_frac+0x8c>
1a0060d6:	bf00      	nop
1a0060d8:	068e7780 	.word	0x068e7780

1a0060dc <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a0060dc:	b430      	push	{r4, r5}
1a0060de:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a0060e0:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a0060e2:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0060e4:	e000      	b.n	1a0060e8 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a0060e6:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0060e8:	281c      	cmp	r0, #28
1a0060ea:	d118      	bne.n	1a00611e <Chip_Clock_FindBaseClock+0x42>
1a0060ec:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0060f0:	0051      	lsls	r1, r2, #1
1a0060f2:	4a0c      	ldr	r2, [pc, #48]	; (1a006124 <Chip_Clock_FindBaseClock+0x48>)
1a0060f4:	440a      	add	r2, r1
1a0060f6:	7914      	ldrb	r4, [r2, #4]
1a0060f8:	4284      	cmp	r4, r0
1a0060fa:	d010      	beq.n	1a00611e <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a0060fc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a006100:	004a      	lsls	r2, r1, #1
1a006102:	4908      	ldr	r1, [pc, #32]	; (1a006124 <Chip_Clock_FindBaseClock+0x48>)
1a006104:	5a8a      	ldrh	r2, [r1, r2]
1a006106:	42aa      	cmp	r2, r5
1a006108:	d8ed      	bhi.n	1a0060e6 <Chip_Clock_FindBaseClock+0xa>
1a00610a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00610e:	0051      	lsls	r1, r2, #1
1a006110:	4a04      	ldr	r2, [pc, #16]	; (1a006124 <Chip_Clock_FindBaseClock+0x48>)
1a006112:	440a      	add	r2, r1
1a006114:	8852      	ldrh	r2, [r2, #2]
1a006116:	42aa      	cmp	r2, r5
1a006118:	d3e5      	bcc.n	1a0060e6 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a00611a:	4620      	mov	r0, r4
1a00611c:	e7e4      	b.n	1a0060e8 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a00611e:	bc30      	pop	{r4, r5}
1a006120:	4770      	bx	lr
1a006122:	bf00      	nop
1a006124:	1a008c58 	.word	0x1a008c58

1a006128 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a006128:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a00612a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a00612e:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a006130:	4a0d      	ldr	r2, [pc, #52]	; (1a006168 <Chip_Clock_EnableCrystal+0x40>)
1a006132:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a006134:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a006138:	6992      	ldr	r2, [r2, #24]
1a00613a:	428a      	cmp	r2, r1
1a00613c:	d001      	beq.n	1a006142 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00613e:	4a0a      	ldr	r2, [pc, #40]	; (1a006168 <Chip_Clock_EnableCrystal+0x40>)
1a006140:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a006142:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a006146:	4a09      	ldr	r2, [pc, #36]	; (1a00616c <Chip_Clock_EnableCrystal+0x44>)
1a006148:	6811      	ldr	r1, [r2, #0]
1a00614a:	4a09      	ldr	r2, [pc, #36]	; (1a006170 <Chip_Clock_EnableCrystal+0x48>)
1a00614c:	4291      	cmp	r1, r2
1a00614e:	d901      	bls.n	1a006154 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a006150:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a006154:	4a04      	ldr	r2, [pc, #16]	; (1a006168 <Chip_Clock_EnableCrystal+0x40>)
1a006156:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a006158:	9b01      	ldr	r3, [sp, #4]
1a00615a:	1e5a      	subs	r2, r3, #1
1a00615c:	9201      	str	r2, [sp, #4]
1a00615e:	2b00      	cmp	r3, #0
1a006160:	d1fa      	bne.n	1a006158 <Chip_Clock_EnableCrystal+0x30>
}
1a006162:	b002      	add	sp, #8
1a006164:	4770      	bx	lr
1a006166:	bf00      	nop
1a006168:	40050000 	.word	0x40050000
1a00616c:	1a008bc0 	.word	0x1a008bc0
1a006170:	01312cff 	.word	0x01312cff

1a006174 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a006174:	3012      	adds	r0, #18
1a006176:	4b05      	ldr	r3, [pc, #20]	; (1a00618c <Chip_Clock_GetDividerSource+0x18>)
1a006178:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a00617c:	f010 0f01 	tst.w	r0, #1
1a006180:	d102      	bne.n	1a006188 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a006182:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a006186:	4770      	bx	lr
		return CLKINPUT_PD;
1a006188:	2011      	movs	r0, #17
}
1a00618a:	4770      	bx	lr
1a00618c:	40050000 	.word	0x40050000

1a006190 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a006190:	f100 0212 	add.w	r2, r0, #18
1a006194:	4b03      	ldr	r3, [pc, #12]	; (1a0061a4 <Chip_Clock_GetDividerDivisor+0x14>)
1a006196:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a00619a:	4b03      	ldr	r3, [pc, #12]	; (1a0061a8 <Chip_Clock_GetDividerDivisor+0x18>)
1a00619c:	5c18      	ldrb	r0, [r3, r0]
}
1a00619e:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a0061a2:	4770      	bx	lr
1a0061a4:	40050000 	.word	0x40050000
1a0061a8:	1a008c50 	.word	0x1a008c50

1a0061ac <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a0061ac:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a0061ae:	2810      	cmp	r0, #16
1a0061b0:	d80a      	bhi.n	1a0061c8 <Chip_Clock_GetClockInputHz+0x1c>
1a0061b2:	e8df f000 	tbb	[pc, r0]
1a0061b6:	0b42      	.short	0x0b42
1a0061b8:	091f160d 	.word	0x091f160d
1a0061bc:	2b282522 	.word	0x2b282522
1a0061c0:	322e0909 	.word	0x322e0909
1a0061c4:	3a36      	.short	0x3a36
1a0061c6:	3e          	.byte	0x3e
1a0061c7:	00          	.byte	0x00
	uint32_t rate = 0;
1a0061c8:	2000      	movs	r0, #0
1a0061ca:	e038      	b.n	1a00623e <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a0061cc:	481e      	ldr	r0, [pc, #120]	; (1a006248 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a0061ce:	e036      	b.n	1a00623e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0061d0:	4b1e      	ldr	r3, [pc, #120]	; (1a00624c <Chip_Clock_GetClockInputHz+0xa0>)
1a0061d2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0061d6:	f003 0307 	and.w	r3, r3, #7
1a0061da:	2b04      	cmp	r3, #4
1a0061dc:	d130      	bne.n	1a006240 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a0061de:	2000      	movs	r0, #0
1a0061e0:	e02d      	b.n	1a00623e <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0061e2:	4b1a      	ldr	r3, [pc, #104]	; (1a00624c <Chip_Clock_GetClockInputHz+0xa0>)
1a0061e4:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0061e8:	f003 0307 	and.w	r3, r3, #7
1a0061ec:	2b04      	cmp	r3, #4
1a0061ee:	d029      	beq.n	1a006244 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a0061f0:	4817      	ldr	r0, [pc, #92]	; (1a006250 <Chip_Clock_GetClockInputHz+0xa4>)
1a0061f2:	e024      	b.n	1a00623e <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a0061f4:	4b17      	ldr	r3, [pc, #92]	; (1a006254 <Chip_Clock_GetClockInputHz+0xa8>)
1a0061f6:	6818      	ldr	r0, [r3, #0]
		break;
1a0061f8:	e021      	b.n	1a00623e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a0061fa:	4b17      	ldr	r3, [pc, #92]	; (1a006258 <Chip_Clock_GetClockInputHz+0xac>)
1a0061fc:	6818      	ldr	r0, [r3, #0]
		break;
1a0061fe:	e01e      	b.n	1a00623e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a006200:	4b16      	ldr	r3, [pc, #88]	; (1a00625c <Chip_Clock_GetClockInputHz+0xb0>)
1a006202:	6818      	ldr	r0, [r3, #0]
		break;
1a006204:	e01b      	b.n	1a00623e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a006206:	4b15      	ldr	r3, [pc, #84]	; (1a00625c <Chip_Clock_GetClockInputHz+0xb0>)
1a006208:	6858      	ldr	r0, [r3, #4]
		break;
1a00620a:	e018      	b.n	1a00623e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a00620c:	f000 f86a 	bl	1a0062e4 <Chip_Clock_GetMainPLLHz>
		break;
1a006210:	e015      	b.n	1a00623e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a006212:	2100      	movs	r1, #0
1a006214:	f000 f89c 	bl	1a006350 <Chip_Clock_GetDivRate>
		break;
1a006218:	e011      	b.n	1a00623e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00621a:	2101      	movs	r1, #1
1a00621c:	f000 f898 	bl	1a006350 <Chip_Clock_GetDivRate>
		break;
1a006220:	e00d      	b.n	1a00623e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a006222:	2102      	movs	r1, #2
1a006224:	f000 f894 	bl	1a006350 <Chip_Clock_GetDivRate>
		break;
1a006228:	e009      	b.n	1a00623e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a00622a:	2103      	movs	r1, #3
1a00622c:	f000 f890 	bl	1a006350 <Chip_Clock_GetDivRate>
		break;
1a006230:	e005      	b.n	1a00623e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a006232:	2104      	movs	r1, #4
1a006234:	f000 f88c 	bl	1a006350 <Chip_Clock_GetDivRate>
		break;
1a006238:	e001      	b.n	1a00623e <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a00623a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a00623e:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a006240:	4803      	ldr	r0, [pc, #12]	; (1a006250 <Chip_Clock_GetClockInputHz+0xa4>)
1a006242:	e7fc      	b.n	1a00623e <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a006244:	4806      	ldr	r0, [pc, #24]	; (1a006260 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a006246:	e7fa      	b.n	1a00623e <Chip_Clock_GetClockInputHz+0x92>
1a006248:	00b71b00 	.word	0x00b71b00
1a00624c:	40043000 	.word	0x40043000
1a006250:	017d7840 	.word	0x017d7840
1a006254:	1a008b94 	.word	0x1a008b94
1a006258:	1a008bc0 	.word	0x1a008bc0
1a00625c:	10003478 	.word	0x10003478
1a006260:	02faf080 	.word	0x02faf080

1a006264 <Chip_Clock_CalcMainPLLValue>:
{
1a006264:	b538      	push	{r3, r4, r5, lr}
1a006266:	4605      	mov	r5, r0
1a006268:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a00626a:	7908      	ldrb	r0, [r1, #4]
1a00626c:	f7ff ff9e 	bl	1a0061ac <Chip_Clock_GetClockInputHz>
1a006270:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a006272:	4b19      	ldr	r3, [pc, #100]	; (1a0062d8 <Chip_Clock_CalcMainPLLValue+0x74>)
1a006274:	442b      	add	r3, r5
1a006276:	4a19      	ldr	r2, [pc, #100]	; (1a0062dc <Chip_Clock_CalcMainPLLValue+0x78>)
1a006278:	4293      	cmp	r3, r2
1a00627a:	d821      	bhi.n	1a0062c0 <Chip_Clock_CalcMainPLLValue+0x5c>
1a00627c:	b318      	cbz	r0, 1a0062c6 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a00627e:	2380      	movs	r3, #128	; 0x80
1a006280:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a006282:	2300      	movs	r3, #0
1a006284:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a006286:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a006288:	fbb5 f3f0 	udiv	r3, r5, r0
1a00628c:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a00628e:	4a14      	ldr	r2, [pc, #80]	; (1a0062e0 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a006290:	4295      	cmp	r5, r2
1a006292:	d903      	bls.n	1a00629c <Chip_Clock_CalcMainPLLValue+0x38>
1a006294:	fb03 f000 	mul.w	r0, r3, r0
1a006298:	42a8      	cmp	r0, r5
1a00629a:	d007      	beq.n	1a0062ac <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a00629c:	4621      	mov	r1, r4
1a00629e:	4628      	mov	r0, r5
1a0062a0:	f7ff fe96 	bl	1a005fd0 <pll_get_frac>
		if (!ppll->nsel) {
1a0062a4:	68a3      	ldr	r3, [r4, #8]
1a0062a6:	b18b      	cbz	r3, 1a0062cc <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a0062a8:	3b01      	subs	r3, #1
1a0062aa:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a0062ac:	6923      	ldr	r3, [r4, #16]
1a0062ae:	b183      	cbz	r3, 1a0062d2 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a0062b0:	68e2      	ldr	r2, [r4, #12]
1a0062b2:	b10a      	cbz	r2, 1a0062b8 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a0062b4:	3a01      	subs	r2, #1
1a0062b6:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a0062b8:	3b01      	subs	r3, #1
1a0062ba:	6123      	str	r3, [r4, #16]
	return 0;
1a0062bc:	2000      	movs	r0, #0
}
1a0062be:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a0062c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0062c4:	e7fb      	b.n	1a0062be <Chip_Clock_CalcMainPLLValue+0x5a>
1a0062c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0062ca:	e7f8      	b.n	1a0062be <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a0062cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0062d0:	e7f5      	b.n	1a0062be <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a0062d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0062d6:	e7f2      	b.n	1a0062be <Chip_Clock_CalcMainPLLValue+0x5a>
1a0062d8:	ff6b3a10 	.word	0xff6b3a10
1a0062dc:	0b940510 	.word	0x0b940510
1a0062e0:	094c5eff 	.word	0x094c5eff

1a0062e4 <Chip_Clock_GetMainPLLHz>:
{
1a0062e4:	b530      	push	{r4, r5, lr}
1a0062e6:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a0062e8:	4d17      	ldr	r5, [pc, #92]	; (1a006348 <Chip_Clock_GetMainPLLHz+0x64>)
1a0062ea:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a0062ec:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a0062f0:	f7ff ff5c 	bl	1a0061ac <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a0062f4:	4b15      	ldr	r3, [pc, #84]	; (1a00634c <Chip_Clock_GetMainPLLHz+0x68>)
1a0062f6:	681b      	ldr	r3, [r3, #0]
1a0062f8:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a0062fa:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a0062fc:	f013 0f01 	tst.w	r3, #1
1a006300:	d01f      	beq.n	1a006342 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a006302:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a006306:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a00630a:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a00630e:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a006312:	3301      	adds	r3, #1
	n = nsel + 1;
1a006314:	3201      	adds	r2, #1
	p = ptab[psel];
1a006316:	f10d 0c08 	add.w	ip, sp, #8
1a00631a:	4461      	add	r1, ip
1a00631c:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a006320:	f014 0f80 	tst.w	r4, #128	; 0x80
1a006324:	d108      	bne.n	1a006338 <Chip_Clock_GetMainPLLHz+0x54>
1a006326:	b93d      	cbnz	r5, 1a006338 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a006328:	0049      	lsls	r1, r1, #1
1a00632a:	fbb3 f3f1 	udiv	r3, r3, r1
1a00632e:	fbb0 f0f2 	udiv	r0, r0, r2
1a006332:	fb00 f003 	mul.w	r0, r0, r3
1a006336:	e005      	b.n	1a006344 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a006338:	fbb0 f0f2 	udiv	r0, r0, r2
1a00633c:	fb03 f000 	mul.w	r0, r3, r0
1a006340:	e000      	b.n	1a006344 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a006342:	2000      	movs	r0, #0
}
1a006344:	b003      	add	sp, #12
1a006346:	bd30      	pop	{r4, r5, pc}
1a006348:	40050000 	.word	0x40050000
1a00634c:	1a008c4c 	.word	0x1a008c4c

1a006350 <Chip_Clock_GetDivRate>:
{
1a006350:	b538      	push	{r3, r4, r5, lr}
1a006352:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a006354:	4608      	mov	r0, r1
1a006356:	f7ff ff0d 	bl	1a006174 <Chip_Clock_GetDividerSource>
1a00635a:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a00635c:	4620      	mov	r0, r4
1a00635e:	f7ff ff17 	bl	1a006190 <Chip_Clock_GetDividerDivisor>
1a006362:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a006364:	4628      	mov	r0, r5
1a006366:	f7ff ff21 	bl	1a0061ac <Chip_Clock_GetClockInputHz>
1a00636a:	3401      	adds	r4, #1
}
1a00636c:	fbb0 f0f4 	udiv	r0, r0, r4
1a006370:	bd38      	pop	{r3, r4, r5, pc}
1a006372:	Address 0x000000001a006372 is out of bounds.


1a006374 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a006374:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a006376:	f100 0416 	add.w	r4, r0, #22
1a00637a:	00a4      	lsls	r4, r4, #2
1a00637c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a006380:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a006384:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a006386:	281b      	cmp	r0, #27
1a006388:	d813      	bhi.n	1a0063b2 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a00638a:	2911      	cmp	r1, #17
1a00638c:	d01a      	beq.n	1a0063c4 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a00638e:	4d0e      	ldr	r5, [pc, #56]	; (1a0063c8 <Chip_Clock_SetBaseClock+0x54>)
1a006390:	4025      	ands	r5, r4

			if (autoblocken) {
1a006392:	b10a      	cbz	r2, 1a006398 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a006394:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a006398:	b10b      	cbz	r3, 1a00639e <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a00639a:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a00639e:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a0063a2:	3016      	adds	r0, #22
1a0063a4:	0080      	lsls	r0, r0, #2
1a0063a6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0063aa:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0063ae:	6045      	str	r5, [r0, #4]
1a0063b0:	e008      	b.n	1a0063c4 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a0063b2:	f044 0401 	orr.w	r4, r4, #1
1a0063b6:	3016      	adds	r0, #22
1a0063b8:	0080      	lsls	r0, r0, #2
1a0063ba:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0063be:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0063c2:	6044      	str	r4, [r0, #4]
	}
}
1a0063c4:	bc30      	pop	{r4, r5}
1a0063c6:	4770      	bx	lr
1a0063c8:	e0fff7fe 	.word	0xe0fff7fe

1a0063cc <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a0063cc:	281b      	cmp	r0, #27
1a0063ce:	d80c      	bhi.n	1a0063ea <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a0063d0:	3016      	adds	r0, #22
1a0063d2:	0080      	lsls	r0, r0, #2
1a0063d4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0063d8:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0063dc:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a0063de:	f010 0f01 	tst.w	r0, #1
1a0063e2:	d104      	bne.n	1a0063ee <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0063e4:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0063e8:	4770      	bx	lr
		return CLKINPUT_PD;
1a0063ea:	2011      	movs	r0, #17
1a0063ec:	4770      	bx	lr
		return CLKINPUT_PD;
1a0063ee:	2011      	movs	r0, #17
}
1a0063f0:	4770      	bx	lr

1a0063f2 <Chip_Clock_GetBaseClocktHz>:
{
1a0063f2:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a0063f4:	f7ff ffea 	bl	1a0063cc <Chip_Clock_GetBaseClock>
1a0063f8:	f7ff fed8 	bl	1a0061ac <Chip_Clock_GetClockInputHz>
}
1a0063fc:	bd08      	pop	{r3, pc}
1a0063fe:	Address 0x000000001a0063fe is out of bounds.


1a006400 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a006400:	b969      	cbnz	r1, 1a00641e <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a006402:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a006404:	b10a      	cbz	r2, 1a00640a <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a006406:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a00640a:	2b02      	cmp	r3, #2
1a00640c:	d009      	beq.n	1a006422 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a00640e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a006412:	d209      	bcs.n	1a006428 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a006414:	3020      	adds	r0, #32
1a006416:	4b07      	ldr	r3, [pc, #28]	; (1a006434 <Chip_Clock_EnableOpts+0x34>)
1a006418:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a00641c:	4770      	bx	lr
		reg |= (1 << 1);
1a00641e:	2103      	movs	r1, #3
1a006420:	e7f0      	b.n	1a006404 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a006422:	f041 0120 	orr.w	r1, r1, #32
1a006426:	e7f2      	b.n	1a00640e <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a006428:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00642c:	4b02      	ldr	r3, [pc, #8]	; (1a006438 <Chip_Clock_EnableOpts+0x38>)
1a00642e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a006432:	4770      	bx	lr
1a006434:	40051000 	.word	0x40051000
1a006438:	40052000 	.word	0x40052000

1a00643c <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a00643c:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a006440:	d208      	bcs.n	1a006454 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a006442:	4a09      	ldr	r2, [pc, #36]	; (1a006468 <Chip_Clock_Enable+0x2c>)
1a006444:	3020      	adds	r0, #32
1a006446:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00644a:	f043 0301 	orr.w	r3, r3, #1
1a00644e:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a006452:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a006454:	4a05      	ldr	r2, [pc, #20]	; (1a00646c <Chip_Clock_Enable+0x30>)
1a006456:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00645a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00645e:	f043 0301 	orr.w	r3, r3, #1
1a006462:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a006466:	4770      	bx	lr
1a006468:	40051000 	.word	0x40051000
1a00646c:	40052000 	.word	0x40052000

1a006470 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a006470:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a006472:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a006476:	d309      	bcc.n	1a00648c <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a006478:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a00647c:	4a0d      	ldr	r2, [pc, #52]	; (1a0064b4 <Chip_Clock_GetRate+0x44>)
1a00647e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a006482:	f014 0f01 	tst.w	r4, #1
1a006486:	d107      	bne.n	1a006498 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a006488:	2000      	movs	r0, #0
	}

	return rate;
}
1a00648a:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a00648c:	f100 0320 	add.w	r3, r0, #32
1a006490:	4a09      	ldr	r2, [pc, #36]	; (1a0064b8 <Chip_Clock_GetRate+0x48>)
1a006492:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a006496:	e7f4      	b.n	1a006482 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a006498:	f7ff fe20 	bl	1a0060dc <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a00649c:	f7ff ffa9 	bl	1a0063f2 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a0064a0:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a0064a4:	d103      	bne.n	1a0064ae <Chip_Clock_GetRate+0x3e>
			div = 1;
1a0064a6:	2301      	movs	r3, #1
		rate = rate / div;
1a0064a8:	fbb0 f0f3 	udiv	r0, r0, r3
1a0064ac:	e7ed      	b.n	1a00648a <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a0064ae:	2302      	movs	r3, #2
1a0064b0:	e7fa      	b.n	1a0064a8 <Chip_Clock_GetRate+0x38>
1a0064b2:	bf00      	nop
1a0064b4:	40052000 	.word	0x40052000
1a0064b8:	40051000 	.word	0x40051000

1a0064bc <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0064bc:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0064be:	2069      	movs	r0, #105	; 0x69
1a0064c0:	f7ff ffd6 	bl	1a006470 <Chip_Clock_GetRate>
1a0064c4:	4b01      	ldr	r3, [pc, #4]	; (1a0064cc <SystemCoreClockUpdate+0x10>)
1a0064c6:	6018      	str	r0, [r3, #0]
}
1a0064c8:	bd08      	pop	{r3, pc}
1a0064ca:	bf00      	nop
1a0064cc:	100034f0 	.word	0x100034f0

1a0064d0 <Chip_RTC_GetFullTime>:
	pRTC->CCR = ccr_val;
}

/* Get full time from the RTC peripheral */
void Chip_RTC_GetFullTime(LPC_RTC_T *pRTC, RTC_TIME_T *pFullTime)
{
1a0064d0:	b410      	push	{r4}
	RTC_TIMEINDEX_T i;
	uint32_t secs = 0xFF;
1a0064d2:	24ff      	movs	r4, #255	; 0xff

	/* Read full time, but verify second tick didn't change during the read. If
	   it did, re-read the time again so it will be consistent across all fields. */
	while (secs != pRTC->TIME[RTC_TIMETYPE_SECOND]) {
1a0064d4:	e009      	b.n	1a0064ea <Chip_RTC_GetFullTime+0x1a>
		secs = pFullTime->time[RTC_TIMETYPE_SECOND] = pRTC->TIME[RTC_TIMETYPE_SECOND];
		for (i = RTC_TIMETYPE_MINUTE; i < RTC_TIMETYPE_LAST; i++) {
			pFullTime->time[i] = pRTC->TIME[i];
1a0064d6:	f103 0208 	add.w	r2, r3, #8
1a0064da:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
1a0064de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (i = RTC_TIMETYPE_MINUTE; i < RTC_TIMETYPE_LAST; i++) {
1a0064e2:	3301      	adds	r3, #1
1a0064e4:	b2db      	uxtb	r3, r3
1a0064e6:	2b07      	cmp	r3, #7
1a0064e8:	d9f5      	bls.n	1a0064d6 <Chip_RTC_GetFullTime+0x6>
	while (secs != pRTC->TIME[RTC_TIMETYPE_SECOND]) {
1a0064ea:	6a03      	ldr	r3, [r0, #32]
1a0064ec:	42a3      	cmp	r3, r4
1a0064ee:	d003      	beq.n	1a0064f8 <Chip_RTC_GetFullTime+0x28>
		secs = pFullTime->time[RTC_TIMETYPE_SECOND] = pRTC->TIME[RTC_TIMETYPE_SECOND];
1a0064f0:	6a04      	ldr	r4, [r0, #32]
1a0064f2:	600c      	str	r4, [r1, #0]
		for (i = RTC_TIMETYPE_MINUTE; i < RTC_TIMETYPE_LAST; i++) {
1a0064f4:	2301      	movs	r3, #1
1a0064f6:	e7f6      	b.n	1a0064e6 <Chip_RTC_GetFullTime+0x16>
		}
	}
}
1a0064f8:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0064fc:	4770      	bx	lr

1a0064fe <Chip_SCT_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize SCT */
void Chip_SCT_Init(LPC_SCT_T *pSCT)
{
1a0064fe:	b508      	push	{r3, lr}
	Chip_Clock_EnableOpts(CLK_MX_SCT, true, true, 1);
1a006500:	2301      	movs	r3, #1
1a006502:	461a      	mov	r2, r3
1a006504:	4619      	mov	r1, r3
1a006506:	206d      	movs	r0, #109	; 0x6d
1a006508:	f7ff ff7a 	bl	1a006400 <Chip_Clock_EnableOpts>
}
1a00650c:	bd08      	pop	{r3, pc}

1a00650e <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a00650e:	4770      	bx	lr

1a006510 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a006510:	b570      	push	{r4, r5, r6, lr}
1a006512:	b08a      	sub	sp, #40	; 0x28
1a006514:	4605      	mov	r5, r0
1a006516:	460e      	mov	r6, r1
1a006518:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a00651a:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00651e:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a006520:	2806      	cmp	r0, #6
1a006522:	d018      	beq.n	1a006556 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a006524:	2300      	movs	r3, #0
1a006526:	2201      	movs	r2, #1
1a006528:	4629      	mov	r1, r5
1a00652a:	2004      	movs	r0, #4
1a00652c:	f7ff ff22 	bl	1a006374 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a006530:	4a49      	ldr	r2, [pc, #292]	; (1a006658 <Chip_SetupCoreClock+0x148>)
1a006532:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a006534:	f043 0301 	orr.w	r3, r3, #1
1a006538:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a00653a:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a00653e:	a901      	add	r1, sp, #4
1a006540:	4630      	mov	r0, r6
1a006542:	f7ff fe8f 	bl	1a006264 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a006546:	4b45      	ldr	r3, [pc, #276]	; (1a00665c <Chip_SetupCoreClock+0x14c>)
1a006548:	429e      	cmp	r6, r3
1a00654a:	d916      	bls.n	1a00657a <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a00654c:	9b01      	ldr	r3, [sp, #4]
1a00654e:	f013 0f40 	tst.w	r3, #64	; 0x40
1a006552:	d003      	beq.n	1a00655c <Chip_SetupCoreClock+0x4c>
1a006554:	e7fe      	b.n	1a006554 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a006556:	f7ff fde7 	bl	1a006128 <Chip_Clock_EnableCrystal>
1a00655a:	e7e3      	b.n	1a006524 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a00655c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a006560:	d005      	beq.n	1a00656e <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a006562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a006566:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a006568:	2500      	movs	r5, #0
			direct = 1;
1a00656a:	2601      	movs	r6, #1
1a00656c:	e007      	b.n	1a00657e <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a00656e:	9b04      	ldr	r3, [sp, #16]
1a006570:	3301      	adds	r3, #1
1a006572:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a006574:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a006576:	2600      	movs	r6, #0
1a006578:	e001      	b.n	1a00657e <Chip_SetupCoreClock+0x6e>
1a00657a:	2500      	movs	r5, #0
1a00657c:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00657e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a006582:	9b01      	ldr	r3, [sp, #4]
1a006584:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a006588:	9a05      	ldr	r2, [sp, #20]
1a00658a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00658e:	9a03      	ldr	r2, [sp, #12]
1a006590:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a006594:	9a04      	ldr	r2, [sp, #16]
1a006596:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00659a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00659e:	4a2e      	ldr	r2, [pc, #184]	; (1a006658 <Chip_SetupCoreClock+0x148>)
1a0065a0:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0065a2:	4b2d      	ldr	r3, [pc, #180]	; (1a006658 <Chip_SetupCoreClock+0x148>)
1a0065a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0065a6:	f013 0f01 	tst.w	r3, #1
1a0065aa:	d0fa      	beq.n	1a0065a2 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0065ac:	2300      	movs	r3, #0
1a0065ae:	2201      	movs	r2, #1
1a0065b0:	2109      	movs	r1, #9
1a0065b2:	2004      	movs	r0, #4
1a0065b4:	f7ff fede 	bl	1a006374 <Chip_Clock_SetBaseClock>

	if (direct) {
1a0065b8:	b1fe      	cbz	r6, 1a0065fa <Chip_SetupCoreClock+0xea>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0065ba:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0065be:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a0065c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0065c2:	1e5a      	subs	r2, r3, #1
1a0065c4:	9209      	str	r2, [sp, #36]	; 0x24
1a0065c6:	2b00      	cmp	r3, #0
1a0065c8:	d1fa      	bne.n	1a0065c0 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a0065ca:	9b01      	ldr	r3, [sp, #4]
1a0065cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0065d0:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0065d2:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0065d6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0065da:	9a05      	ldr	r2, [sp, #20]
1a0065dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0065e0:	9a03      	ldr	r2, [sp, #12]
1a0065e2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0065e6:	9a04      	ldr	r2, [sp, #16]
1a0065e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0065ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0065f0:	4a19      	ldr	r2, [pc, #100]	; (1a006658 <Chip_SetupCoreClock+0x148>)
1a0065f2:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0065f4:	b36c      	cbz	r4, 1a006652 <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0065f6:	2400      	movs	r4, #0
1a0065f8:	e029      	b.n	1a00664e <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a0065fa:	2d00      	cmp	r5, #0
1a0065fc:	d0fa      	beq.n	1a0065f4 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0065fe:	f24c 3350 	movw	r3, #50000	; 0xc350
1a006602:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a006604:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a006606:	1e5a      	subs	r2, r3, #1
1a006608:	9209      	str	r2, [sp, #36]	; 0x24
1a00660a:	2b00      	cmp	r3, #0
1a00660c:	d1fa      	bne.n	1a006604 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a00660e:	9b04      	ldr	r3, [sp, #16]
1a006610:	1e5a      	subs	r2, r3, #1
1a006612:	9204      	str	r2, [sp, #16]
1a006614:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a006618:	9b01      	ldr	r3, [sp, #4]
1a00661a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a00661e:	9905      	ldr	r1, [sp, #20]
1a006620:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a006624:	9903      	ldr	r1, [sp, #12]
1a006626:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a00662a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00662e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a006632:	4a09      	ldr	r2, [pc, #36]	; (1a006658 <Chip_SetupCoreClock+0x148>)
1a006634:	6453      	str	r3, [r2, #68]	; 0x44
1a006636:	e7dd      	b.n	1a0065f4 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a006638:	4809      	ldr	r0, [pc, #36]	; (1a006660 <Chip_SetupCoreClock+0x150>)
1a00663a:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00663e:	78cb      	ldrb	r3, [r1, #3]
1a006640:	788a      	ldrb	r2, [r1, #2]
1a006642:	7849      	ldrb	r1, [r1, #1]
1a006644:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a006648:	f7ff fe94 	bl	1a006374 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00664c:	3401      	adds	r4, #1
1a00664e:	2c11      	cmp	r4, #17
1a006650:	d9f2      	bls.n	1a006638 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a006652:	b00a      	add	sp, #40	; 0x28
1a006654:	bd70      	pop	{r4, r5, r6, pc}
1a006656:	bf00      	nop
1a006658:	40050000 	.word	0x40050000
1a00665c:	068e7780 	.word	0x068e7780
1a006660:	1a008cc4 	.word	0x1a008cc4

1a006664 <Chip_SCTPWM_SetOutPin>:
 * Public functions
 ****************************************************************************/

/* Setup the OUTPUT pin corresponding to the PWM index */
void Chip_SCTPWM_SetOutPin(LPC_SCT_T *pSCT, uint8_t index, uint8_t pin)
{
1a006664:	b430      	push	{r4, r5}
	int ix = (int) index;
	pSCT->EVENT[ix].CTRL = index | (1 << 12);
1a006666:	f441 5580 	orr.w	r5, r1, #4096	; 0x1000
1a00666a:	f101 0360 	add.w	r3, r1, #96	; 0x60
1a00666e:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
1a006672:	6065      	str	r5, [r4, #4]
	pSCT->EVENT[ix].STATE = 1;
1a006674:	2401      	movs	r4, #1
1a006676:	f840 4033 	str.w	r4, [r0, r3, lsl #3]
	pSCT->OUT[pin].SET = 1;
1a00667a:	f102 03a0 	add.w	r3, r2, #160	; 0xa0
1a00667e:	f840 4033 	str.w	r4, [r0, r3, lsl #3]
	pSCT->OUT[pin].CLR = 1 << ix;
1a006682:	fa04 f101 	lsl.w	r1, r4, r1
1a006686:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
1a00668a:	6059      	str	r1, [r3, #4]

	/* Clear the output in-case of conflict */
	pSCT->RES = (pSCT->RES & ~(3 << (pin << 1))) | (0x01 << (pin << 1));
1a00668c:	6d81      	ldr	r1, [r0, #88]	; 0x58
1a00668e:	40a2      	lsls	r2, r4
1a006690:	2303      	movs	r3, #3
1a006692:	4093      	lsls	r3, r2
1a006694:	43db      	mvns	r3, r3
1a006696:	4019      	ands	r1, r3
1a006698:	4094      	lsls	r4, r2
1a00669a:	430c      	orrs	r4, r1
1a00669c:	6584      	str	r4, [r0, #88]	; 0x58

	/* Set and Clear do not depend on direction */
	pSCT->OUTPUTDIRCTRL = (pSCT->OUTPUTDIRCTRL & ~(3 << (pin << 1)));
1a00669e:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a0066a0:	4013      	ands	r3, r2
1a0066a2:	6543      	str	r3, [r0, #84]	; 0x54
}
1a0066a4:	bc30      	pop	{r4, r5}
1a0066a6:	4770      	bx	lr

1a0066a8 <Chip_SCTPWM_SetRate>:

/* Set the PWM frequency */
void Chip_SCTPWM_SetRate(LPC_SCT_T *pSCT, uint32_t freq)
{
1a0066a8:	b538      	push	{r3, r4, r5, lr}
1a0066aa:	4604      	mov	r4, r0
1a0066ac:	460d      	mov	r5, r1
	uint32_t rate;

	rate = Chip_Clock_GetRate(CLK_MX_SCT) / freq;;
1a0066ae:	206d      	movs	r0, #109	; 0x6d
1a0066b0:	f7ff fede 	bl	1a006470 <Chip_Clock_GetRate>
1a0066b4:	fbb0 f0f5 	udiv	r0, r0, r5
 * @param	value	: Value (ORed value of SCT_CTRL_* bits)
 * @return	Nothing
 */
STATIC INLINE void Chip_SCT_SetControl(LPC_SCT_T *pSCT, uint32_t value)
{
	pSCT->CTRL_U |= value;
1a0066b8:	6863      	ldr	r3, [r4, #4]
1a0066ba:	f043 1304 	orr.w	r3, r3, #262148	; 0x40004
1a0066be:	6063      	str	r3, [r4, #4]
1a0066c0:	6863      	ldr	r3, [r4, #4]
1a0066c2:	f043 1308 	orr.w	r3, r3, #524296	; 0x80008
1a0066c6:	6063      	str	r3, [r4, #4]

	/* Stop the SCT before configuration */
	Chip_SCTPWM_Stop(pSCT);

	/* Set MATCH0 for max limit */
	pSCT->REGMODE_L = 0;
1a0066c8:	2300      	movs	r3, #0
1a0066ca:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
	pSCT->REGMODE_H = 0;
1a0066ce:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
	pSCT->MATCH[n].U = value;
1a0066d2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 * @param	value	: The 32-bit match count reload value
 * @return	Nothing
 */
STATIC INLINE void Chip_SCT_SetMatchReload(LPC_SCT_T *pSCT, CHIP_SCT_MATCH_REG_T n, uint32_t value)
{
	pSCT->MATCHREL[n].U = value;
1a0066d6:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
	Chip_SCT_SetMatchCount(pSCT, SCT_MATCH_0, 0);
	Chip_SCT_SetMatchReload(pSCT, SCT_MATCH_0, rate);
	pSCT->EVENT[0].CTRL = 1 << 12;
1a0066da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
1a0066de:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	pSCT->EVENT[0].STATE = 1;
1a0066e2:	2301      	movs	r3, #1
1a0066e4:	f8c4 3300 	str.w	r3, [r4, #768]	; 0x300
	pSCT->LIMIT_L = 1;
1a0066e8:	8123      	strh	r3, [r4, #8]
	pSCT->CONFIG = value;
1a0066ea:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
1a0066ee:	6023      	str	r3, [r4, #0]

	/* Set SCT Counter to count 32-bits and reset to 0 after reaching MATCH0 */
	Chip_SCT_Config(pSCT, SCT_CONFIG_32BIT_COUNTER | SCT_CONFIG_AUTOLIMIT_L);
}
1a0066f0:	bd38      	pop	{r3, r4, r5, pc}

1a0066f2 <SSP_Write2BFifo>:
 * Private functions
 ****************************************************************************/

STATIC void SSP_Write2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
1a0066f2:	680b      	ldr	r3, [r1, #0]
1a0066f4:	b133      	cbz	r3, 1a006704 <SSP_Write2BFifo+0x12>
		Chip_SSP_SendFrame(pSSP, (*(uint16_t *) ((uint32_t) xf_setup->tx_data +
												 xf_setup->tx_cnt)));
1a0066f6:	684a      	ldr	r2, [r1, #4]
		Chip_SSP_SendFrame(pSSP, (*(uint16_t *) ((uint32_t) xf_setup->tx_data +
1a0066f8:	5a9b      	ldrh	r3, [r3, r2]
	pSSP->DR = SSP_DR_BITMASK(tx_data);
1a0066fa:	6083      	str	r3, [r0, #8]
	}
	else {
		Chip_SSP_SendFrame(pSSP, 0xFFFF);
	}

	xf_setup->tx_cnt += 2;
1a0066fc:	684b      	ldr	r3, [r1, #4]
1a0066fe:	3302      	adds	r3, #2
1a006700:	604b      	str	r3, [r1, #4]
}
1a006702:	4770      	bx	lr
1a006704:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a006708:	6083      	str	r3, [r0, #8]
1a00670a:	e7f7      	b.n	1a0066fc <SSP_Write2BFifo+0xa>

1a00670c <SSP_Write1BFifo>:

/** SSP macro: write 1 bytes to FIFO buffer */
STATIC void SSP_Write1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
1a00670c:	680b      	ldr	r3, [r1, #0]
1a00670e:	b133      	cbz	r3, 1a00671e <SSP_Write1BFifo+0x12>
		Chip_SSP_SendFrame(pSSP, (*(uint8_t *) ((uint32_t) xf_setup->tx_data + xf_setup->tx_cnt)));
1a006710:	684a      	ldr	r2, [r1, #4]
1a006712:	5c9b      	ldrb	r3, [r3, r2]
1a006714:	6083      	str	r3, [r0, #8]
	}
	else {
		Chip_SSP_SendFrame(pSSP, 0xFF);
	}

	xf_setup->tx_cnt++;
1a006716:	684b      	ldr	r3, [r1, #4]
1a006718:	3301      	adds	r3, #1
1a00671a:	604b      	str	r3, [r1, #4]
}
1a00671c:	4770      	bx	lr
1a00671e:	23ff      	movs	r3, #255	; 0xff
1a006720:	6083      	str	r3, [r0, #8]
1a006722:	e7f8      	b.n	1a006716 <SSP_Write1BFifo+0xa>

1a006724 <SSP_Read2BFifo>:
	return (pSSP->SR & Stat) ? SET : RESET;
1a006724:	68c3      	ldr	r3, [r0, #12]
/** SSP macro: read 1 bytes from FIFO buffer */
STATIC void SSP_Read2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a006726:	f013 0f04 	tst.w	r3, #4
1a00672a:	d01b      	beq.n	1a006764 <SSP_Read2BFifo+0x40>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a00672c:	68ca      	ldr	r2, [r1, #12]
1a00672e:	690b      	ldr	r3, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a006730:	429a      	cmp	r2, r3
1a006732:	d216      	bcs.n	1a006762 <SSP_Read2BFifo+0x3e>
{
1a006734:	b410      	push	{r4}
1a006736:	e00a      	b.n	1a00674e <SSP_Read2BFifo+0x2a>
		rDat = Chip_SSP_ReceiveFrame(pSSP);
		if (xf_setup->rx_data) {
			*(uint16_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
		}

		xf_setup->rx_cnt += 2;
1a006738:	68cb      	ldr	r3, [r1, #12]
1a00673a:	3302      	adds	r3, #2
1a00673c:	60cb      	str	r3, [r1, #12]
1a00673e:	68c3      	ldr	r3, [r0, #12]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a006740:	f013 0f04 	tst.w	r3, #4
1a006744:	d00a      	beq.n	1a00675c <SSP_Read2BFifo+0x38>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a006746:	68ca      	ldr	r2, [r1, #12]
1a006748:	690b      	ldr	r3, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a00674a:	429a      	cmp	r2, r3
1a00674c:	d206      	bcs.n	1a00675c <SSP_Read2BFifo+0x38>
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a00674e:	6883      	ldr	r3, [r0, #8]
1a006750:	b29b      	uxth	r3, r3
		if (xf_setup->rx_data) {
1a006752:	688c      	ldr	r4, [r1, #8]
1a006754:	2c00      	cmp	r4, #0
1a006756:	d0ef      	beq.n	1a006738 <SSP_Read2BFifo+0x14>
			*(uint16_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
1a006758:	52a3      	strh	r3, [r4, r2]
1a00675a:	e7ed      	b.n	1a006738 <SSP_Read2BFifo+0x14>
	}
}
1a00675c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a006760:	4770      	bx	lr
1a006762:	4770      	bx	lr
1a006764:	4770      	bx	lr

1a006766 <SSP_Read1BFifo>:
	return (pSSP->SR & Stat) ? SET : RESET;
1a006766:	68c3      	ldr	r3, [r0, #12]
/** SSP macro: read 2 bytes from FIFO buffer */
STATIC void SSP_Read1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a006768:	f013 0f04 	tst.w	r3, #4
1a00676c:	d01a      	beq.n	1a0067a4 <SSP_Read1BFifo+0x3e>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a00676e:	68cb      	ldr	r3, [r1, #12]
1a006770:	690a      	ldr	r2, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a006772:	4293      	cmp	r3, r2
1a006774:	d215      	bcs.n	1a0067a2 <SSP_Read1BFifo+0x3c>
{
1a006776:	b410      	push	{r4}
1a006778:	e00a      	b.n	1a006790 <SSP_Read1BFifo+0x2a>
		rDat = Chip_SSP_ReceiveFrame(pSSP);
		if (xf_setup->rx_data) {
			*(uint8_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
		}

		xf_setup->rx_cnt++;
1a00677a:	68cb      	ldr	r3, [r1, #12]
1a00677c:	3301      	adds	r3, #1
1a00677e:	60cb      	str	r3, [r1, #12]
1a006780:	68c3      	ldr	r3, [r0, #12]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a006782:	f013 0f04 	tst.w	r3, #4
1a006786:	d009      	beq.n	1a00679c <SSP_Read1BFifo+0x36>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a006788:	68cb      	ldr	r3, [r1, #12]
1a00678a:	690a      	ldr	r2, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a00678c:	4293      	cmp	r3, r2
1a00678e:	d205      	bcs.n	1a00679c <SSP_Read1BFifo+0x36>
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a006790:	6884      	ldr	r4, [r0, #8]
		if (xf_setup->rx_data) {
1a006792:	688a      	ldr	r2, [r1, #8]
1a006794:	2a00      	cmp	r2, #0
1a006796:	d0f0      	beq.n	1a00677a <SSP_Read1BFifo+0x14>
			*(uint8_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
1a006798:	54d4      	strb	r4, [r2, r3]
1a00679a:	e7ee      	b.n	1a00677a <SSP_Read1BFifo+0x14>
	}
}
1a00679c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0067a0:	4770      	bx	lr
1a0067a2:	4770      	bx	lr
1a0067a4:	4770      	bx	lr
1a0067a6:	Address 0x000000001a0067a6 is out of bounds.


1a0067a8 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0067a8:	4b03      	ldr	r3, [pc, #12]	; (1a0067b8 <Chip_SSP_GetClockIndex+0x10>)
1a0067aa:	4298      	cmp	r0, r3
1a0067ac:	d001      	beq.n	1a0067b2 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0067ae:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0067b0:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a0067b2:	20a5      	movs	r0, #165	; 0xa5
1a0067b4:	4770      	bx	lr
1a0067b6:	bf00      	nop
1a0067b8:	400c5000 	.word	0x400c5000

1a0067bc <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0067bc:	4b04      	ldr	r3, [pc, #16]	; (1a0067d0 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0067be:	4298      	cmp	r0, r3
1a0067c0:	d002      	beq.n	1a0067c8 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0067c2:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0067c6:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a0067c8:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0067cc:	4770      	bx	lr
1a0067ce:	bf00      	nop
1a0067d0:	400c5000 	.word	0x400c5000

1a0067d4 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0067d4:	6803      	ldr	r3, [r0, #0]
1a0067d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a0067da:	0209      	lsls	r1, r1, #8
1a0067dc:	b289      	uxth	r1, r1
1a0067de:	4319      	orrs	r1, r3
1a0067e0:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a0067e2:	6102      	str	r2, [r0, #16]
}
1a0067e4:	4770      	bx	lr

1a0067e6 <Chip_SSP_RWFrames_Blocking>:

/* SSP Polling Read/Write in blocking mode */
uint32_t Chip_SSP_RWFrames_Blocking(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
1a0067e6:	b538      	push	{r3, r4, r5, lr}
1a0067e8:	4604      	mov	r4, r0
1a0067ea:	460d      	mov	r5, r1
	/* Clear all remaining frames in RX FIFO */
	while (Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE)) {
1a0067ec:	e000      	b.n	1a0067f0 <Chip_SSP_RWFrames_Blocking+0xa>
1a0067ee:	68a3      	ldr	r3, [r4, #8]
	return (pSSP->SR & Stat) ? SET : RESET;
1a0067f0:	68e3      	ldr	r3, [r4, #12]
1a0067f2:	f013 0f04 	tst.w	r3, #4
1a0067f6:	d1fa      	bne.n	1a0067ee <Chip_SSP_RWFrames_Blocking+0x8>
	pSSP->ICR = IntClear;
1a0067f8:	2303      	movs	r3, #3
1a0067fa:	6223      	str	r3, [r4, #32]
	return SSP_CR0_DSS(pSSP->CR0);
1a0067fc:	6823      	ldr	r3, [r4, #0]
1a0067fe:	f003 030f 	and.w	r3, r3, #15
	}

	/* Clear status */
	Chip_SSP_ClearIntPending(pSSP, SSP_INT_CLEAR_BITMASK);

	if (Chip_SSP_GetDataSize(pSSP) > SSP_BITS_8) {
1a006802:	2b07      	cmp	r3, #7
1a006804:	d808      	bhi.n	1a006818 <Chip_SSP_RWFrames_Blocking+0x32>
1a006806:	e022      	b.n	1a00684e <Chip_SSP_RWFrames_Blocking+0x68>
	return (pSSP->RIS & RawInt) ? SET : RESET;
1a006808:	69a3      	ldr	r3, [r4, #24]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
				SSP_Write2BFifo(pSSP, xf_setup);
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
1a00680a:	f013 0f01 	tst.w	r3, #1
1a00680e:	d139      	bne.n	1a006884 <Chip_SSP_RWFrames_Blocking+0x9e>
				return ERROR;
			}

			/* Check for any data available in RX FIFO */
			SSP_Read2BFifo(pSSP, xf_setup);
1a006810:	4629      	mov	r1, r5
1a006812:	4620      	mov	r0, r4
1a006814:	f7ff ff86 	bl	1a006724 <SSP_Read2BFifo>
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
1a006818:	68ea      	ldr	r2, [r5, #12]
1a00681a:	692b      	ldr	r3, [r5, #16]
1a00681c:	429a      	cmp	r2, r3
1a00681e:	d302      	bcc.n	1a006826 <Chip_SSP_RWFrames_Blocking+0x40>
1a006820:	686a      	ldr	r2, [r5, #4]
1a006822:	4293      	cmp	r3, r2
1a006824:	d926      	bls.n	1a006874 <Chip_SSP_RWFrames_Blocking+0x8e>
	return (pSSP->SR & Stat) ? SET : RESET;
1a006826:	68e2      	ldr	r2, [r4, #12]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
1a006828:	f012 0f02 	tst.w	r2, #2
1a00682c:	d0ec      	beq.n	1a006808 <Chip_SSP_RWFrames_Blocking+0x22>
1a00682e:	686a      	ldr	r2, [r5, #4]
1a006830:	429a      	cmp	r2, r3
1a006832:	d2e9      	bcs.n	1a006808 <Chip_SSP_RWFrames_Blocking+0x22>
				SSP_Write2BFifo(pSSP, xf_setup);
1a006834:	4629      	mov	r1, r5
1a006836:	4620      	mov	r0, r4
1a006838:	f7ff ff5b 	bl	1a0066f2 <SSP_Write2BFifo>
1a00683c:	e7e4      	b.n	1a006808 <Chip_SSP_RWFrames_Blocking+0x22>
	return (pSSP->RIS & RawInt) ? SET : RESET;
1a00683e:	69a3      	ldr	r3, [r4, #24]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
				SSP_Write1BFifo(pSSP, xf_setup);
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
1a006840:	f013 0f01 	tst.w	r3, #1
1a006844:	d120      	bne.n	1a006888 <Chip_SSP_RWFrames_Blocking+0xa2>
				return ERROR;
			}

			/* Check for any data available in RX FIFO */
			SSP_Read1BFifo(pSSP, xf_setup);
1a006846:	4629      	mov	r1, r5
1a006848:	4620      	mov	r0, r4
1a00684a:	f7ff ff8c 	bl	1a006766 <SSP_Read1BFifo>
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
1a00684e:	68ea      	ldr	r2, [r5, #12]
1a006850:	692b      	ldr	r3, [r5, #16]
1a006852:	429a      	cmp	r2, r3
1a006854:	d302      	bcc.n	1a00685c <Chip_SSP_RWFrames_Blocking+0x76>
1a006856:	686a      	ldr	r2, [r5, #4]
1a006858:	4293      	cmp	r3, r2
1a00685a:	d90b      	bls.n	1a006874 <Chip_SSP_RWFrames_Blocking+0x8e>
	return (pSSP->SR & Stat) ? SET : RESET;
1a00685c:	68e2      	ldr	r2, [r4, #12]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
1a00685e:	f012 0f02 	tst.w	r2, #2
1a006862:	d0ec      	beq.n	1a00683e <Chip_SSP_RWFrames_Blocking+0x58>
1a006864:	686a      	ldr	r2, [r5, #4]
1a006866:	429a      	cmp	r2, r3
1a006868:	d2e9      	bcs.n	1a00683e <Chip_SSP_RWFrames_Blocking+0x58>
				SSP_Write1BFifo(pSSP, xf_setup);
1a00686a:	4629      	mov	r1, r5
1a00686c:	4620      	mov	r0, r4
1a00686e:	f7ff ff4d 	bl	1a00670c <SSP_Write1BFifo>
1a006872:	e7e4      	b.n	1a00683e <Chip_SSP_RWFrames_Blocking+0x58>
		}
	}
	if (xf_setup->tx_data) {
1a006874:	682b      	ldr	r3, [r5, #0]
1a006876:	b10b      	cbz	r3, 1a00687c <Chip_SSP_RWFrames_Blocking+0x96>
		return xf_setup->tx_cnt;
1a006878:	6868      	ldr	r0, [r5, #4]
1a00687a:	e004      	b.n	1a006886 <Chip_SSP_RWFrames_Blocking+0xa0>
	}
	else if (xf_setup->rx_data) {
1a00687c:	68ab      	ldr	r3, [r5, #8]
1a00687e:	b12b      	cbz	r3, 1a00688c <Chip_SSP_RWFrames_Blocking+0xa6>
		return xf_setup->rx_cnt;
1a006880:	68e8      	ldr	r0, [r5, #12]
1a006882:	e000      	b.n	1a006886 <Chip_SSP_RWFrames_Blocking+0xa0>
				return ERROR;
1a006884:	2000      	movs	r0, #0
	}

	return 0;
}
1a006886:	bd38      	pop	{r3, r4, r5, pc}
				return ERROR;
1a006888:	2000      	movs	r0, #0
1a00688a:	e7fc      	b.n	1a006886 <Chip_SSP_RWFrames_Blocking+0xa0>
	return 0;
1a00688c:	2000      	movs	r0, #0
1a00688e:	e7fa      	b.n	1a006886 <Chip_SSP_RWFrames_Blocking+0xa0>

1a006890 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a006890:	b570      	push	{r4, r5, r6, lr}
1a006892:	4606      	mov	r6, r0
1a006894:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a006896:	f7ff ff91 	bl	1a0067bc <Chip_SSP_GetPeriphClockIndex>
1a00689a:	f7ff fde9 	bl	1a006470 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a00689e:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a0068a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a0068a4:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a0068a6:	e000      	b.n	1a0068aa <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0068a8:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a0068aa:	42ab      	cmp	r3, r5
1a0068ac:	d90b      	bls.n	1a0068c6 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a0068ae:	1c4c      	adds	r4, r1, #1
1a0068b0:	fb02 f304 	mul.w	r3, r2, r4
1a0068b4:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0068b8:	429d      	cmp	r5, r3
1a0068ba:	d2f6      	bcs.n	1a0068aa <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a0068bc:	2cff      	cmp	r4, #255	; 0xff
1a0068be:	d9f3      	bls.n	1a0068a8 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a0068c0:	3202      	adds	r2, #2
				cr0_div = 0;
1a0068c2:	2100      	movs	r1, #0
1a0068c4:	e7f1      	b.n	1a0068aa <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a0068c6:	4630      	mov	r0, r6
1a0068c8:	f7ff ff84 	bl	1a0067d4 <Chip_SSP_SetClockRate>
}
1a0068cc:	bd70      	pop	{r4, r5, r6, pc}
1a0068ce:	Address 0x000000001a0068ce is out of bounds.


1a0068d0 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a0068d0:	b510      	push	{r4, lr}
1a0068d2:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a0068d4:	f7ff ff68 	bl	1a0067a8 <Chip_SSP_GetClockIndex>
1a0068d8:	f7ff fdb0 	bl	1a00643c <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0068dc:	4620      	mov	r0, r4
1a0068de:	f7ff ff6d 	bl	1a0067bc <Chip_SSP_GetPeriphClockIndex>
1a0068e2:	f7ff fdab 	bl	1a00643c <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0068e6:	6863      	ldr	r3, [r4, #4]
1a0068e8:	f023 0304 	bic.w	r3, r3, #4
1a0068ec:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0068ee:	6823      	ldr	r3, [r4, #0]
1a0068f0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0068f4:	f043 0307 	orr.w	r3, r3, #7
1a0068f8:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a0068fa:	4902      	ldr	r1, [pc, #8]	; (1a006904 <Chip_SSP_Init+0x34>)
1a0068fc:	4620      	mov	r0, r4
1a0068fe:	f7ff ffc7 	bl	1a006890 <Chip_SSP_SetBitRate>
}
1a006902:	bd10      	pop	{r4, pc}
1a006904:	000186a0 	.word	0x000186a0

1a006908 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a006908:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a00690a:	4a0b      	ldr	r2, [pc, #44]	; (1a006938 <SystemInit+0x30>)
1a00690c:	4b0b      	ldr	r3, [pc, #44]	; (1a00693c <SystemInit+0x34>)
1a00690e:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a006910:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a006914:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a006916:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a00691a:	2b20      	cmp	r3, #32
1a00691c:	d004      	beq.n	1a006928 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a00691e:	f7ff f989 	bl	1a005c34 <Board_SystemInit>
   Board_Init();
1a006922:	f7ff f90f 	bl	1a005b44 <Board_Init>
}
1a006926:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a006928:	4a04      	ldr	r2, [pc, #16]	; (1a00693c <SystemInit+0x34>)
1a00692a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a00692e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a006932:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a006936:	e7f2      	b.n	1a00691e <SystemInit+0x16>
1a006938:	1a000000 	.word	0x1a000000
1a00693c:	e000ed00 	.word	0xe000ed00

1a006940 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a006940:	4b04      	ldr	r3, [pc, #16]	; (1a006954 <cyclesCounterInit+0x14>)
1a006942:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a006944:	4a04      	ldr	r2, [pc, #16]	; (1a006958 <cyclesCounterInit+0x18>)
1a006946:	6813      	ldr	r3, [r2, #0]
1a006948:	f043 0301 	orr.w	r3, r3, #1
1a00694c:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a00694e:	2001      	movs	r0, #1
1a006950:	4770      	bx	lr
1a006952:	bf00      	nop
1a006954:	1000004c 	.word	0x1000004c
1a006958:	e0001000 	.word	0xe0001000

1a00695c <Sct_Init>:
 * @brief:   Initialize the SCT peripheral with the given frequency
 * @param:   frequency:   value in Hz
 * @note:   there can only be 1 frequency in all the SCT peripheral.
 */
void Sct_Init(uint32_t frequency)
{
1a00695c:	b510      	push	{r4, lr}
1a00695e:	4604      	mov	r4, r0
 * @param	pSCT	: The base of SCT peripheral on the chip
 * @return	None
 */
STATIC INLINE void Chip_SCTPWM_Init(LPC_SCT_T *pSCT)
{
	Chip_SCT_Init(pSCT);
1a006960:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
1a006964:	f7ff fdcb 	bl	1a0064fe <Chip_SCT_Init>
   /* Source: https://www.lpcware.com/content/faq/how-use-sct-standard-pwm-using-lpcopen */
   /* Initialize the SCT as PWM and set frequency */
   Chip_SCTPWM_Init(LPC_SCT);
   Chip_SCTPWM_SetRate(LPC_SCT, frequency);
1a006968:	4621      	mov	r1, r4
1a00696a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
1a00696e:	f7ff fe9b 	bl	1a0066a8 <Chip_SCTPWM_SetRate>
	pSCT->CTRL_U &= ~(value);
1a006972:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
1a006976:	6853      	ldr	r3, [r2, #4]
1a006978:	f023 1304 	bic.w	r3, r3, #262148	; 0x40004
1a00697c:	6053      	str	r3, [r2, #4]

   Chip_SCTPWM_Start(LPC_SCT);
}
1a00697e:	bd10      	pop	{r4, pc}

1a006980 <Sct_Uint8ToTicks>:
	return pSCT->MATCHREL[0].U;
1a006980:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a006984:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 * @param   value:   8bit value, from 0 to 255
 * @return   Equivalent in Ticks for the LPC4337
 */
uint32_t Sct_Uint8ToTicks(uint8_t value)
{
   return ( (Chip_SCTPWM_GetTicksPerCycle(LPC_SCT) * value)/ 255 );
1a006988:	fb03 f000 	mul.w	r0, r3, r0
1a00698c:	4b02      	ldr	r3, [pc, #8]	; (1a006998 <Sct_Uint8ToTicks+0x18>)
1a00698e:	fba3 3000 	umull	r3, r0, r3, r0
}
1a006992:	09c0      	lsrs	r0, r0, #7
1a006994:	4770      	bx	lr
1a006996:	bf00      	nop
1a006998:	80808081 	.word	0x80808081

1a00699c <Sct_SetDutyCycle>:
 * @param:	sctNumber:   pin where the pwm signal is generated
 * @param	value:   8bit value, from 0 to 255
 * @note   For the 'ticks' parameter, see function Sct_Uint8ToTicks
 */
void Sct_SetDutyCycle(uint8_t sctNumber, uint8_t value)
{
1a00699c:	b510      	push	{r4, lr}
   Chip_SCTPWM_SetDutyCycle(LPC_SCT, sctNumber+1, Sct_Uint8ToTicks(value));
1a00699e:	3001      	adds	r0, #1
1a0069a0:	b2c4      	uxtb	r4, r0
1a0069a2:	4608      	mov	r0, r1
1a0069a4:	f7ff ffec 	bl	1a006980 <Sct_Uint8ToTicks>
	pSCT->MATCHREL[n].U = value;
1a0069a8:	3480      	adds	r4, #128	; 0x80
1a0069aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a0069ae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
}
1a0069b2:	bd10      	pop	{r4, pc}

1a0069b4 <Sct_EnablePwmFor>:
{
1a0069b4:	b510      	push	{r4, lr}
1a0069b6:	4604      	mov	r4, r0
   Chip_SCU_PinMux(SCTdataList[sctNumber].port , SCTdataList[sctNumber].pin , SCU_MODE_INACT , CTOUT_FUNC);
1a0069b8:	4a0f      	ldr	r2, [pc, #60]	; (1a0069f8 <Sct_EnablePwmFor+0x44>)
1a0069ba:	f912 3010 	ldrsb.w	r3, [r2, r0, lsl #1]
1a0069be:	b2db      	uxtb	r3, r3
1a0069c0:	eb02 0240 	add.w	r2, r2, r0, lsl #1
1a0069c4:	f992 2001 	ldrsb.w	r2, [r2, #1]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0069c8:	015b      	lsls	r3, r3, #5
1a0069ca:	fa53 f382 	uxtab	r3, r3, r2
1a0069ce:	4a0b      	ldr	r2, [pc, #44]	; (1a0069fc <Sct_EnablePwmFor+0x48>)
1a0069d0:	2111      	movs	r1, #17
1a0069d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   Chip_SCTPWM_SetOutPin(LPC_SCT, sctNumber+1, sctNumber);
1a0069d6:	1c41      	adds	r1, r0, #1
1a0069d8:	4602      	mov	r2, r0
1a0069da:	b2c9      	uxtb	r1, r1
1a0069dc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
1a0069e0:	f7ff fe40 	bl	1a006664 <Chip_SCTPWM_SetOutPin>
1a0069e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a0069e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   Sct_SetDutyCycle(sctNumber, Chip_SCTPWM_PercentageToTicks(LPC_SCT,0));
1a0069ec:	2100      	movs	r1, #0
1a0069ee:	4620      	mov	r0, r4
1a0069f0:	f7ff ffd4 	bl	1a00699c <Sct_SetDutyCycle>
}
1a0069f4:	bd10      	pop	{r4, pc}
1a0069f6:	bf00      	nop
1a0069f8:	1a008d0c 	.word	0x1a008d0c
1a0069fc:	40086000 	.word	0x40086000

1a006a00 <Sct_GetDutyCycle>:
/* TODO: function not tested */
uint8_t Sct_GetDutyCycle(uint8_t sctNumber)
{
   uint8_t value = 0;

   value = (uint8_t) ((Chip_SCTPWM_GetDutyCycle(LPC_SCT, sctNumber+1)*255)/Chip_SCTPWM_GetTicksPerCycle(LPC_SCT));
1a006a00:	3001      	adds	r0, #1
1a006a02:	b2c0      	uxtb	r0, r0
	return pSCT->MATCHREL[index].U;
1a006a04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a006a08:	3080      	adds	r0, #128	; 0x80
1a006a0a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
1a006a0e:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
	return pSCT->MATCHREL[0].U;
1a006a12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
1a006a16:	fbb0 f0f3 	udiv	r0, r0, r3

   return value;
}
1a006a1a:	b2c0      	uxtb	r0, r0
1a006a1c:	4770      	bx	lr
1a006a1e:	Address 0x000000001a006a1e is out of bounds.


1a006a20 <uartRxReady>:
//-------------------------------------------------------------

// Return TRUE if have unread data in RX FIFO
bool_t uartRxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
1a006a20:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a006a24:	0083      	lsls	r3, r0, #2
1a006a26:	4a03      	ldr	r2, [pc, #12]	; (1a006a34 <uartRxReady+0x14>)
1a006a28:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a006a2a:	6958      	ldr	r0, [r3, #20]
}
1a006a2c:	f000 0001 	and.w	r0, r0, #1
1a006a30:	4770      	bx	lr
1a006a32:	bf00      	nop
1a006a34:	1a008d28 	.word	0x1a008d28

1a006a38 <uartTxReady>:
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a006a38:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a006a3c:	0083      	lsls	r3, r0, #2
1a006a3e:	4a03      	ldr	r2, [pc, #12]	; (1a006a4c <uartTxReady+0x14>)
1a006a40:	58d3      	ldr	r3, [r2, r3]
1a006a42:	6958      	ldr	r0, [r3, #20]
}
1a006a44:	f000 0020 	and.w	r0, r0, #32
1a006a48:	4770      	bx	lr
1a006a4a:	bf00      	nop
1a006a4c:	1a008d28 	.word	0x1a008d28

1a006a50 <uartRxRead>:
// Read from RX FIFO
uint8_t uartRxRead( uartMap_t uart )
{
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a006a50:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a006a54:	0083      	lsls	r3, r0, #2
1a006a56:	4a02      	ldr	r2, [pc, #8]	; (1a006a60 <uartRxRead+0x10>)
1a006a58:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a006a5a:	6818      	ldr	r0, [r3, #0]
}
1a006a5c:	b2c0      	uxtb	r0, r0
1a006a5e:	4770      	bx	lr
1a006a60:	1a008d28 	.word	0x1a008d28

1a006a64 <uartTxWrite>:
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a006a64:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a006a68:	0083      	lsls	r3, r0, #2
1a006a6a:	4a02      	ldr	r2, [pc, #8]	; (1a006a74 <uartTxWrite+0x10>)
1a006a6c:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a006a6e:	6019      	str	r1, [r3, #0]
}
1a006a70:	4770      	bx	lr
1a006a72:	bf00      	nop
1a006a74:	1a008d28 	.word	0x1a008d28

1a006a78 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a006a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a006a7c:	4680      	mov	r8, r0
1a006a7e:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a006a80:	4c19      	ldr	r4, [pc, #100]	; (1a006ae8 <uartInit+0x70>)
1a006a82:	0045      	lsls	r5, r0, #1
1a006a84:	182a      	adds	r2, r5, r0
1a006a86:	0093      	lsls	r3, r2, #2
1a006a88:	18e6      	adds	r6, r4, r3
1a006a8a:	58e7      	ldr	r7, [r4, r3]
1a006a8c:	4638      	mov	r0, r7
1a006a8e:	f7ff f92b 	bl	1a005ce8 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a006a92:	4649      	mov	r1, r9
1a006a94:	4638      	mov	r0, r7
1a006a96:	f7ff f951 	bl	1a005d3c <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a006a9a:	2307      	movs	r3, #7
1a006a9c:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a006a9e:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a006aa0:	2301      	movs	r3, #1
1a006aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a006aa4:	7930      	ldrb	r0, [r6, #4]
1a006aa6:	7973      	ldrb	r3, [r6, #5]
1a006aa8:	79b2      	ldrb	r2, [r6, #6]
1a006aaa:	f042 0218 	orr.w	r2, r2, #24
1a006aae:	490f      	ldr	r1, [pc, #60]	; (1a006aec <uartInit+0x74>)
1a006ab0:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a006ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a006ab8:	79f0      	ldrb	r0, [r6, #7]
1a006aba:	7a33      	ldrb	r3, [r6, #8]
1a006abc:	7a72      	ldrb	r2, [r6, #9]
1a006abe:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a006ac2:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a006ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a006aca:	f1b8 0f01 	cmp.w	r8, #1
1a006ace:	d001      	beq.n	1a006ad4 <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a006ad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a006ad4:	4a06      	ldr	r2, [pc, #24]	; (1a006af0 <uartInit+0x78>)
1a006ad6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a006ad8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a006adc:	64d3      	str	r3, [r2, #76]	; 0x4c
1a006ade:	221a      	movs	r2, #26
1a006ae0:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a006ae4:	e7f4      	b.n	1a006ad0 <uartInit+0x58>
1a006ae6:	bf00      	nop
1a006ae8:	1a008d28 	.word	0x1a008d28
1a006aec:	40086000 	.word	0x40086000
1a006af0:	40081000 	.word	0x40081000

1a006af4 <uartReadByte>:
   }
}

// Read 1 byte from RX FIFO, check first if exist aviable data
bool_t uartReadByte( uartMap_t uart, uint8_t* receivedByte )
{
1a006af4:	b538      	push	{r3, r4, r5, lr}
1a006af6:	4605      	mov	r5, r0
1a006af8:	460c      	mov	r4, r1
   bool_t retVal = TRUE;
   if ( uartRxReady(uart) ) {
1a006afa:	f7ff ff91 	bl	1a006a20 <uartRxReady>
1a006afe:	4603      	mov	r3, r0
1a006b00:	b908      	cbnz	r0, 1a006b06 <uartReadByte+0x12>
      *receivedByte = uartRxRead(uart);
   } else {
      retVal = FALSE;
   }
   return retVal;
}
1a006b02:	4618      	mov	r0, r3
1a006b04:	bd38      	pop	{r3, r4, r5, pc}
      *receivedByte = uartRxRead(uart);
1a006b06:	4628      	mov	r0, r5
1a006b08:	f7ff ffa2 	bl	1a006a50 <uartRxRead>
1a006b0c:	7020      	strb	r0, [r4, #0]
   bool_t retVal = TRUE;
1a006b0e:	2301      	movs	r3, #1
1a006b10:	e7f7      	b.n	1a006b02 <uartReadByte+0xe>

1a006b12 <uartWriteByte>:

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a006b12:	b538      	push	{r3, r4, r5, lr}
1a006b14:	4604      	mov	r4, r0
1a006b16:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a006b18:	4620      	mov	r0, r4
1a006b1a:	f7ff ff8d 	bl	1a006a38 <uartTxReady>
1a006b1e:	2800      	cmp	r0, #0
1a006b20:	d0fa      	beq.n	1a006b18 <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a006b22:	4629      	mov	r1, r5
1a006b24:	4620      	mov	r0, r4
1a006b26:	f7ff ff9d 	bl	1a006a64 <uartTxWrite>
}
1a006b2a:	bd38      	pop	{r3, r4, r5, pc}

1a006b2c <uartWriteString>:

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a006b2c:	b538      	push	{r3, r4, r5, lr}
1a006b2e:	4605      	mov	r5, r0
1a006b30:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a006b32:	e003      	b.n	1a006b3c <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a006b34:	4628      	mov	r0, r5
1a006b36:	f7ff ffec 	bl	1a006b12 <uartWriteByte>
      str++;
1a006b3a:	3401      	adds	r4, #1
   while( *str != 0 ) {
1a006b3c:	7821      	ldrb	r1, [r4, #0]
1a006b3e:	2900      	cmp	r1, #0
1a006b40:	d1f8      	bne.n	1a006b34 <uartWriteString+0x8>
   }
}
1a006b42:	bd38      	pop	{r3, r4, r5, pc}

1a006b44 <spiInit>:
bool_t spiInit( spiMap_t spi )
{

   bool_t retVal = TRUE;

   if( spi == SPI0 ) {
1a006b44:	b108      	cbz	r0, 1a006b4a <spiInit+0x6>
      #else
         #error BOARD compile variable must be defined
      #endif

   } else {
      retVal = FALSE;
1a006b46:	2000      	movs	r0, #0
   }

   return retVal;
}
1a006b48:	4770      	bx	lr
{
1a006b4a:	b570      	push	{r4, r5, r6, lr}
1a006b4c:	4c0e      	ldr	r4, [pc, #56]	; (1a006b88 <spiInit+0x44>)
1a006b4e:	2600      	movs	r6, #0
1a006b50:	f8c4 6790 	str.w	r6, [r4, #1936]	; 0x790
1a006b54:	23c5      	movs	r3, #197	; 0xc5
1a006b56:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
1a006b5a:	2305      	movs	r3, #5
1a006b5c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
         Chip_SSP_Init( LPC_SSP1 );
1a006b60:	4d0a      	ldr	r5, [pc, #40]	; (1a006b8c <spiInit+0x48>)
1a006b62:	4628      	mov	r0, r5
1a006b64:	f7ff feb4 	bl	1a0068d0 <Chip_SSP_Init>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a006b68:	686b      	ldr	r3, [r5, #4]
1a006b6a:	f043 0302 	orr.w	r3, r3, #2
1a006b6e:	606b      	str	r3, [r5, #4]
1a006b70:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
	pGPIO->DIR[port] |= 1UL << pin;
1a006b74:	4906      	ldr	r1, [pc, #24]	; (1a006b90 <spiInit+0x4c>)
1a006b76:	f242 020c 	movw	r2, #8204	; 0x200c
1a006b7a:	588b      	ldr	r3, [r1, r2]
1a006b7c:	f043 0301 	orr.w	r3, r3, #1
1a006b80:	508b      	str	r3, [r1, r2]
   bool_t retVal = TRUE;
1a006b82:	2001      	movs	r0, #1
}
1a006b84:	bd70      	pop	{r4, r5, r6, pc}
1a006b86:	bf00      	nop
1a006b88:	40086000 	.word	0x40086000
1a006b8c:	400c5000 	.word	0x400c5000
1a006b90:	400f4000 	.word	0x400f4000

1a006b94 <pwmInitTimers>:
 * @Brief:   Initializes the pwm timers.
 * @param   none
 * @return   nothing
 */
static void pwmInitTimers(void)
{
1a006b94:	b508      	push	{r3, lr}
   Sct_Init(PWM_FREC);
1a006b96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a006b9a:	f7ff fedf 	bl	1a00695c <Sct_Init>
}
1a006b9e:	bd08      	pop	{r3, pc}

1a006ba0 <pwmIsAttached>:
 * @param:   pwmNumber:   ID of the pwm, from 0 to 10
 * @return:   position (1 ~ PWM_TOTALNUMBER), 0 if the element was not found.
 */
uint8_t pwmIsAttached( pwmMap_t pwmNumber )
{
   uint8_t position = 0, positionInList = 0;
1a006ba0:	2300      	movs	r3, #0
   while ( (position < PWM_TOTALNUMBER) &&
1a006ba2:	e001      	b.n	1a006ba8 <pwmIsAttached+0x8>
           (pwmNumber != AttachedPWMList[position]) ) {
      position++;
1a006ba4:	3301      	adds	r3, #1
1a006ba6:	b2db      	uxtb	r3, r3
   while ( (position < PWM_TOTALNUMBER) &&
1a006ba8:	2b0a      	cmp	r3, #10
1a006baa:	d803      	bhi.n	1a006bb4 <pwmIsAttached+0x14>
           (pwmNumber != AttachedPWMList[position]) ) {
1a006bac:	4a05      	ldr	r2, [pc, #20]	; (1a006bc4 <pwmIsAttached+0x24>)
1a006bae:	5cd2      	ldrb	r2, [r2, r3]
   while ( (position < PWM_TOTALNUMBER) &&
1a006bb0:	4282      	cmp	r2, r0
1a006bb2:	d1f7      	bne.n	1a006ba4 <pwmIsAttached+0x4>
   }

   if (position < PWM_TOTALNUMBER) {
1a006bb4:	2b0a      	cmp	r3, #10
1a006bb6:	d802      	bhi.n	1a006bbe <pwmIsAttached+0x1e>
      positionInList = position + 1;
1a006bb8:	1c58      	adds	r0, r3, #1
1a006bba:	b2c0      	uxtb	r0, r0
1a006bbc:	4770      	bx	lr
   } else {
      positionInList = 0;
1a006bbe:	2000      	movs	r0, #0
   }

   return positionInList;
}
1a006bc0:	4770      	bx	lr
1a006bc2:	bf00      	nop
1a006bc4:	10000050 	.word	0x10000050

1a006bc8 <pwmWrite>:
{
1a006bc8:	b538      	push	{r3, r4, r5, lr}
1a006bca:	4604      	mov	r4, r0
1a006bcc:	460d      	mov	r5, r1
   position = pwmIsAttached(pwmNumber);
1a006bce:	f7ff ffe7 	bl	1a006ba0 <pwmIsAttached>
   if(position) {
1a006bd2:	b908      	cbnz	r0, 1a006bd8 <pwmWrite+0x10>
   bool_t success = FALSE;
1a006bd4:	2000      	movs	r0, #0
}
1a006bd6:	bd38      	pop	{r3, r4, r5, pc}
      Sct_SetDutyCycle(pwmMap[pwmNumber], value);
1a006bd8:	4629      	mov	r1, r5
1a006bda:	4b03      	ldr	r3, [pc, #12]	; (1a006be8 <pwmWrite+0x20>)
1a006bdc:	5d18      	ldrb	r0, [r3, r4]
1a006bde:	f7ff fedd 	bl	1a00699c <Sct_SetDutyCycle>
      success = TRUE;
1a006be2:	2001      	movs	r0, #1
1a006be4:	e7f7      	b.n	1a006bd6 <pwmWrite+0xe>
1a006be6:	bf00      	nop
1a006be8:	1a008d70 	.word	0x1a008d70

1a006bec <pwmRead>:
{
1a006bec:	b510      	push	{r4, lr}
1a006bee:	4604      	mov	r4, r0
   position = pwmIsAttached(pwmNumber);
1a006bf0:	f7ff ffd6 	bl	1a006ba0 <pwmIsAttached>
   if(position) {
1a006bf4:	b120      	cbz	r0, 1a006c00 <pwmRead+0x14>
      value = Sct_GetDutyCycle(pwmMap[pwmNumber]);
1a006bf6:	4b03      	ldr	r3, [pc, #12]	; (1a006c04 <pwmRead+0x18>)
1a006bf8:	5d18      	ldrb	r0, [r3, r4]
1a006bfa:	f7ff ff01 	bl	1a006a00 <Sct_GetDutyCycle>
}
1a006bfe:	bd10      	pop	{r4, pc}
      value = EMPTY_POSITION;
1a006c00:	20ff      	movs	r0, #255	; 0xff
1a006c02:	e7fc      	b.n	1a006bfe <pwmRead+0x12>
1a006c04:	1a008d70 	.word	0x1a008d70

1a006c08 <pwmAttach>:
{
1a006c08:	b510      	push	{r4, lr}
1a006c0a:	4604      	mov	r4, r0
   position = pwmIsAttached(pwmNumber);
1a006c0c:	f7ff ffc8 	bl	1a006ba0 <pwmIsAttached>
   if(position==0) {
1a006c10:	b970      	cbnz	r0, 1a006c30 <pwmAttach+0x28>
      position = pwmIsAttached(EMPTY_POSITION); /* Searches for the first empty position */
1a006c12:	20ff      	movs	r0, #255	; 0xff
1a006c14:	f7ff ffc4 	bl	1a006ba0 <pwmIsAttached>
      if(position) { /* if position==0 => there is no room in the list for another pwm */
1a006c18:	b908      	cbnz	r0, 1a006c1e <pwmAttach+0x16>
   bool_t success = FALSE;
1a006c1a:	2000      	movs	r0, #0
1a006c1c:	e009      	b.n	1a006c32 <pwmAttach+0x2a>
         AttachedPWMList[position-1] = pwmNumber;
1a006c1e:	1e43      	subs	r3, r0, #1
1a006c20:	4a04      	ldr	r2, [pc, #16]	; (1a006c34 <pwmAttach+0x2c>)
1a006c22:	54d4      	strb	r4, [r2, r3]
         Sct_EnablePwmFor(pwmMap[pwmNumber]);
1a006c24:	4b04      	ldr	r3, [pc, #16]	; (1a006c38 <pwmAttach+0x30>)
1a006c26:	5d18      	ldrb	r0, [r3, r4]
1a006c28:	f7ff fec4 	bl	1a0069b4 <Sct_EnablePwmFor>
         success = TRUE;
1a006c2c:	2001      	movs	r0, #1
1a006c2e:	e000      	b.n	1a006c32 <pwmAttach+0x2a>
   bool_t success = FALSE;
1a006c30:	2000      	movs	r0, #0
}
1a006c32:	bd10      	pop	{r4, pc}
1a006c34:	10000050 	.word	0x10000050
1a006c38:	1a008d70 	.word	0x1a008d70

1a006c3c <pwmDetach>:
{
1a006c3c:	b508      	push	{r3, lr}
   position = pwmIsAttached(pwmNumber);
1a006c3e:	f7ff ffaf 	bl	1a006ba0 <pwmIsAttached>
   if(position) {
1a006c42:	b128      	cbz	r0, 1a006c50 <pwmDetach+0x14>
      AttachedPWMList[position-1] = EMPTY_POSITION;
1a006c44:	1e43      	subs	r3, r0, #1
1a006c46:	4a03      	ldr	r2, [pc, #12]	; (1a006c54 <pwmDetach+0x18>)
1a006c48:	21ff      	movs	r1, #255	; 0xff
1a006c4a:	54d1      	strb	r1, [r2, r3]
      success = TRUE;
1a006c4c:	2001      	movs	r0, #1
}
1a006c4e:	bd08      	pop	{r3, pc}
   bool_t success = FALSE;
1a006c50:	2000      	movs	r0, #0
1a006c52:	e7fc      	b.n	1a006c4e <pwmDetach+0x12>
1a006c54:	10000050 	.word	0x10000050

1a006c58 <pwmInit>:
{
1a006c58:	b508      	push	{r3, lr}
   switch(config) {
1a006c5a:	2902      	cmp	r1, #2
1a006c5c:	d008      	beq.n	1a006c70 <pwmInit+0x18>
1a006c5e:	2903      	cmp	r1, #3
1a006c60:	d009      	beq.n	1a006c76 <pwmInit+0x1e>
1a006c62:	b109      	cbz	r1, 1a006c68 <pwmInit+0x10>
      ret_val = 0;
1a006c64:	2000      	movs	r0, #0
1a006c66:	e002      	b.n	1a006c6e <pwmInit+0x16>
      pwmInitTimers();
1a006c68:	f7ff ff94 	bl	1a006b94 <pwmInitTimers>
   bool_t ret_val = 1;
1a006c6c:	2001      	movs	r0, #1
}
1a006c6e:	bd08      	pop	{r3, pc}
      ret_val = pwmAttach( pwmNumber );
1a006c70:	f7ff ffca 	bl	1a006c08 <pwmAttach>
      break;
1a006c74:	e7fb      	b.n	1a006c6e <pwmInit+0x16>
      ret_val = pwmDetach( pwmNumber );
1a006c76:	f7ff ffe1 	bl	1a006c3c <pwmDetach>
      break;
1a006c7a:	e7f8      	b.n	1a006c6e <pwmInit+0x16>

1a006c7c <tickRead>:
}
*/

// Read Tick Counter
tick_t tickRead( void )
{
1a006c7c:	b508      	push	{r3, lr}
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
1a006c7e:	f7fd fa2b 	bl	1a0040d8 <xTaskGetTickCount>
   #else
      return tickCounter;
   #endif
}
1a006c82:	2100      	movs	r1, #0
1a006c84:	bd08      	pop	{r3, pc}
1a006c86:	Address 0x000000001a006c86 is out of bounds.


1a006c88 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a006c88:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a006c8a:	4d0b      	ldr	r5, [pc, #44]	; (1a006cb8 <gpioObtainPinInit+0x30>)
1a006c8c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a006c90:	182c      	adds	r4, r5, r0
1a006c92:	5628      	ldrsb	r0, [r5, r0]
1a006c94:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a006c96:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a006c9a:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a006c9c:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a006ca0:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a006ca2:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a006ca6:	9b02      	ldr	r3, [sp, #8]
1a006ca8:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a006caa:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a006cae:	9b03      	ldr	r3, [sp, #12]
1a006cb0:	701a      	strb	r2, [r3, #0]
}
1a006cb2:	bc30      	pop	{r4, r5}
1a006cb4:	4770      	bx	lr
1a006cb6:	bf00      	nop
1a006cb8:	1a008d7c 	.word	0x1a008d7c

1a006cbc <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a006cbc:	f110 0f02 	cmn.w	r0, #2
1a006cc0:	f000 80c7 	beq.w	1a006e52 <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a006cc4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a006cc8:	f000 80c5 	beq.w	1a006e56 <gpioInit+0x19a>
{
1a006ccc:	b570      	push	{r4, r5, r6, lr}
1a006cce:	b084      	sub	sp, #16
1a006cd0:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a006cd2:	2300      	movs	r3, #0
1a006cd4:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a006cd8:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a006cdc:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a006ce0:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a006ce4:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a006ce8:	f10d 030b 	add.w	r3, sp, #11
1a006cec:	9301      	str	r3, [sp, #4]
1a006cee:	ab03      	add	r3, sp, #12
1a006cf0:	9300      	str	r3, [sp, #0]
1a006cf2:	f10d 030d 	add.w	r3, sp, #13
1a006cf6:	f10d 020e 	add.w	r2, sp, #14
1a006cfa:	f10d 010f 	add.w	r1, sp, #15
1a006cfe:	f7ff ffc3 	bl	1a006c88 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a006d02:	2c05      	cmp	r4, #5
1a006d04:	f200 80a9 	bhi.w	1a006e5a <gpioInit+0x19e>
1a006d08:	e8df f004 	tbb	[pc, r4]
1a006d0c:	45278109 	.word	0x45278109
1a006d10:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a006d12:	4853      	ldr	r0, [pc, #332]	; (1a006e60 <gpioInit+0x1a4>)
1a006d14:	f7ff fbfb 	bl	1a00650e <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a006d18:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a006d1a:	b004      	add	sp, #16
1a006d1c:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a006d1e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a006d22:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a006d26:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a006d2a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a006d2e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a006d32:	494c      	ldr	r1, [pc, #304]	; (1a006e64 <gpioInit+0x1a8>)
1a006d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a006d38:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a006d3c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a006d40:	2001      	movs	r0, #1
1a006d42:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] &= ~bitValue;
1a006d46:	4c46      	ldr	r4, [pc, #280]	; (1a006e60 <gpioInit+0x1a4>)
1a006d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a006d4c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a006d50:	ea22 0201 	bic.w	r2, r2, r1
1a006d54:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a006d58:	e7df      	b.n	1a006d1a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a006d5a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a006d5e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a006d62:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a006d66:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a006d6a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a006d6e:	493d      	ldr	r1, [pc, #244]	; (1a006e64 <gpioInit+0x1a8>)
1a006d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a006d74:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a006d78:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a006d7c:	2001      	movs	r0, #1
1a006d7e:	fa00 f102 	lsl.w	r1, r0, r2
1a006d82:	4c37      	ldr	r4, [pc, #220]	; (1a006e60 <gpioInit+0x1a4>)
1a006d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a006d88:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a006d8c:	ea22 0201 	bic.w	r2, r2, r1
1a006d90:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a006d94:	e7c1      	b.n	1a006d1a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a006d96:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a006d9a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a006d9e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a006da2:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a006da6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a006daa:	492e      	ldr	r1, [pc, #184]	; (1a006e64 <gpioInit+0x1a8>)
1a006dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a006db0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a006db4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a006db8:	2001      	movs	r0, #1
1a006dba:	fa00 f102 	lsl.w	r1, r0, r2
1a006dbe:	4c28      	ldr	r4, [pc, #160]	; (1a006e60 <gpioInit+0x1a4>)
1a006dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a006dc4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a006dc8:	ea22 0201 	bic.w	r2, r2, r1
1a006dcc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a006dd0:	e7a3      	b.n	1a006d1a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a006dd2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a006dd6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a006dda:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a006dde:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a006de2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a006de6:	491f      	ldr	r1, [pc, #124]	; (1a006e64 <gpioInit+0x1a8>)
1a006de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a006dec:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a006df0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a006df4:	2001      	movs	r0, #1
1a006df6:	fa00 f102 	lsl.w	r1, r0, r2
1a006dfa:	4c19      	ldr	r4, [pc, #100]	; (1a006e60 <gpioInit+0x1a4>)
1a006dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a006e00:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a006e04:	ea22 0201 	bic.w	r2, r2, r1
1a006e08:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a006e0c:	e785      	b.n	1a006d1a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a006e0e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a006e12:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a006e16:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a006e1a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a006e1e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a006e22:	4910      	ldr	r1, [pc, #64]	; (1a006e64 <gpioInit+0x1a8>)
1a006e24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a006e28:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a006e2c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a006e30:	2001      	movs	r0, #1
1a006e32:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a006e36:	4b0a      	ldr	r3, [pc, #40]	; (1a006e60 <gpioInit+0x1a4>)
1a006e38:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a006e3c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a006e40:	4331      	orrs	r1, r6
1a006e42:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a006e46:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a006e48:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a006e4c:	2100      	movs	r1, #0
1a006e4e:	5499      	strb	r1, [r3, r2]
1a006e50:	e763      	b.n	1a006d1a <gpioInit+0x5e>
	  return FALSE;
1a006e52:	2000      	movs	r0, #0
1a006e54:	4770      	bx	lr
	  return FALSE;
1a006e56:	2000      	movs	r0, #0
}
1a006e58:	4770      	bx	lr
      ret_val = 0;
1a006e5a:	2000      	movs	r0, #0
1a006e5c:	e75d      	b.n	1a006d1a <gpioInit+0x5e>
1a006e5e:	bf00      	nop
1a006e60:	400f4000 	.word	0x400f4000
1a006e64:	40086000 	.word	0x40086000

1a006e68 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a006e68:	f110 0f02 	cmn.w	r0, #2
1a006e6c:	d02d      	beq.n	1a006eca <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a006e6e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a006e72:	d02c      	beq.n	1a006ece <gpioWrite+0x66>
{
1a006e74:	b510      	push	{r4, lr}
1a006e76:	b084      	sub	sp, #16
1a006e78:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a006e7a:	2300      	movs	r3, #0
1a006e7c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a006e80:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a006e84:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a006e88:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a006e8c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a006e90:	f10d 030b 	add.w	r3, sp, #11
1a006e94:	9301      	str	r3, [sp, #4]
1a006e96:	ab03      	add	r3, sp, #12
1a006e98:	9300      	str	r3, [sp, #0]
1a006e9a:	f10d 030d 	add.w	r3, sp, #13
1a006e9e:	f10d 020e 	add.w	r2, sp, #14
1a006ea2:	f10d 010f 	add.w	r1, sp, #15
1a006ea6:	f7ff feef 	bl	1a006c88 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a006eaa:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a006eae:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a006eb2:	1c21      	adds	r1, r4, #0
1a006eb4:	bf18      	it	ne
1a006eb6:	2101      	movne	r1, #1
1a006eb8:	015b      	lsls	r3, r3, #5
1a006eba:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a006ebe:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a006ec2:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a006ec4:	2001      	movs	r0, #1
}
1a006ec6:	b004      	add	sp, #16
1a006ec8:	bd10      	pop	{r4, pc}
	  return FALSE;
1a006eca:	2000      	movs	r0, #0
1a006ecc:	4770      	bx	lr
	  return FALSE;
1a006ece:	2000      	movs	r0, #0
}
1a006ed0:	4770      	bx	lr

1a006ed2 <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a006ed2:	f110 0f02 	cmn.w	r0, #2
1a006ed6:	d02c      	beq.n	1a006f32 <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a006ed8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a006edc:	d02b      	beq.n	1a006f36 <gpioRead+0x64>
{
1a006ede:	b500      	push	{lr}
1a006ee0:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a006ee2:	2300      	movs	r3, #0
1a006ee4:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a006ee8:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a006eec:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a006ef0:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a006ef4:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a006ef8:	f10d 030b 	add.w	r3, sp, #11
1a006efc:	9301      	str	r3, [sp, #4]
1a006efe:	ab03      	add	r3, sp, #12
1a006f00:	9300      	str	r3, [sp, #0]
1a006f02:	f10d 030d 	add.w	r3, sp, #13
1a006f06:	f10d 020e 	add.w	r2, sp, #14
1a006f0a:	f10d 010f 	add.w	r1, sp, #15
1a006f0e:	f7ff febb 	bl	1a006c88 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a006f12:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a006f16:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a006f1a:	015b      	lsls	r3, r3, #5
1a006f1c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a006f20:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a006f24:	5c98      	ldrb	r0, [r3, r2]
1a006f26:	3000      	adds	r0, #0
1a006f28:	bf18      	it	ne
1a006f2a:	2001      	movne	r0, #1

   return ret_val;
}
1a006f2c:	b005      	add	sp, #20
1a006f2e:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a006f32:	2001      	movs	r0, #1
1a006f34:	4770      	bx	lr
      return FALSE;
1a006f36:	2000      	movs	r0, #0
}
1a006f38:	4770      	bx	lr

1a006f3a <gpioToggle>:
{
1a006f3a:	b510      	push	{r4, lr}
1a006f3c:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a006f3e:	f7ff ffc8 	bl	1a006ed2 <gpioRead>
1a006f42:	fab0 f180 	clz	r1, r0
1a006f46:	0949      	lsrs	r1, r1, #5
1a006f48:	4620      	mov	r0, r4
1a006f4a:	f7ff ff8d 	bl	1a006e68 <gpioWrite>
}
1a006f4e:	bd10      	pop	{r4, pc}

1a006f50 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a006f50:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a006f52:	4b04      	ldr	r3, [pc, #16]	; (1a006f64 <USB0_IRQHandler+0x14>)
1a006f54:	681b      	ldr	r3, [r3, #0]
1a006f56:	681b      	ldr	r3, [r3, #0]
1a006f58:	68db      	ldr	r3, [r3, #12]
1a006f5a:	4a03      	ldr	r2, [pc, #12]	; (1a006f68 <USB0_IRQHandler+0x18>)
1a006f5c:	6810      	ldr	r0, [r2, #0]
1a006f5e:	4798      	blx	r3
}
1a006f60:	bd08      	pop	{r3, pc}
1a006f62:	bf00      	nop
1a006f64:	100034f4 	.word	0x100034f4
1a006f68:	10003480 	.word	0x10003480

1a006f6c <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a006f6c:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a006f6e:	f7ff faa5 	bl	1a0064bc <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a006f72:	4b18      	ldr	r3, [pc, #96]	; (1a006fd4 <boardInit+0x68>)
1a006f74:	6818      	ldr	r0, [r3, #0]
1a006f76:	f7ff fce3 	bl	1a006940 <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a006f7a:	2105      	movs	r1, #5
1a006f7c:	2000      	movs	r0, #0
1a006f7e:	f7ff fe9d 	bl	1a006cbc <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a006f82:	2100      	movs	r1, #0
1a006f84:	2024      	movs	r0, #36	; 0x24
1a006f86:	f7ff fe99 	bl	1a006cbc <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a006f8a:	2100      	movs	r1, #0
1a006f8c:	2025      	movs	r0, #37	; 0x25
1a006f8e:	f7ff fe95 	bl	1a006cbc <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a006f92:	2100      	movs	r1, #0
1a006f94:	2026      	movs	r0, #38	; 0x26
1a006f96:	f7ff fe91 	bl	1a006cbc <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a006f9a:	2100      	movs	r1, #0
1a006f9c:	2027      	movs	r0, #39	; 0x27
1a006f9e:	f7ff fe8d 	bl	1a006cbc <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a006fa2:	2101      	movs	r1, #1
1a006fa4:	2028      	movs	r0, #40	; 0x28
1a006fa6:	f7ff fe89 	bl	1a006cbc <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a006faa:	2101      	movs	r1, #1
1a006fac:	2029      	movs	r0, #41	; 0x29
1a006fae:	f7ff fe85 	bl	1a006cbc <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a006fb2:	2101      	movs	r1, #1
1a006fb4:	202a      	movs	r0, #42	; 0x2a
1a006fb6:	f7ff fe81 	bl	1a006cbc <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a006fba:	2101      	movs	r1, #1
1a006fbc:	202b      	movs	r0, #43	; 0x2b
1a006fbe:	f7ff fe7d 	bl	1a006cbc <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a006fc2:	2101      	movs	r1, #1
1a006fc4:	202c      	movs	r0, #44	; 0x2c
1a006fc6:	f7ff fe79 	bl	1a006cbc <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a006fca:	2101      	movs	r1, #1
1a006fcc:	202d      	movs	r0, #45	; 0x2d
1a006fce:	f7ff fe75 	bl	1a006cbc <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a006fd2:	bd08      	pop	{r3, pc}
1a006fd4:	100034f0 	.word	0x100034f0

1a006fd8 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay( tick_t duration_ms )
{
1a006fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a006fdc:	4680      	mov	r8, r0
1a006fde:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a006fe0:	f7ff fe4c 	bl	1a006c7c <tickRead>
1a006fe4:	4606      	mov	r6, r0
1a006fe6:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration_ms/tickRateMS );
1a006fe8:	f7ff fe48 	bl	1a006c7c <tickRead>
1a006fec:	1b84      	subs	r4, r0, r6
1a006fee:	eb61 0507 	sbc.w	r5, r1, r7
1a006ff2:	4b06      	ldr	r3, [pc, #24]	; (1a00700c <delay+0x34>)
1a006ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a006ff8:	4640      	mov	r0, r8
1a006ffa:	4649      	mov	r1, r9
1a006ffc:	f000 f8b6 	bl	1a00716c <__aeabi_uldivmod>
1a007000:	428d      	cmp	r5, r1
1a007002:	bf08      	it	eq
1a007004:	4284      	cmpeq	r4, r0
1a007006:	d3ef      	bcc.n	1a006fe8 <delay+0x10>
}
1a007008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00700c:	10000060 	.word	0x10000060

1a007010 <int64ToString>:
/*==================[external functions definition]==========================*/

// C++ version 0.4 char* style "itoa"
// Modified by Eric Pernia.
bool_t int64ToString( int64_t value, char* result, uint8_t base )
{
1a007010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a007014:	4614      	mov	r4, r2
1a007016:	469a      	mov	sl, r3
   // check that the base if valid
   if( base < 2 || base > 36 ) {
1a007018:	3b02      	subs	r3, #2
1a00701a:	b2db      	uxtb	r3, r3
1a00701c:	2b22      	cmp	r3, #34	; 0x22
1a00701e:	d803      	bhi.n	1a007028 <int64ToString+0x18>
1a007020:	4680      	mov	r8, r0
1a007022:	4689      	mov	r9, r1
      *result = '\0';
      return FALSE;
   }

   char* ptr = result, *ptr1 = result, tmp_char;
1a007024:	4615      	mov	r5, r2
1a007026:	e005      	b.n	1a007034 <int64ToString+0x24>
      *result = '\0';
1a007028:	2000      	movs	r0, #0
1a00702a:	7010      	strb	r0, [r2, #0]
      return FALSE;
1a00702c:	e034      	b.n	1a007098 <int64ToString+0x88>
   int64_t tmp_value;

   do {
      tmp_value = value;
      value /= (int64_t)base;
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * (int64_t)base)];
1a00702e:	4635      	mov	r5, r6
      value /= (int64_t)base;
1a007030:	4680      	mov	r8, r0
1a007032:	4689      	mov	r9, r1
1a007034:	fa5f f68a 	uxtb.w	r6, sl
1a007038:	2700      	movs	r7, #0
1a00703a:	4632      	mov	r2, r6
1a00703c:	463b      	mov	r3, r7
1a00703e:	4640      	mov	r0, r8
1a007040:	4649      	mov	r1, r9
1a007042:	f000 f843 	bl	1a0070cc <__aeabi_ldivmod>
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * (int64_t)base)];
1a007046:	fba6 bc00 	umull	fp, ip, r6, r0
1a00704a:	ebb8 020b 	subs.w	r2, r8, fp
1a00704e:	f112 0b23 	adds.w	fp, r2, #35	; 0x23
1a007052:	1c6e      	adds	r6, r5, #1
1a007054:	4b11      	ldr	r3, [pc, #68]	; (1a00709c <int64ToString+0x8c>)
1a007056:	eb0b 0203 	add.w	r2, fp, r3
1a00705a:	7813      	ldrb	r3, [r2, #0]
1a00705c:	702b      	strb	r3, [r5, #0]
   } while ( value );
1a00705e:	ea50 0301 	orrs.w	r3, r0, r1
1a007062:	d1e4      	bne.n	1a00702e <int64ToString+0x1e>

   // Apply negative sign
   if (tmp_value < 0) *ptr++ = '-';
1a007064:	f1b8 0f00 	cmp.w	r8, #0
1a007068:	f179 0300 	sbcs.w	r3, r9, #0
1a00706c:	db03      	blt.n	1a007076 <int64ToString+0x66>
   *ptr-- = '\0';
1a00706e:	1e73      	subs	r3, r6, #1
1a007070:	2200      	movs	r2, #0
1a007072:	7032      	strb	r2, [r6, #0]
   while(ptr1 < ptr) {
1a007074:	e00d      	b.n	1a007092 <int64ToString+0x82>
   if (tmp_value < 0) *ptr++ = '-';
1a007076:	1cae      	adds	r6, r5, #2
1a007078:	232d      	movs	r3, #45	; 0x2d
1a00707a:	706b      	strb	r3, [r5, #1]
1a00707c:	e7f7      	b.n	1a00706e <int64ToString+0x5e>
      tmp_char = *ptr;
1a00707e:	461a      	mov	r2, r3
1a007080:	f812 0901 	ldrb.w	r0, [r2], #-1
      *ptr--= *ptr1;
1a007084:	4621      	mov	r1, r4
1a007086:	f811 5b01 	ldrb.w	r5, [r1], #1
1a00708a:	701d      	strb	r5, [r3, #0]
      *ptr1++ = tmp_char;
1a00708c:	7020      	strb	r0, [r4, #0]
1a00708e:	460c      	mov	r4, r1
      *ptr--= *ptr1;
1a007090:	4613      	mov	r3, r2
   while(ptr1 < ptr) {
1a007092:	42a3      	cmp	r3, r4
1a007094:	d8f3      	bhi.n	1a00707e <int64ToString+0x6e>
   }
   return TRUE;
1a007096:	2001      	movs	r0, #1
}
1a007098:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00709c:	1a008e64 	.word	0x1a008e64

1a0070a0 <intToString>:

   return result;
}

char* intToString( int64_t value )
{
1a0070a0:	b508      	push	{r3, lr}
   static char result[20];
   result[0] = 0;
1a0070a2:	4b09      	ldr	r3, [pc, #36]	; (1a0070c8 <intToString+0x28>)
1a0070a4:	2200      	movs	r2, #0
1a0070a6:	701a      	strb	r2, [r3, #0]
   if( value == 0 ) {
1a0070a8:	ea50 0301 	orrs.w	r3, r0, r1
1a0070ac:	d106      	bne.n	1a0070bc <intToString+0x1c>
      result[0] = '0';
1a0070ae:	4b06      	ldr	r3, [pc, #24]	; (1a0070c8 <intToString+0x28>)
1a0070b0:	2230      	movs	r2, #48	; 0x30
1a0070b2:	701a      	strb	r2, [r3, #0]
      result[1] = 0;
1a0070b4:	2200      	movs	r2, #0
1a0070b6:	705a      	strb	r2, [r3, #1]
   } else {
      int64ToString( value, result, 10 );
   }
   return result;
}
1a0070b8:	4803      	ldr	r0, [pc, #12]	; (1a0070c8 <intToString+0x28>)
1a0070ba:	bd08      	pop	{r3, pc}
      int64ToString( value, result, 10 );
1a0070bc:	230a      	movs	r3, #10
1a0070be:	4a02      	ldr	r2, [pc, #8]	; (1a0070c8 <intToString+0x28>)
1a0070c0:	f7ff ffa6 	bl	1a007010 <int64ToString>
1a0070c4:	e7f8      	b.n	1a0070b8 <intToString+0x18>
1a0070c6:	bf00      	nop
1a0070c8:	10003484 	.word	0x10003484

1a0070cc <__aeabi_ldivmod>:
1a0070cc:	b97b      	cbnz	r3, 1a0070ee <__aeabi_ldivmod+0x22>
1a0070ce:	b972      	cbnz	r2, 1a0070ee <__aeabi_ldivmod+0x22>
1a0070d0:	2900      	cmp	r1, #0
1a0070d2:	bfbe      	ittt	lt
1a0070d4:	2000      	movlt	r0, #0
1a0070d6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
1a0070da:	e006      	blt.n	1a0070ea <__aeabi_ldivmod+0x1e>
1a0070dc:	bf08      	it	eq
1a0070de:	2800      	cmpeq	r0, #0
1a0070e0:	bf1c      	itt	ne
1a0070e2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
1a0070e6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a0070ea:	f000 b9bd 	b.w	1a007468 <__aeabi_idiv0>
1a0070ee:	f1ad 0c08 	sub.w	ip, sp, #8
1a0070f2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a0070f6:	2900      	cmp	r1, #0
1a0070f8:	db09      	blt.n	1a00710e <__aeabi_ldivmod+0x42>
1a0070fa:	2b00      	cmp	r3, #0
1a0070fc:	db1a      	blt.n	1a007134 <__aeabi_ldivmod+0x68>
1a0070fe:	f000 f84d 	bl	1a00719c <__udivmoddi4>
1a007102:	f8dd e004 	ldr.w	lr, [sp, #4]
1a007106:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00710a:	b004      	add	sp, #16
1a00710c:	4770      	bx	lr
1a00710e:	4240      	negs	r0, r0
1a007110:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a007114:	2b00      	cmp	r3, #0
1a007116:	db1b      	blt.n	1a007150 <__aeabi_ldivmod+0x84>
1a007118:	f000 f840 	bl	1a00719c <__udivmoddi4>
1a00711c:	f8dd e004 	ldr.w	lr, [sp, #4]
1a007120:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a007124:	b004      	add	sp, #16
1a007126:	4240      	negs	r0, r0
1a007128:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a00712c:	4252      	negs	r2, r2
1a00712e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a007132:	4770      	bx	lr
1a007134:	4252      	negs	r2, r2
1a007136:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a00713a:	f000 f82f 	bl	1a00719c <__udivmoddi4>
1a00713e:	f8dd e004 	ldr.w	lr, [sp, #4]
1a007142:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a007146:	b004      	add	sp, #16
1a007148:	4240      	negs	r0, r0
1a00714a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a00714e:	4770      	bx	lr
1a007150:	4252      	negs	r2, r2
1a007152:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a007156:	f000 f821 	bl	1a00719c <__udivmoddi4>
1a00715a:	f8dd e004 	ldr.w	lr, [sp, #4]
1a00715e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a007162:	b004      	add	sp, #16
1a007164:	4252      	negs	r2, r2
1a007166:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a00716a:	4770      	bx	lr

1a00716c <__aeabi_uldivmod>:
1a00716c:	b953      	cbnz	r3, 1a007184 <__aeabi_uldivmod+0x18>
1a00716e:	b94a      	cbnz	r2, 1a007184 <__aeabi_uldivmod+0x18>
1a007170:	2900      	cmp	r1, #0
1a007172:	bf08      	it	eq
1a007174:	2800      	cmpeq	r0, #0
1a007176:	bf1c      	itt	ne
1a007178:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a00717c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a007180:	f000 b972 	b.w	1a007468 <__aeabi_idiv0>
1a007184:	f1ad 0c08 	sub.w	ip, sp, #8
1a007188:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a00718c:	f000 f806 	bl	1a00719c <__udivmoddi4>
1a007190:	f8dd e004 	ldr.w	lr, [sp, #4]
1a007194:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a007198:	b004      	add	sp, #16
1a00719a:	4770      	bx	lr

1a00719c <__udivmoddi4>:
1a00719c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0071a0:	9e08      	ldr	r6, [sp, #32]
1a0071a2:	4604      	mov	r4, r0
1a0071a4:	4688      	mov	r8, r1
1a0071a6:	2b00      	cmp	r3, #0
1a0071a8:	d14b      	bne.n	1a007242 <__udivmoddi4+0xa6>
1a0071aa:	428a      	cmp	r2, r1
1a0071ac:	4615      	mov	r5, r2
1a0071ae:	d967      	bls.n	1a007280 <__udivmoddi4+0xe4>
1a0071b0:	fab2 f282 	clz	r2, r2
1a0071b4:	b14a      	cbz	r2, 1a0071ca <__udivmoddi4+0x2e>
1a0071b6:	f1c2 0720 	rsb	r7, r2, #32
1a0071ba:	fa01 f302 	lsl.w	r3, r1, r2
1a0071be:	fa20 f707 	lsr.w	r7, r0, r7
1a0071c2:	4095      	lsls	r5, r2
1a0071c4:	ea47 0803 	orr.w	r8, r7, r3
1a0071c8:	4094      	lsls	r4, r2
1a0071ca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0071ce:	0c23      	lsrs	r3, r4, #16
1a0071d0:	fbb8 f7fe 	udiv	r7, r8, lr
1a0071d4:	fa1f fc85 	uxth.w	ip, r5
1a0071d8:	fb0e 8817 	mls	r8, lr, r7, r8
1a0071dc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0071e0:	fb07 f10c 	mul.w	r1, r7, ip
1a0071e4:	4299      	cmp	r1, r3
1a0071e6:	d909      	bls.n	1a0071fc <__udivmoddi4+0x60>
1a0071e8:	18eb      	adds	r3, r5, r3
1a0071ea:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a0071ee:	f080 811b 	bcs.w	1a007428 <__udivmoddi4+0x28c>
1a0071f2:	4299      	cmp	r1, r3
1a0071f4:	f240 8118 	bls.w	1a007428 <__udivmoddi4+0x28c>
1a0071f8:	3f02      	subs	r7, #2
1a0071fa:	442b      	add	r3, r5
1a0071fc:	1a5b      	subs	r3, r3, r1
1a0071fe:	b2a4      	uxth	r4, r4
1a007200:	fbb3 f0fe 	udiv	r0, r3, lr
1a007204:	fb0e 3310 	mls	r3, lr, r0, r3
1a007208:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a00720c:	fb00 fc0c 	mul.w	ip, r0, ip
1a007210:	45a4      	cmp	ip, r4
1a007212:	d909      	bls.n	1a007228 <__udivmoddi4+0x8c>
1a007214:	192c      	adds	r4, r5, r4
1a007216:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00721a:	f080 8107 	bcs.w	1a00742c <__udivmoddi4+0x290>
1a00721e:	45a4      	cmp	ip, r4
1a007220:	f240 8104 	bls.w	1a00742c <__udivmoddi4+0x290>
1a007224:	3802      	subs	r0, #2
1a007226:	442c      	add	r4, r5
1a007228:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a00722c:	eba4 040c 	sub.w	r4, r4, ip
1a007230:	2700      	movs	r7, #0
1a007232:	b11e      	cbz	r6, 1a00723c <__udivmoddi4+0xa0>
1a007234:	40d4      	lsrs	r4, r2
1a007236:	2300      	movs	r3, #0
1a007238:	e9c6 4300 	strd	r4, r3, [r6]
1a00723c:	4639      	mov	r1, r7
1a00723e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a007242:	428b      	cmp	r3, r1
1a007244:	d909      	bls.n	1a00725a <__udivmoddi4+0xbe>
1a007246:	2e00      	cmp	r6, #0
1a007248:	f000 80eb 	beq.w	1a007422 <__udivmoddi4+0x286>
1a00724c:	2700      	movs	r7, #0
1a00724e:	e9c6 0100 	strd	r0, r1, [r6]
1a007252:	4638      	mov	r0, r7
1a007254:	4639      	mov	r1, r7
1a007256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00725a:	fab3 f783 	clz	r7, r3
1a00725e:	2f00      	cmp	r7, #0
1a007260:	d147      	bne.n	1a0072f2 <__udivmoddi4+0x156>
1a007262:	428b      	cmp	r3, r1
1a007264:	d302      	bcc.n	1a00726c <__udivmoddi4+0xd0>
1a007266:	4282      	cmp	r2, r0
1a007268:	f200 80fa 	bhi.w	1a007460 <__udivmoddi4+0x2c4>
1a00726c:	1a84      	subs	r4, r0, r2
1a00726e:	eb61 0303 	sbc.w	r3, r1, r3
1a007272:	2001      	movs	r0, #1
1a007274:	4698      	mov	r8, r3
1a007276:	2e00      	cmp	r6, #0
1a007278:	d0e0      	beq.n	1a00723c <__udivmoddi4+0xa0>
1a00727a:	e9c6 4800 	strd	r4, r8, [r6]
1a00727e:	e7dd      	b.n	1a00723c <__udivmoddi4+0xa0>
1a007280:	b902      	cbnz	r2, 1a007284 <__udivmoddi4+0xe8>
1a007282:	deff      	udf	#255	; 0xff
1a007284:	fab2 f282 	clz	r2, r2
1a007288:	2a00      	cmp	r2, #0
1a00728a:	f040 808f 	bne.w	1a0073ac <__udivmoddi4+0x210>
1a00728e:	1b49      	subs	r1, r1, r5
1a007290:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a007294:	fa1f f885 	uxth.w	r8, r5
1a007298:	2701      	movs	r7, #1
1a00729a:	fbb1 fcfe 	udiv	ip, r1, lr
1a00729e:	0c23      	lsrs	r3, r4, #16
1a0072a0:	fb0e 111c 	mls	r1, lr, ip, r1
1a0072a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0072a8:	fb08 f10c 	mul.w	r1, r8, ip
1a0072ac:	4299      	cmp	r1, r3
1a0072ae:	d907      	bls.n	1a0072c0 <__udivmoddi4+0x124>
1a0072b0:	18eb      	adds	r3, r5, r3
1a0072b2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a0072b6:	d202      	bcs.n	1a0072be <__udivmoddi4+0x122>
1a0072b8:	4299      	cmp	r1, r3
1a0072ba:	f200 80cd 	bhi.w	1a007458 <__udivmoddi4+0x2bc>
1a0072be:	4684      	mov	ip, r0
1a0072c0:	1a59      	subs	r1, r3, r1
1a0072c2:	b2a3      	uxth	r3, r4
1a0072c4:	fbb1 f0fe 	udiv	r0, r1, lr
1a0072c8:	fb0e 1410 	mls	r4, lr, r0, r1
1a0072cc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a0072d0:	fb08 f800 	mul.w	r8, r8, r0
1a0072d4:	45a0      	cmp	r8, r4
1a0072d6:	d907      	bls.n	1a0072e8 <__udivmoddi4+0x14c>
1a0072d8:	192c      	adds	r4, r5, r4
1a0072da:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0072de:	d202      	bcs.n	1a0072e6 <__udivmoddi4+0x14a>
1a0072e0:	45a0      	cmp	r8, r4
1a0072e2:	f200 80b6 	bhi.w	1a007452 <__udivmoddi4+0x2b6>
1a0072e6:	4618      	mov	r0, r3
1a0072e8:	eba4 0408 	sub.w	r4, r4, r8
1a0072ec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a0072f0:	e79f      	b.n	1a007232 <__udivmoddi4+0x96>
1a0072f2:	f1c7 0c20 	rsb	ip, r7, #32
1a0072f6:	40bb      	lsls	r3, r7
1a0072f8:	fa22 fe0c 	lsr.w	lr, r2, ip
1a0072fc:	ea4e 0e03 	orr.w	lr, lr, r3
1a007300:	fa01 f407 	lsl.w	r4, r1, r7
1a007304:	fa20 f50c 	lsr.w	r5, r0, ip
1a007308:	fa21 f30c 	lsr.w	r3, r1, ip
1a00730c:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a007310:	4325      	orrs	r5, r4
1a007312:	fbb3 f9f8 	udiv	r9, r3, r8
1a007316:	0c2c      	lsrs	r4, r5, #16
1a007318:	fb08 3319 	mls	r3, r8, r9, r3
1a00731c:	fa1f fa8e 	uxth.w	sl, lr
1a007320:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a007324:	fb09 f40a 	mul.w	r4, r9, sl
1a007328:	429c      	cmp	r4, r3
1a00732a:	fa02 f207 	lsl.w	r2, r2, r7
1a00732e:	fa00 f107 	lsl.w	r1, r0, r7
1a007332:	d90b      	bls.n	1a00734c <__udivmoddi4+0x1b0>
1a007334:	eb1e 0303 	adds.w	r3, lr, r3
1a007338:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a00733c:	f080 8087 	bcs.w	1a00744e <__udivmoddi4+0x2b2>
1a007340:	429c      	cmp	r4, r3
1a007342:	f240 8084 	bls.w	1a00744e <__udivmoddi4+0x2b2>
1a007346:	f1a9 0902 	sub.w	r9, r9, #2
1a00734a:	4473      	add	r3, lr
1a00734c:	1b1b      	subs	r3, r3, r4
1a00734e:	b2ad      	uxth	r5, r5
1a007350:	fbb3 f0f8 	udiv	r0, r3, r8
1a007354:	fb08 3310 	mls	r3, r8, r0, r3
1a007358:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a00735c:	fb00 fa0a 	mul.w	sl, r0, sl
1a007360:	45a2      	cmp	sl, r4
1a007362:	d908      	bls.n	1a007376 <__udivmoddi4+0x1da>
1a007364:	eb1e 0404 	adds.w	r4, lr, r4
1a007368:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00736c:	d26b      	bcs.n	1a007446 <__udivmoddi4+0x2aa>
1a00736e:	45a2      	cmp	sl, r4
1a007370:	d969      	bls.n	1a007446 <__udivmoddi4+0x2aa>
1a007372:	3802      	subs	r0, #2
1a007374:	4474      	add	r4, lr
1a007376:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a00737a:	fba0 8902 	umull	r8, r9, r0, r2
1a00737e:	eba4 040a 	sub.w	r4, r4, sl
1a007382:	454c      	cmp	r4, r9
1a007384:	46c2      	mov	sl, r8
1a007386:	464b      	mov	r3, r9
1a007388:	d354      	bcc.n	1a007434 <__udivmoddi4+0x298>
1a00738a:	d051      	beq.n	1a007430 <__udivmoddi4+0x294>
1a00738c:	2e00      	cmp	r6, #0
1a00738e:	d069      	beq.n	1a007464 <__udivmoddi4+0x2c8>
1a007390:	ebb1 050a 	subs.w	r5, r1, sl
1a007394:	eb64 0403 	sbc.w	r4, r4, r3
1a007398:	fa04 fc0c 	lsl.w	ip, r4, ip
1a00739c:	40fd      	lsrs	r5, r7
1a00739e:	40fc      	lsrs	r4, r7
1a0073a0:	ea4c 0505 	orr.w	r5, ip, r5
1a0073a4:	e9c6 5400 	strd	r5, r4, [r6]
1a0073a8:	2700      	movs	r7, #0
1a0073aa:	e747      	b.n	1a00723c <__udivmoddi4+0xa0>
1a0073ac:	f1c2 0320 	rsb	r3, r2, #32
1a0073b0:	fa20 f703 	lsr.w	r7, r0, r3
1a0073b4:	4095      	lsls	r5, r2
1a0073b6:	fa01 f002 	lsl.w	r0, r1, r2
1a0073ba:	fa21 f303 	lsr.w	r3, r1, r3
1a0073be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0073c2:	4338      	orrs	r0, r7
1a0073c4:	0c01      	lsrs	r1, r0, #16
1a0073c6:	fbb3 f7fe 	udiv	r7, r3, lr
1a0073ca:	fa1f f885 	uxth.w	r8, r5
1a0073ce:	fb0e 3317 	mls	r3, lr, r7, r3
1a0073d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0073d6:	fb07 f308 	mul.w	r3, r7, r8
1a0073da:	428b      	cmp	r3, r1
1a0073dc:	fa04 f402 	lsl.w	r4, r4, r2
1a0073e0:	d907      	bls.n	1a0073f2 <__udivmoddi4+0x256>
1a0073e2:	1869      	adds	r1, r5, r1
1a0073e4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a0073e8:	d22f      	bcs.n	1a00744a <__udivmoddi4+0x2ae>
1a0073ea:	428b      	cmp	r3, r1
1a0073ec:	d92d      	bls.n	1a00744a <__udivmoddi4+0x2ae>
1a0073ee:	3f02      	subs	r7, #2
1a0073f0:	4429      	add	r1, r5
1a0073f2:	1acb      	subs	r3, r1, r3
1a0073f4:	b281      	uxth	r1, r0
1a0073f6:	fbb3 f0fe 	udiv	r0, r3, lr
1a0073fa:	fb0e 3310 	mls	r3, lr, r0, r3
1a0073fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a007402:	fb00 f308 	mul.w	r3, r0, r8
1a007406:	428b      	cmp	r3, r1
1a007408:	d907      	bls.n	1a00741a <__udivmoddi4+0x27e>
1a00740a:	1869      	adds	r1, r5, r1
1a00740c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a007410:	d217      	bcs.n	1a007442 <__udivmoddi4+0x2a6>
1a007412:	428b      	cmp	r3, r1
1a007414:	d915      	bls.n	1a007442 <__udivmoddi4+0x2a6>
1a007416:	3802      	subs	r0, #2
1a007418:	4429      	add	r1, r5
1a00741a:	1ac9      	subs	r1, r1, r3
1a00741c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a007420:	e73b      	b.n	1a00729a <__udivmoddi4+0xfe>
1a007422:	4637      	mov	r7, r6
1a007424:	4630      	mov	r0, r6
1a007426:	e709      	b.n	1a00723c <__udivmoddi4+0xa0>
1a007428:	4607      	mov	r7, r0
1a00742a:	e6e7      	b.n	1a0071fc <__udivmoddi4+0x60>
1a00742c:	4618      	mov	r0, r3
1a00742e:	e6fb      	b.n	1a007228 <__udivmoddi4+0x8c>
1a007430:	4541      	cmp	r1, r8
1a007432:	d2ab      	bcs.n	1a00738c <__udivmoddi4+0x1f0>
1a007434:	ebb8 0a02 	subs.w	sl, r8, r2
1a007438:	eb69 020e 	sbc.w	r2, r9, lr
1a00743c:	3801      	subs	r0, #1
1a00743e:	4613      	mov	r3, r2
1a007440:	e7a4      	b.n	1a00738c <__udivmoddi4+0x1f0>
1a007442:	4660      	mov	r0, ip
1a007444:	e7e9      	b.n	1a00741a <__udivmoddi4+0x27e>
1a007446:	4618      	mov	r0, r3
1a007448:	e795      	b.n	1a007376 <__udivmoddi4+0x1da>
1a00744a:	4667      	mov	r7, ip
1a00744c:	e7d1      	b.n	1a0073f2 <__udivmoddi4+0x256>
1a00744e:	4681      	mov	r9, r0
1a007450:	e77c      	b.n	1a00734c <__udivmoddi4+0x1b0>
1a007452:	3802      	subs	r0, #2
1a007454:	442c      	add	r4, r5
1a007456:	e747      	b.n	1a0072e8 <__udivmoddi4+0x14c>
1a007458:	f1ac 0c02 	sub.w	ip, ip, #2
1a00745c:	442b      	add	r3, r5
1a00745e:	e72f      	b.n	1a0072c0 <__udivmoddi4+0x124>
1a007460:	4638      	mov	r0, r7
1a007462:	e708      	b.n	1a007276 <__udivmoddi4+0xda>
1a007464:	4637      	mov	r7, r6
1a007466:	e6e9      	b.n	1a00723c <__udivmoddi4+0xa0>

1a007468 <__aeabi_idiv0>:
1a007468:	4770      	bx	lr
1a00746a:	bf00      	nop

1a00746c <__sflush_r>:
1a00746c:	898a      	ldrh	r2, [r1, #12]
1a00746e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a007472:	4605      	mov	r5, r0
1a007474:	0710      	lsls	r0, r2, #28
1a007476:	460c      	mov	r4, r1
1a007478:	d458      	bmi.n	1a00752c <__sflush_r+0xc0>
1a00747a:	684b      	ldr	r3, [r1, #4]
1a00747c:	2b00      	cmp	r3, #0
1a00747e:	dc05      	bgt.n	1a00748c <__sflush_r+0x20>
1a007480:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a007482:	2b00      	cmp	r3, #0
1a007484:	dc02      	bgt.n	1a00748c <__sflush_r+0x20>
1a007486:	2000      	movs	r0, #0
1a007488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00748c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a00748e:	2e00      	cmp	r6, #0
1a007490:	d0f9      	beq.n	1a007486 <__sflush_r+0x1a>
1a007492:	2300      	movs	r3, #0
1a007494:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a007498:	682f      	ldr	r7, [r5, #0]
1a00749a:	6a21      	ldr	r1, [r4, #32]
1a00749c:	602b      	str	r3, [r5, #0]
1a00749e:	d032      	beq.n	1a007506 <__sflush_r+0x9a>
1a0074a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a0074a2:	89a3      	ldrh	r3, [r4, #12]
1a0074a4:	075a      	lsls	r2, r3, #29
1a0074a6:	d505      	bpl.n	1a0074b4 <__sflush_r+0x48>
1a0074a8:	6863      	ldr	r3, [r4, #4]
1a0074aa:	1ac0      	subs	r0, r0, r3
1a0074ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a0074ae:	b10b      	cbz	r3, 1a0074b4 <__sflush_r+0x48>
1a0074b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0074b2:	1ac0      	subs	r0, r0, r3
1a0074b4:	2300      	movs	r3, #0
1a0074b6:	4602      	mov	r2, r0
1a0074b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a0074ba:	6a21      	ldr	r1, [r4, #32]
1a0074bc:	4628      	mov	r0, r5
1a0074be:	47b0      	blx	r6
1a0074c0:	1c43      	adds	r3, r0, #1
1a0074c2:	89a3      	ldrh	r3, [r4, #12]
1a0074c4:	d106      	bne.n	1a0074d4 <__sflush_r+0x68>
1a0074c6:	6829      	ldr	r1, [r5, #0]
1a0074c8:	291d      	cmp	r1, #29
1a0074ca:	d848      	bhi.n	1a00755e <__sflush_r+0xf2>
1a0074cc:	4a29      	ldr	r2, [pc, #164]	; (1a007574 <__sflush_r+0x108>)
1a0074ce:	40ca      	lsrs	r2, r1
1a0074d0:	07d6      	lsls	r6, r2, #31
1a0074d2:	d544      	bpl.n	1a00755e <__sflush_r+0xf2>
1a0074d4:	2200      	movs	r2, #0
1a0074d6:	6062      	str	r2, [r4, #4]
1a0074d8:	04d9      	lsls	r1, r3, #19
1a0074da:	6922      	ldr	r2, [r4, #16]
1a0074dc:	6022      	str	r2, [r4, #0]
1a0074de:	d504      	bpl.n	1a0074ea <__sflush_r+0x7e>
1a0074e0:	1c42      	adds	r2, r0, #1
1a0074e2:	d101      	bne.n	1a0074e8 <__sflush_r+0x7c>
1a0074e4:	682b      	ldr	r3, [r5, #0]
1a0074e6:	b903      	cbnz	r3, 1a0074ea <__sflush_r+0x7e>
1a0074e8:	6560      	str	r0, [r4, #84]	; 0x54
1a0074ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a0074ec:	602f      	str	r7, [r5, #0]
1a0074ee:	2900      	cmp	r1, #0
1a0074f0:	d0c9      	beq.n	1a007486 <__sflush_r+0x1a>
1a0074f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a0074f6:	4299      	cmp	r1, r3
1a0074f8:	d002      	beq.n	1a007500 <__sflush_r+0x94>
1a0074fa:	4628      	mov	r0, r5
1a0074fc:	f000 f968 	bl	1a0077d0 <_free_r>
1a007500:	2000      	movs	r0, #0
1a007502:	6360      	str	r0, [r4, #52]	; 0x34
1a007504:	e7c0      	b.n	1a007488 <__sflush_r+0x1c>
1a007506:	2301      	movs	r3, #1
1a007508:	4628      	mov	r0, r5
1a00750a:	47b0      	blx	r6
1a00750c:	1c41      	adds	r1, r0, #1
1a00750e:	d1c8      	bne.n	1a0074a2 <__sflush_r+0x36>
1a007510:	682b      	ldr	r3, [r5, #0]
1a007512:	2b00      	cmp	r3, #0
1a007514:	d0c5      	beq.n	1a0074a2 <__sflush_r+0x36>
1a007516:	2b1d      	cmp	r3, #29
1a007518:	d001      	beq.n	1a00751e <__sflush_r+0xb2>
1a00751a:	2b16      	cmp	r3, #22
1a00751c:	d101      	bne.n	1a007522 <__sflush_r+0xb6>
1a00751e:	602f      	str	r7, [r5, #0]
1a007520:	e7b1      	b.n	1a007486 <__sflush_r+0x1a>
1a007522:	89a3      	ldrh	r3, [r4, #12]
1a007524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a007528:	81a3      	strh	r3, [r4, #12]
1a00752a:	e7ad      	b.n	1a007488 <__sflush_r+0x1c>
1a00752c:	690f      	ldr	r7, [r1, #16]
1a00752e:	2f00      	cmp	r7, #0
1a007530:	d0a9      	beq.n	1a007486 <__sflush_r+0x1a>
1a007532:	0793      	lsls	r3, r2, #30
1a007534:	680e      	ldr	r6, [r1, #0]
1a007536:	bf08      	it	eq
1a007538:	694b      	ldreq	r3, [r1, #20]
1a00753a:	600f      	str	r7, [r1, #0]
1a00753c:	bf18      	it	ne
1a00753e:	2300      	movne	r3, #0
1a007540:	eba6 0807 	sub.w	r8, r6, r7
1a007544:	608b      	str	r3, [r1, #8]
1a007546:	f1b8 0f00 	cmp.w	r8, #0
1a00754a:	dd9c      	ble.n	1a007486 <__sflush_r+0x1a>
1a00754c:	4643      	mov	r3, r8
1a00754e:	463a      	mov	r2, r7
1a007550:	6a21      	ldr	r1, [r4, #32]
1a007552:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a007554:	4628      	mov	r0, r5
1a007556:	47b0      	blx	r6
1a007558:	2800      	cmp	r0, #0
1a00755a:	dc06      	bgt.n	1a00756a <__sflush_r+0xfe>
1a00755c:	89a3      	ldrh	r3, [r4, #12]
1a00755e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a007562:	81a3      	strh	r3, [r4, #12]
1a007564:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a007568:	e78e      	b.n	1a007488 <__sflush_r+0x1c>
1a00756a:	4407      	add	r7, r0
1a00756c:	eba8 0800 	sub.w	r8, r8, r0
1a007570:	e7e9      	b.n	1a007546 <__sflush_r+0xda>
1a007572:	bf00      	nop
1a007574:	20400001 	.word	0x20400001

1a007578 <_fflush_r>:
1a007578:	b538      	push	{r3, r4, r5, lr}
1a00757a:	690b      	ldr	r3, [r1, #16]
1a00757c:	4605      	mov	r5, r0
1a00757e:	460c      	mov	r4, r1
1a007580:	b1db      	cbz	r3, 1a0075ba <_fflush_r+0x42>
1a007582:	b118      	cbz	r0, 1a00758c <_fflush_r+0x14>
1a007584:	6983      	ldr	r3, [r0, #24]
1a007586:	b90b      	cbnz	r3, 1a00758c <_fflush_r+0x14>
1a007588:	f000 f860 	bl	1a00764c <__sinit>
1a00758c:	4b0c      	ldr	r3, [pc, #48]	; (1a0075c0 <_fflush_r+0x48>)
1a00758e:	429c      	cmp	r4, r3
1a007590:	d109      	bne.n	1a0075a6 <_fflush_r+0x2e>
1a007592:	686c      	ldr	r4, [r5, #4]
1a007594:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007598:	b17b      	cbz	r3, 1a0075ba <_fflush_r+0x42>
1a00759a:	4621      	mov	r1, r4
1a00759c:	4628      	mov	r0, r5
1a00759e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a0075a2:	f7ff bf63 	b.w	1a00746c <__sflush_r>
1a0075a6:	4b07      	ldr	r3, [pc, #28]	; (1a0075c4 <_fflush_r+0x4c>)
1a0075a8:	429c      	cmp	r4, r3
1a0075aa:	d101      	bne.n	1a0075b0 <_fflush_r+0x38>
1a0075ac:	68ac      	ldr	r4, [r5, #8]
1a0075ae:	e7f1      	b.n	1a007594 <_fflush_r+0x1c>
1a0075b0:	4b05      	ldr	r3, [pc, #20]	; (1a0075c8 <_fflush_r+0x50>)
1a0075b2:	429c      	cmp	r4, r3
1a0075b4:	bf08      	it	eq
1a0075b6:	68ec      	ldreq	r4, [r5, #12]
1a0075b8:	e7ec      	b.n	1a007594 <_fflush_r+0x1c>
1a0075ba:	2000      	movs	r0, #0
1a0075bc:	bd38      	pop	{r3, r4, r5, pc}
1a0075be:	bf00      	nop
1a0075c0:	1a008ecc 	.word	0x1a008ecc
1a0075c4:	1a008eec 	.word	0x1a008eec
1a0075c8:	1a008eac 	.word	0x1a008eac

1a0075cc <std>:
1a0075cc:	2300      	movs	r3, #0
1a0075ce:	b510      	push	{r4, lr}
1a0075d0:	4604      	mov	r4, r0
1a0075d2:	e9c0 3300 	strd	r3, r3, [r0]
1a0075d6:	6083      	str	r3, [r0, #8]
1a0075d8:	8181      	strh	r1, [r0, #12]
1a0075da:	6643      	str	r3, [r0, #100]	; 0x64
1a0075dc:	81c2      	strh	r2, [r0, #14]
1a0075de:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a0075e2:	6183      	str	r3, [r0, #24]
1a0075e4:	4619      	mov	r1, r3
1a0075e6:	2208      	movs	r2, #8
1a0075e8:	305c      	adds	r0, #92	; 0x5c
1a0075ea:	f000 f8e8 	bl	1a0077be <memset>
1a0075ee:	4b05      	ldr	r3, [pc, #20]	; (1a007604 <std+0x38>)
1a0075f0:	6263      	str	r3, [r4, #36]	; 0x24
1a0075f2:	4b05      	ldr	r3, [pc, #20]	; (1a007608 <std+0x3c>)
1a0075f4:	62a3      	str	r3, [r4, #40]	; 0x28
1a0075f6:	4b05      	ldr	r3, [pc, #20]	; (1a00760c <std+0x40>)
1a0075f8:	62e3      	str	r3, [r4, #44]	; 0x2c
1a0075fa:	4b05      	ldr	r3, [pc, #20]	; (1a007610 <std+0x44>)
1a0075fc:	6224      	str	r4, [r4, #32]
1a0075fe:	6323      	str	r3, [r4, #48]	; 0x30
1a007600:	bd10      	pop	{r4, pc}
1a007602:	bf00      	nop
1a007604:	1a007a19 	.word	0x1a007a19
1a007608:	1a007a3b 	.word	0x1a007a3b
1a00760c:	1a007a73 	.word	0x1a007a73
1a007610:	1a007a97 	.word	0x1a007a97

1a007614 <_cleanup_r>:
1a007614:	4901      	ldr	r1, [pc, #4]	; (1a00761c <_cleanup_r+0x8>)
1a007616:	f000 b885 	b.w	1a007724 <_fwalk_reent>
1a00761a:	bf00      	nop
1a00761c:	1a007579 	.word	0x1a007579

1a007620 <__sfmoreglue>:
1a007620:	b570      	push	{r4, r5, r6, lr}
1a007622:	1e4a      	subs	r2, r1, #1
1a007624:	2568      	movs	r5, #104	; 0x68
1a007626:	4355      	muls	r5, r2
1a007628:	460e      	mov	r6, r1
1a00762a:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a00762e:	f000 f91d 	bl	1a00786c <_malloc_r>
1a007632:	4604      	mov	r4, r0
1a007634:	b140      	cbz	r0, 1a007648 <__sfmoreglue+0x28>
1a007636:	2100      	movs	r1, #0
1a007638:	e9c0 1600 	strd	r1, r6, [r0]
1a00763c:	300c      	adds	r0, #12
1a00763e:	60a0      	str	r0, [r4, #8]
1a007640:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a007644:	f000 f8bb 	bl	1a0077be <memset>
1a007648:	4620      	mov	r0, r4
1a00764a:	bd70      	pop	{r4, r5, r6, pc}

1a00764c <__sinit>:
1a00764c:	6983      	ldr	r3, [r0, #24]
1a00764e:	b510      	push	{r4, lr}
1a007650:	4604      	mov	r4, r0
1a007652:	bb33      	cbnz	r3, 1a0076a2 <__sinit+0x56>
1a007654:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
1a007658:	6503      	str	r3, [r0, #80]	; 0x50
1a00765a:	4b12      	ldr	r3, [pc, #72]	; (1a0076a4 <__sinit+0x58>)
1a00765c:	4a12      	ldr	r2, [pc, #72]	; (1a0076a8 <__sinit+0x5c>)
1a00765e:	681b      	ldr	r3, [r3, #0]
1a007660:	6282      	str	r2, [r0, #40]	; 0x28
1a007662:	4298      	cmp	r0, r3
1a007664:	bf04      	itt	eq
1a007666:	2301      	moveq	r3, #1
1a007668:	6183      	streq	r3, [r0, #24]
1a00766a:	f000 f81f 	bl	1a0076ac <__sfp>
1a00766e:	6060      	str	r0, [r4, #4]
1a007670:	4620      	mov	r0, r4
1a007672:	f000 f81b 	bl	1a0076ac <__sfp>
1a007676:	60a0      	str	r0, [r4, #8]
1a007678:	4620      	mov	r0, r4
1a00767a:	f000 f817 	bl	1a0076ac <__sfp>
1a00767e:	2200      	movs	r2, #0
1a007680:	60e0      	str	r0, [r4, #12]
1a007682:	2104      	movs	r1, #4
1a007684:	6860      	ldr	r0, [r4, #4]
1a007686:	f7ff ffa1 	bl	1a0075cc <std>
1a00768a:	2201      	movs	r2, #1
1a00768c:	2109      	movs	r1, #9
1a00768e:	68a0      	ldr	r0, [r4, #8]
1a007690:	f7ff ff9c 	bl	1a0075cc <std>
1a007694:	2202      	movs	r2, #2
1a007696:	2112      	movs	r1, #18
1a007698:	68e0      	ldr	r0, [r4, #12]
1a00769a:	f7ff ff97 	bl	1a0075cc <std>
1a00769e:	2301      	movs	r3, #1
1a0076a0:	61a3      	str	r3, [r4, #24]
1a0076a2:	bd10      	pop	{r4, pc}
1a0076a4:	1a008f0c 	.word	0x1a008f0c
1a0076a8:	1a007615 	.word	0x1a007615

1a0076ac <__sfp>:
1a0076ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0076ae:	4b1b      	ldr	r3, [pc, #108]	; (1a00771c <__sfp+0x70>)
1a0076b0:	681e      	ldr	r6, [r3, #0]
1a0076b2:	69b3      	ldr	r3, [r6, #24]
1a0076b4:	4607      	mov	r7, r0
1a0076b6:	b913      	cbnz	r3, 1a0076be <__sfp+0x12>
1a0076b8:	4630      	mov	r0, r6
1a0076ba:	f7ff ffc7 	bl	1a00764c <__sinit>
1a0076be:	3648      	adds	r6, #72	; 0x48
1a0076c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a0076c4:	3b01      	subs	r3, #1
1a0076c6:	d503      	bpl.n	1a0076d0 <__sfp+0x24>
1a0076c8:	6833      	ldr	r3, [r6, #0]
1a0076ca:	b133      	cbz	r3, 1a0076da <__sfp+0x2e>
1a0076cc:	6836      	ldr	r6, [r6, #0]
1a0076ce:	e7f7      	b.n	1a0076c0 <__sfp+0x14>
1a0076d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a0076d4:	b16d      	cbz	r5, 1a0076f2 <__sfp+0x46>
1a0076d6:	3468      	adds	r4, #104	; 0x68
1a0076d8:	e7f4      	b.n	1a0076c4 <__sfp+0x18>
1a0076da:	2104      	movs	r1, #4
1a0076dc:	4638      	mov	r0, r7
1a0076de:	f7ff ff9f 	bl	1a007620 <__sfmoreglue>
1a0076e2:	6030      	str	r0, [r6, #0]
1a0076e4:	2800      	cmp	r0, #0
1a0076e6:	d1f1      	bne.n	1a0076cc <__sfp+0x20>
1a0076e8:	230c      	movs	r3, #12
1a0076ea:	603b      	str	r3, [r7, #0]
1a0076ec:	4604      	mov	r4, r0
1a0076ee:	4620      	mov	r0, r4
1a0076f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0076f2:	4b0b      	ldr	r3, [pc, #44]	; (1a007720 <__sfp+0x74>)
1a0076f4:	6665      	str	r5, [r4, #100]	; 0x64
1a0076f6:	e9c4 5500 	strd	r5, r5, [r4]
1a0076fa:	60a5      	str	r5, [r4, #8]
1a0076fc:	e9c4 3503 	strd	r3, r5, [r4, #12]
1a007700:	e9c4 5505 	strd	r5, r5, [r4, #20]
1a007704:	2208      	movs	r2, #8
1a007706:	4629      	mov	r1, r5
1a007708:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a00770c:	f000 f857 	bl	1a0077be <memset>
1a007710:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a007714:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a007718:	e7e9      	b.n	1a0076ee <__sfp+0x42>
1a00771a:	bf00      	nop
1a00771c:	1a008f0c 	.word	0x1a008f0c
1a007720:	ffff0001 	.word	0xffff0001

1a007724 <_fwalk_reent>:
1a007724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a007728:	4680      	mov	r8, r0
1a00772a:	4689      	mov	r9, r1
1a00772c:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a007730:	2600      	movs	r6, #0
1a007732:	b914      	cbnz	r4, 1a00773a <_fwalk_reent+0x16>
1a007734:	4630      	mov	r0, r6
1a007736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00773a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a00773e:	3f01      	subs	r7, #1
1a007740:	d501      	bpl.n	1a007746 <_fwalk_reent+0x22>
1a007742:	6824      	ldr	r4, [r4, #0]
1a007744:	e7f5      	b.n	1a007732 <_fwalk_reent+0xe>
1a007746:	89ab      	ldrh	r3, [r5, #12]
1a007748:	2b01      	cmp	r3, #1
1a00774a:	d907      	bls.n	1a00775c <_fwalk_reent+0x38>
1a00774c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a007750:	3301      	adds	r3, #1
1a007752:	d003      	beq.n	1a00775c <_fwalk_reent+0x38>
1a007754:	4629      	mov	r1, r5
1a007756:	4640      	mov	r0, r8
1a007758:	47c8      	blx	r9
1a00775a:	4306      	orrs	r6, r0
1a00775c:	3568      	adds	r5, #104	; 0x68
1a00775e:	e7ee      	b.n	1a00773e <_fwalk_reent+0x1a>

1a007760 <__libc_init_array>:
1a007760:	b570      	push	{r4, r5, r6, lr}
1a007762:	4e0d      	ldr	r6, [pc, #52]	; (1a007798 <__libc_init_array+0x38>)
1a007764:	4c0d      	ldr	r4, [pc, #52]	; (1a00779c <__libc_init_array+0x3c>)
1a007766:	1ba4      	subs	r4, r4, r6
1a007768:	10a4      	asrs	r4, r4, #2
1a00776a:	2500      	movs	r5, #0
1a00776c:	42a5      	cmp	r5, r4
1a00776e:	d109      	bne.n	1a007784 <__libc_init_array+0x24>
1a007770:	4e0b      	ldr	r6, [pc, #44]	; (1a0077a0 <__libc_init_array+0x40>)
1a007772:	4c0c      	ldr	r4, [pc, #48]	; (1a0077a4 <__libc_init_array+0x44>)
1a007774:	f7f9 f85f 	bl	1a000836 <_init>
1a007778:	1ba4      	subs	r4, r4, r6
1a00777a:	10a4      	asrs	r4, r4, #2
1a00777c:	2500      	movs	r5, #0
1a00777e:	42a5      	cmp	r5, r4
1a007780:	d105      	bne.n	1a00778e <__libc_init_array+0x2e>
1a007782:	bd70      	pop	{r4, r5, r6, pc}
1a007784:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a007788:	4798      	blx	r3
1a00778a:	3501      	adds	r5, #1
1a00778c:	e7ee      	b.n	1a00776c <__libc_init_array+0xc>
1a00778e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a007792:	4798      	blx	r3
1a007794:	3501      	adds	r5, #1
1a007796:	e7f2      	b.n	1a00777e <__libc_init_array+0x1e>
1a007798:	1a008f44 	.word	0x1a008f44
1a00779c:	1a008f44 	.word	0x1a008f44
1a0077a0:	1a008f44 	.word	0x1a008f44
1a0077a4:	1a008f48 	.word	0x1a008f48

1a0077a8 <memcpy>:
1a0077a8:	b510      	push	{r4, lr}
1a0077aa:	1e43      	subs	r3, r0, #1
1a0077ac:	440a      	add	r2, r1
1a0077ae:	4291      	cmp	r1, r2
1a0077b0:	d100      	bne.n	1a0077b4 <memcpy+0xc>
1a0077b2:	bd10      	pop	{r4, pc}
1a0077b4:	f811 4b01 	ldrb.w	r4, [r1], #1
1a0077b8:	f803 4f01 	strb.w	r4, [r3, #1]!
1a0077bc:	e7f7      	b.n	1a0077ae <memcpy+0x6>

1a0077be <memset>:
1a0077be:	4402      	add	r2, r0
1a0077c0:	4603      	mov	r3, r0
1a0077c2:	4293      	cmp	r3, r2
1a0077c4:	d100      	bne.n	1a0077c8 <memset+0xa>
1a0077c6:	4770      	bx	lr
1a0077c8:	f803 1b01 	strb.w	r1, [r3], #1
1a0077cc:	e7f9      	b.n	1a0077c2 <memset+0x4>
1a0077ce:	Address 0x000000001a0077ce is out of bounds.


1a0077d0 <_free_r>:
1a0077d0:	b538      	push	{r3, r4, r5, lr}
1a0077d2:	4605      	mov	r5, r0
1a0077d4:	2900      	cmp	r1, #0
1a0077d6:	d045      	beq.n	1a007864 <_free_r+0x94>
1a0077d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a0077dc:	1f0c      	subs	r4, r1, #4
1a0077de:	2b00      	cmp	r3, #0
1a0077e0:	bfb8      	it	lt
1a0077e2:	18e4      	addlt	r4, r4, r3
1a0077e4:	f000 fa80 	bl	1a007ce8 <__malloc_lock>
1a0077e8:	4a1f      	ldr	r2, [pc, #124]	; (1a007868 <_free_r+0x98>)
1a0077ea:	6813      	ldr	r3, [r2, #0]
1a0077ec:	4610      	mov	r0, r2
1a0077ee:	b933      	cbnz	r3, 1a0077fe <_free_r+0x2e>
1a0077f0:	6063      	str	r3, [r4, #4]
1a0077f2:	6014      	str	r4, [r2, #0]
1a0077f4:	4628      	mov	r0, r5
1a0077f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a0077fa:	f000 ba76 	b.w	1a007cea <__malloc_unlock>
1a0077fe:	42a3      	cmp	r3, r4
1a007800:	d90c      	bls.n	1a00781c <_free_r+0x4c>
1a007802:	6821      	ldr	r1, [r4, #0]
1a007804:	1862      	adds	r2, r4, r1
1a007806:	4293      	cmp	r3, r2
1a007808:	bf04      	itt	eq
1a00780a:	681a      	ldreq	r2, [r3, #0]
1a00780c:	685b      	ldreq	r3, [r3, #4]
1a00780e:	6063      	str	r3, [r4, #4]
1a007810:	bf04      	itt	eq
1a007812:	1852      	addeq	r2, r2, r1
1a007814:	6022      	streq	r2, [r4, #0]
1a007816:	6004      	str	r4, [r0, #0]
1a007818:	e7ec      	b.n	1a0077f4 <_free_r+0x24>
1a00781a:	4613      	mov	r3, r2
1a00781c:	685a      	ldr	r2, [r3, #4]
1a00781e:	b10a      	cbz	r2, 1a007824 <_free_r+0x54>
1a007820:	42a2      	cmp	r2, r4
1a007822:	d9fa      	bls.n	1a00781a <_free_r+0x4a>
1a007824:	6819      	ldr	r1, [r3, #0]
1a007826:	1858      	adds	r0, r3, r1
1a007828:	42a0      	cmp	r0, r4
1a00782a:	d10b      	bne.n	1a007844 <_free_r+0x74>
1a00782c:	6820      	ldr	r0, [r4, #0]
1a00782e:	4401      	add	r1, r0
1a007830:	1858      	adds	r0, r3, r1
1a007832:	4282      	cmp	r2, r0
1a007834:	6019      	str	r1, [r3, #0]
1a007836:	d1dd      	bne.n	1a0077f4 <_free_r+0x24>
1a007838:	6810      	ldr	r0, [r2, #0]
1a00783a:	6852      	ldr	r2, [r2, #4]
1a00783c:	605a      	str	r2, [r3, #4]
1a00783e:	4401      	add	r1, r0
1a007840:	6019      	str	r1, [r3, #0]
1a007842:	e7d7      	b.n	1a0077f4 <_free_r+0x24>
1a007844:	d902      	bls.n	1a00784c <_free_r+0x7c>
1a007846:	230c      	movs	r3, #12
1a007848:	602b      	str	r3, [r5, #0]
1a00784a:	e7d3      	b.n	1a0077f4 <_free_r+0x24>
1a00784c:	6820      	ldr	r0, [r4, #0]
1a00784e:	1821      	adds	r1, r4, r0
1a007850:	428a      	cmp	r2, r1
1a007852:	bf04      	itt	eq
1a007854:	6811      	ldreq	r1, [r2, #0]
1a007856:	6852      	ldreq	r2, [r2, #4]
1a007858:	6062      	str	r2, [r4, #4]
1a00785a:	bf04      	itt	eq
1a00785c:	1809      	addeq	r1, r1, r0
1a00785e:	6021      	streq	r1, [r4, #0]
1a007860:	605c      	str	r4, [r3, #4]
1a007862:	e7c7      	b.n	1a0077f4 <_free_r+0x24>
1a007864:	bd38      	pop	{r3, r4, r5, pc}
1a007866:	bf00      	nop
1a007868:	10003498 	.word	0x10003498

1a00786c <_malloc_r>:
1a00786c:	b570      	push	{r4, r5, r6, lr}
1a00786e:	1ccd      	adds	r5, r1, #3
1a007870:	f025 0503 	bic.w	r5, r5, #3
1a007874:	3508      	adds	r5, #8
1a007876:	2d0c      	cmp	r5, #12
1a007878:	bf38      	it	cc
1a00787a:	250c      	movcc	r5, #12
1a00787c:	2d00      	cmp	r5, #0
1a00787e:	4606      	mov	r6, r0
1a007880:	db01      	blt.n	1a007886 <_malloc_r+0x1a>
1a007882:	42a9      	cmp	r1, r5
1a007884:	d903      	bls.n	1a00788e <_malloc_r+0x22>
1a007886:	230c      	movs	r3, #12
1a007888:	6033      	str	r3, [r6, #0]
1a00788a:	2000      	movs	r0, #0
1a00788c:	bd70      	pop	{r4, r5, r6, pc}
1a00788e:	f000 fa2b 	bl	1a007ce8 <__malloc_lock>
1a007892:	4a21      	ldr	r2, [pc, #132]	; (1a007918 <_malloc_r+0xac>)
1a007894:	6814      	ldr	r4, [r2, #0]
1a007896:	4621      	mov	r1, r4
1a007898:	b991      	cbnz	r1, 1a0078c0 <_malloc_r+0x54>
1a00789a:	4c20      	ldr	r4, [pc, #128]	; (1a00791c <_malloc_r+0xb0>)
1a00789c:	6823      	ldr	r3, [r4, #0]
1a00789e:	b91b      	cbnz	r3, 1a0078a8 <_malloc_r+0x3c>
1a0078a0:	4630      	mov	r0, r6
1a0078a2:	f7f9 f81d 	bl	1a0008e0 <_sbrk_r>
1a0078a6:	6020      	str	r0, [r4, #0]
1a0078a8:	4629      	mov	r1, r5
1a0078aa:	4630      	mov	r0, r6
1a0078ac:	f7f9 f818 	bl	1a0008e0 <_sbrk_r>
1a0078b0:	1c43      	adds	r3, r0, #1
1a0078b2:	d124      	bne.n	1a0078fe <_malloc_r+0x92>
1a0078b4:	230c      	movs	r3, #12
1a0078b6:	6033      	str	r3, [r6, #0]
1a0078b8:	4630      	mov	r0, r6
1a0078ba:	f000 fa16 	bl	1a007cea <__malloc_unlock>
1a0078be:	e7e4      	b.n	1a00788a <_malloc_r+0x1e>
1a0078c0:	680b      	ldr	r3, [r1, #0]
1a0078c2:	1b5b      	subs	r3, r3, r5
1a0078c4:	d418      	bmi.n	1a0078f8 <_malloc_r+0x8c>
1a0078c6:	2b0b      	cmp	r3, #11
1a0078c8:	d90f      	bls.n	1a0078ea <_malloc_r+0x7e>
1a0078ca:	600b      	str	r3, [r1, #0]
1a0078cc:	50cd      	str	r5, [r1, r3]
1a0078ce:	18cc      	adds	r4, r1, r3
1a0078d0:	4630      	mov	r0, r6
1a0078d2:	f000 fa0a 	bl	1a007cea <__malloc_unlock>
1a0078d6:	f104 000b 	add.w	r0, r4, #11
1a0078da:	1d23      	adds	r3, r4, #4
1a0078dc:	f020 0007 	bic.w	r0, r0, #7
1a0078e0:	1ac3      	subs	r3, r0, r3
1a0078e2:	d0d3      	beq.n	1a00788c <_malloc_r+0x20>
1a0078e4:	425a      	negs	r2, r3
1a0078e6:	50e2      	str	r2, [r4, r3]
1a0078e8:	e7d0      	b.n	1a00788c <_malloc_r+0x20>
1a0078ea:	428c      	cmp	r4, r1
1a0078ec:	684b      	ldr	r3, [r1, #4]
1a0078ee:	bf16      	itet	ne
1a0078f0:	6063      	strne	r3, [r4, #4]
1a0078f2:	6013      	streq	r3, [r2, #0]
1a0078f4:	460c      	movne	r4, r1
1a0078f6:	e7eb      	b.n	1a0078d0 <_malloc_r+0x64>
1a0078f8:	460c      	mov	r4, r1
1a0078fa:	6849      	ldr	r1, [r1, #4]
1a0078fc:	e7cc      	b.n	1a007898 <_malloc_r+0x2c>
1a0078fe:	1cc4      	adds	r4, r0, #3
1a007900:	f024 0403 	bic.w	r4, r4, #3
1a007904:	42a0      	cmp	r0, r4
1a007906:	d005      	beq.n	1a007914 <_malloc_r+0xa8>
1a007908:	1a21      	subs	r1, r4, r0
1a00790a:	4630      	mov	r0, r6
1a00790c:	f7f8 ffe8 	bl	1a0008e0 <_sbrk_r>
1a007910:	3001      	adds	r0, #1
1a007912:	d0cf      	beq.n	1a0078b4 <_malloc_r+0x48>
1a007914:	6025      	str	r5, [r4, #0]
1a007916:	e7db      	b.n	1a0078d0 <_malloc_r+0x64>
1a007918:	10003498 	.word	0x10003498
1a00791c:	1000349c 	.word	0x1000349c

1a007920 <iprintf>:
1a007920:	b40f      	push	{r0, r1, r2, r3}
1a007922:	4b0a      	ldr	r3, [pc, #40]	; (1a00794c <iprintf+0x2c>)
1a007924:	b513      	push	{r0, r1, r4, lr}
1a007926:	681c      	ldr	r4, [r3, #0]
1a007928:	b124      	cbz	r4, 1a007934 <iprintf+0x14>
1a00792a:	69a3      	ldr	r3, [r4, #24]
1a00792c:	b913      	cbnz	r3, 1a007934 <iprintf+0x14>
1a00792e:	4620      	mov	r0, r4
1a007930:	f7ff fe8c 	bl	1a00764c <__sinit>
1a007934:	ab05      	add	r3, sp, #20
1a007936:	9a04      	ldr	r2, [sp, #16]
1a007938:	68a1      	ldr	r1, [r4, #8]
1a00793a:	9301      	str	r3, [sp, #4]
1a00793c:	4620      	mov	r0, r4
1a00793e:	f000 f9ff 	bl	1a007d40 <_vfiprintf_r>
1a007942:	b002      	add	sp, #8
1a007944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a007948:	b004      	add	sp, #16
1a00794a:	4770      	bx	lr
1a00794c:	10000068 	.word	0x10000068

1a007950 <_puts_r>:
1a007950:	b570      	push	{r4, r5, r6, lr}
1a007952:	460e      	mov	r6, r1
1a007954:	4605      	mov	r5, r0
1a007956:	b118      	cbz	r0, 1a007960 <_puts_r+0x10>
1a007958:	6983      	ldr	r3, [r0, #24]
1a00795a:	b90b      	cbnz	r3, 1a007960 <_puts_r+0x10>
1a00795c:	f7ff fe76 	bl	1a00764c <__sinit>
1a007960:	69ab      	ldr	r3, [r5, #24]
1a007962:	68ac      	ldr	r4, [r5, #8]
1a007964:	b913      	cbnz	r3, 1a00796c <_puts_r+0x1c>
1a007966:	4628      	mov	r0, r5
1a007968:	f7ff fe70 	bl	1a00764c <__sinit>
1a00796c:	4b23      	ldr	r3, [pc, #140]	; (1a0079fc <_puts_r+0xac>)
1a00796e:	429c      	cmp	r4, r3
1a007970:	d117      	bne.n	1a0079a2 <_puts_r+0x52>
1a007972:	686c      	ldr	r4, [r5, #4]
1a007974:	89a3      	ldrh	r3, [r4, #12]
1a007976:	071b      	lsls	r3, r3, #28
1a007978:	d51d      	bpl.n	1a0079b6 <_puts_r+0x66>
1a00797a:	6923      	ldr	r3, [r4, #16]
1a00797c:	b1db      	cbz	r3, 1a0079b6 <_puts_r+0x66>
1a00797e:	3e01      	subs	r6, #1
1a007980:	68a3      	ldr	r3, [r4, #8]
1a007982:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a007986:	3b01      	subs	r3, #1
1a007988:	60a3      	str	r3, [r4, #8]
1a00798a:	b9e9      	cbnz	r1, 1a0079c8 <_puts_r+0x78>
1a00798c:	2b00      	cmp	r3, #0
1a00798e:	da2e      	bge.n	1a0079ee <_puts_r+0x9e>
1a007990:	4622      	mov	r2, r4
1a007992:	210a      	movs	r1, #10
1a007994:	4628      	mov	r0, r5
1a007996:	f000 f883 	bl	1a007aa0 <__swbuf_r>
1a00799a:	3001      	adds	r0, #1
1a00799c:	d011      	beq.n	1a0079c2 <_puts_r+0x72>
1a00799e:	200a      	movs	r0, #10
1a0079a0:	e011      	b.n	1a0079c6 <_puts_r+0x76>
1a0079a2:	4b17      	ldr	r3, [pc, #92]	; (1a007a00 <_puts_r+0xb0>)
1a0079a4:	429c      	cmp	r4, r3
1a0079a6:	d101      	bne.n	1a0079ac <_puts_r+0x5c>
1a0079a8:	68ac      	ldr	r4, [r5, #8]
1a0079aa:	e7e3      	b.n	1a007974 <_puts_r+0x24>
1a0079ac:	4b15      	ldr	r3, [pc, #84]	; (1a007a04 <_puts_r+0xb4>)
1a0079ae:	429c      	cmp	r4, r3
1a0079b0:	bf08      	it	eq
1a0079b2:	68ec      	ldreq	r4, [r5, #12]
1a0079b4:	e7de      	b.n	1a007974 <_puts_r+0x24>
1a0079b6:	4621      	mov	r1, r4
1a0079b8:	4628      	mov	r0, r5
1a0079ba:	f000 f8c3 	bl	1a007b44 <__swsetup_r>
1a0079be:	2800      	cmp	r0, #0
1a0079c0:	d0dd      	beq.n	1a00797e <_puts_r+0x2e>
1a0079c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0079c6:	bd70      	pop	{r4, r5, r6, pc}
1a0079c8:	2b00      	cmp	r3, #0
1a0079ca:	da04      	bge.n	1a0079d6 <_puts_r+0x86>
1a0079cc:	69a2      	ldr	r2, [r4, #24]
1a0079ce:	429a      	cmp	r2, r3
1a0079d0:	dc06      	bgt.n	1a0079e0 <_puts_r+0x90>
1a0079d2:	290a      	cmp	r1, #10
1a0079d4:	d004      	beq.n	1a0079e0 <_puts_r+0x90>
1a0079d6:	6823      	ldr	r3, [r4, #0]
1a0079d8:	1c5a      	adds	r2, r3, #1
1a0079da:	6022      	str	r2, [r4, #0]
1a0079dc:	7019      	strb	r1, [r3, #0]
1a0079de:	e7cf      	b.n	1a007980 <_puts_r+0x30>
1a0079e0:	4622      	mov	r2, r4
1a0079e2:	4628      	mov	r0, r5
1a0079e4:	f000 f85c 	bl	1a007aa0 <__swbuf_r>
1a0079e8:	3001      	adds	r0, #1
1a0079ea:	d1c9      	bne.n	1a007980 <_puts_r+0x30>
1a0079ec:	e7e9      	b.n	1a0079c2 <_puts_r+0x72>
1a0079ee:	6823      	ldr	r3, [r4, #0]
1a0079f0:	200a      	movs	r0, #10
1a0079f2:	1c5a      	adds	r2, r3, #1
1a0079f4:	6022      	str	r2, [r4, #0]
1a0079f6:	7018      	strb	r0, [r3, #0]
1a0079f8:	e7e5      	b.n	1a0079c6 <_puts_r+0x76>
1a0079fa:	bf00      	nop
1a0079fc:	1a008ecc 	.word	0x1a008ecc
1a007a00:	1a008eec 	.word	0x1a008eec
1a007a04:	1a008eac 	.word	0x1a008eac

1a007a08 <puts>:
1a007a08:	4b02      	ldr	r3, [pc, #8]	; (1a007a14 <puts+0xc>)
1a007a0a:	4601      	mov	r1, r0
1a007a0c:	6818      	ldr	r0, [r3, #0]
1a007a0e:	f7ff bf9f 	b.w	1a007950 <_puts_r>
1a007a12:	bf00      	nop
1a007a14:	10000068 	.word	0x10000068

1a007a18 <__sread>:
1a007a18:	b510      	push	{r4, lr}
1a007a1a:	460c      	mov	r4, r1
1a007a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a007a20:	f7f8 ff22 	bl	1a000868 <_read_r>
1a007a24:	2800      	cmp	r0, #0
1a007a26:	bfab      	itete	ge
1a007a28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a007a2a:	89a3      	ldrhlt	r3, [r4, #12]
1a007a2c:	181b      	addge	r3, r3, r0
1a007a2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a007a32:	bfac      	ite	ge
1a007a34:	6563      	strge	r3, [r4, #84]	; 0x54
1a007a36:	81a3      	strhlt	r3, [r4, #12]
1a007a38:	bd10      	pop	{r4, pc}

1a007a3a <__swrite>:
1a007a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a007a3e:	461f      	mov	r7, r3
1a007a40:	898b      	ldrh	r3, [r1, #12]
1a007a42:	05db      	lsls	r3, r3, #23
1a007a44:	4605      	mov	r5, r0
1a007a46:	460c      	mov	r4, r1
1a007a48:	4616      	mov	r6, r2
1a007a4a:	d505      	bpl.n	1a007a58 <__swrite+0x1e>
1a007a4c:	2302      	movs	r3, #2
1a007a4e:	2200      	movs	r2, #0
1a007a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a007a54:	f7f8 ff03 	bl	1a00085e <_lseek_r>
1a007a58:	89a3      	ldrh	r3, [r4, #12]
1a007a5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a007a5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a007a62:	81a3      	strh	r3, [r4, #12]
1a007a64:	4632      	mov	r2, r6
1a007a66:	463b      	mov	r3, r7
1a007a68:	4628      	mov	r0, r5
1a007a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a007a6e:	f7f8 bf22 	b.w	1a0008b6 <_write_r>

1a007a72 <__sseek>:
1a007a72:	b510      	push	{r4, lr}
1a007a74:	460c      	mov	r4, r1
1a007a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a007a7a:	f7f8 fef0 	bl	1a00085e <_lseek_r>
1a007a7e:	1c43      	adds	r3, r0, #1
1a007a80:	89a3      	ldrh	r3, [r4, #12]
1a007a82:	bf15      	itete	ne
1a007a84:	6560      	strne	r0, [r4, #84]	; 0x54
1a007a86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a007a8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a007a8e:	81a3      	strheq	r3, [r4, #12]
1a007a90:	bf18      	it	ne
1a007a92:	81a3      	strhne	r3, [r4, #12]
1a007a94:	bd10      	pop	{r4, pc}

1a007a96 <__sclose>:
1a007a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a007a9a:	f7f8 becd 	b.w	1a000838 <_close_r>
1a007a9e:	Address 0x000000001a007a9e is out of bounds.


1a007aa0 <__swbuf_r>:
1a007aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a007aa2:	460e      	mov	r6, r1
1a007aa4:	4614      	mov	r4, r2
1a007aa6:	4605      	mov	r5, r0
1a007aa8:	b118      	cbz	r0, 1a007ab2 <__swbuf_r+0x12>
1a007aaa:	6983      	ldr	r3, [r0, #24]
1a007aac:	b90b      	cbnz	r3, 1a007ab2 <__swbuf_r+0x12>
1a007aae:	f7ff fdcd 	bl	1a00764c <__sinit>
1a007ab2:	4b21      	ldr	r3, [pc, #132]	; (1a007b38 <__swbuf_r+0x98>)
1a007ab4:	429c      	cmp	r4, r3
1a007ab6:	d12a      	bne.n	1a007b0e <__swbuf_r+0x6e>
1a007ab8:	686c      	ldr	r4, [r5, #4]
1a007aba:	69a3      	ldr	r3, [r4, #24]
1a007abc:	60a3      	str	r3, [r4, #8]
1a007abe:	89a3      	ldrh	r3, [r4, #12]
1a007ac0:	071a      	lsls	r2, r3, #28
1a007ac2:	d52e      	bpl.n	1a007b22 <__swbuf_r+0x82>
1a007ac4:	6923      	ldr	r3, [r4, #16]
1a007ac6:	b363      	cbz	r3, 1a007b22 <__swbuf_r+0x82>
1a007ac8:	6923      	ldr	r3, [r4, #16]
1a007aca:	6820      	ldr	r0, [r4, #0]
1a007acc:	1ac0      	subs	r0, r0, r3
1a007ace:	6963      	ldr	r3, [r4, #20]
1a007ad0:	b2f6      	uxtb	r6, r6
1a007ad2:	4283      	cmp	r3, r0
1a007ad4:	4637      	mov	r7, r6
1a007ad6:	dc04      	bgt.n	1a007ae2 <__swbuf_r+0x42>
1a007ad8:	4621      	mov	r1, r4
1a007ada:	4628      	mov	r0, r5
1a007adc:	f7ff fd4c 	bl	1a007578 <_fflush_r>
1a007ae0:	bb28      	cbnz	r0, 1a007b2e <__swbuf_r+0x8e>
1a007ae2:	68a3      	ldr	r3, [r4, #8]
1a007ae4:	3b01      	subs	r3, #1
1a007ae6:	60a3      	str	r3, [r4, #8]
1a007ae8:	6823      	ldr	r3, [r4, #0]
1a007aea:	1c5a      	adds	r2, r3, #1
1a007aec:	6022      	str	r2, [r4, #0]
1a007aee:	701e      	strb	r6, [r3, #0]
1a007af0:	6963      	ldr	r3, [r4, #20]
1a007af2:	3001      	adds	r0, #1
1a007af4:	4283      	cmp	r3, r0
1a007af6:	d004      	beq.n	1a007b02 <__swbuf_r+0x62>
1a007af8:	89a3      	ldrh	r3, [r4, #12]
1a007afa:	07db      	lsls	r3, r3, #31
1a007afc:	d519      	bpl.n	1a007b32 <__swbuf_r+0x92>
1a007afe:	2e0a      	cmp	r6, #10
1a007b00:	d117      	bne.n	1a007b32 <__swbuf_r+0x92>
1a007b02:	4621      	mov	r1, r4
1a007b04:	4628      	mov	r0, r5
1a007b06:	f7ff fd37 	bl	1a007578 <_fflush_r>
1a007b0a:	b190      	cbz	r0, 1a007b32 <__swbuf_r+0x92>
1a007b0c:	e00f      	b.n	1a007b2e <__swbuf_r+0x8e>
1a007b0e:	4b0b      	ldr	r3, [pc, #44]	; (1a007b3c <__swbuf_r+0x9c>)
1a007b10:	429c      	cmp	r4, r3
1a007b12:	d101      	bne.n	1a007b18 <__swbuf_r+0x78>
1a007b14:	68ac      	ldr	r4, [r5, #8]
1a007b16:	e7d0      	b.n	1a007aba <__swbuf_r+0x1a>
1a007b18:	4b09      	ldr	r3, [pc, #36]	; (1a007b40 <__swbuf_r+0xa0>)
1a007b1a:	429c      	cmp	r4, r3
1a007b1c:	bf08      	it	eq
1a007b1e:	68ec      	ldreq	r4, [r5, #12]
1a007b20:	e7cb      	b.n	1a007aba <__swbuf_r+0x1a>
1a007b22:	4621      	mov	r1, r4
1a007b24:	4628      	mov	r0, r5
1a007b26:	f000 f80d 	bl	1a007b44 <__swsetup_r>
1a007b2a:	2800      	cmp	r0, #0
1a007b2c:	d0cc      	beq.n	1a007ac8 <__swbuf_r+0x28>
1a007b2e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a007b32:	4638      	mov	r0, r7
1a007b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a007b36:	bf00      	nop
1a007b38:	1a008ecc 	.word	0x1a008ecc
1a007b3c:	1a008eec 	.word	0x1a008eec
1a007b40:	1a008eac 	.word	0x1a008eac

1a007b44 <__swsetup_r>:
1a007b44:	4b32      	ldr	r3, [pc, #200]	; (1a007c10 <__swsetup_r+0xcc>)
1a007b46:	b570      	push	{r4, r5, r6, lr}
1a007b48:	681d      	ldr	r5, [r3, #0]
1a007b4a:	4606      	mov	r6, r0
1a007b4c:	460c      	mov	r4, r1
1a007b4e:	b125      	cbz	r5, 1a007b5a <__swsetup_r+0x16>
1a007b50:	69ab      	ldr	r3, [r5, #24]
1a007b52:	b913      	cbnz	r3, 1a007b5a <__swsetup_r+0x16>
1a007b54:	4628      	mov	r0, r5
1a007b56:	f7ff fd79 	bl	1a00764c <__sinit>
1a007b5a:	4b2e      	ldr	r3, [pc, #184]	; (1a007c14 <__swsetup_r+0xd0>)
1a007b5c:	429c      	cmp	r4, r3
1a007b5e:	d10f      	bne.n	1a007b80 <__swsetup_r+0x3c>
1a007b60:	686c      	ldr	r4, [r5, #4]
1a007b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007b66:	b29a      	uxth	r2, r3
1a007b68:	0715      	lsls	r5, r2, #28
1a007b6a:	d42c      	bmi.n	1a007bc6 <__swsetup_r+0x82>
1a007b6c:	06d0      	lsls	r0, r2, #27
1a007b6e:	d411      	bmi.n	1a007b94 <__swsetup_r+0x50>
1a007b70:	2209      	movs	r2, #9
1a007b72:	6032      	str	r2, [r6, #0]
1a007b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a007b78:	81a3      	strh	r3, [r4, #12]
1a007b7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a007b7e:	e03e      	b.n	1a007bfe <__swsetup_r+0xba>
1a007b80:	4b25      	ldr	r3, [pc, #148]	; (1a007c18 <__swsetup_r+0xd4>)
1a007b82:	429c      	cmp	r4, r3
1a007b84:	d101      	bne.n	1a007b8a <__swsetup_r+0x46>
1a007b86:	68ac      	ldr	r4, [r5, #8]
1a007b88:	e7eb      	b.n	1a007b62 <__swsetup_r+0x1e>
1a007b8a:	4b24      	ldr	r3, [pc, #144]	; (1a007c1c <__swsetup_r+0xd8>)
1a007b8c:	429c      	cmp	r4, r3
1a007b8e:	bf08      	it	eq
1a007b90:	68ec      	ldreq	r4, [r5, #12]
1a007b92:	e7e6      	b.n	1a007b62 <__swsetup_r+0x1e>
1a007b94:	0751      	lsls	r1, r2, #29
1a007b96:	d512      	bpl.n	1a007bbe <__swsetup_r+0x7a>
1a007b98:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a007b9a:	b141      	cbz	r1, 1a007bae <__swsetup_r+0x6a>
1a007b9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a007ba0:	4299      	cmp	r1, r3
1a007ba2:	d002      	beq.n	1a007baa <__swsetup_r+0x66>
1a007ba4:	4630      	mov	r0, r6
1a007ba6:	f7ff fe13 	bl	1a0077d0 <_free_r>
1a007baa:	2300      	movs	r3, #0
1a007bac:	6363      	str	r3, [r4, #52]	; 0x34
1a007bae:	89a3      	ldrh	r3, [r4, #12]
1a007bb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a007bb4:	81a3      	strh	r3, [r4, #12]
1a007bb6:	2300      	movs	r3, #0
1a007bb8:	6063      	str	r3, [r4, #4]
1a007bba:	6923      	ldr	r3, [r4, #16]
1a007bbc:	6023      	str	r3, [r4, #0]
1a007bbe:	89a3      	ldrh	r3, [r4, #12]
1a007bc0:	f043 0308 	orr.w	r3, r3, #8
1a007bc4:	81a3      	strh	r3, [r4, #12]
1a007bc6:	6923      	ldr	r3, [r4, #16]
1a007bc8:	b94b      	cbnz	r3, 1a007bde <__swsetup_r+0x9a>
1a007bca:	89a3      	ldrh	r3, [r4, #12]
1a007bcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a007bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a007bd4:	d003      	beq.n	1a007bde <__swsetup_r+0x9a>
1a007bd6:	4621      	mov	r1, r4
1a007bd8:	4630      	mov	r0, r6
1a007bda:	f000 f845 	bl	1a007c68 <__smakebuf_r>
1a007bde:	89a2      	ldrh	r2, [r4, #12]
1a007be0:	f012 0301 	ands.w	r3, r2, #1
1a007be4:	d00c      	beq.n	1a007c00 <__swsetup_r+0xbc>
1a007be6:	2300      	movs	r3, #0
1a007be8:	60a3      	str	r3, [r4, #8]
1a007bea:	6963      	ldr	r3, [r4, #20]
1a007bec:	425b      	negs	r3, r3
1a007bee:	61a3      	str	r3, [r4, #24]
1a007bf0:	6923      	ldr	r3, [r4, #16]
1a007bf2:	b953      	cbnz	r3, 1a007c0a <__swsetup_r+0xc6>
1a007bf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007bf8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a007bfc:	d1ba      	bne.n	1a007b74 <__swsetup_r+0x30>
1a007bfe:	bd70      	pop	{r4, r5, r6, pc}
1a007c00:	0792      	lsls	r2, r2, #30
1a007c02:	bf58      	it	pl
1a007c04:	6963      	ldrpl	r3, [r4, #20]
1a007c06:	60a3      	str	r3, [r4, #8]
1a007c08:	e7f2      	b.n	1a007bf0 <__swsetup_r+0xac>
1a007c0a:	2000      	movs	r0, #0
1a007c0c:	e7f7      	b.n	1a007bfe <__swsetup_r+0xba>
1a007c0e:	bf00      	nop
1a007c10:	10000068 	.word	0x10000068
1a007c14:	1a008ecc 	.word	0x1a008ecc
1a007c18:	1a008eec 	.word	0x1a008eec
1a007c1c:	1a008eac 	.word	0x1a008eac

1a007c20 <__swhatbuf_r>:
1a007c20:	b570      	push	{r4, r5, r6, lr}
1a007c22:	460e      	mov	r6, r1
1a007c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a007c28:	2900      	cmp	r1, #0
1a007c2a:	b096      	sub	sp, #88	; 0x58
1a007c2c:	4614      	mov	r4, r2
1a007c2e:	461d      	mov	r5, r3
1a007c30:	da07      	bge.n	1a007c42 <__swhatbuf_r+0x22>
1a007c32:	2300      	movs	r3, #0
1a007c34:	602b      	str	r3, [r5, #0]
1a007c36:	89b3      	ldrh	r3, [r6, #12]
1a007c38:	061a      	lsls	r2, r3, #24
1a007c3a:	d410      	bmi.n	1a007c5e <__swhatbuf_r+0x3e>
1a007c3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a007c40:	e00e      	b.n	1a007c60 <__swhatbuf_r+0x40>
1a007c42:	466a      	mov	r2, sp
1a007c44:	f7f8 fdfd 	bl	1a000842 <_fstat_r>
1a007c48:	2800      	cmp	r0, #0
1a007c4a:	dbf2      	blt.n	1a007c32 <__swhatbuf_r+0x12>
1a007c4c:	9a01      	ldr	r2, [sp, #4]
1a007c4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a007c52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a007c56:	425a      	negs	r2, r3
1a007c58:	415a      	adcs	r2, r3
1a007c5a:	602a      	str	r2, [r5, #0]
1a007c5c:	e7ee      	b.n	1a007c3c <__swhatbuf_r+0x1c>
1a007c5e:	2340      	movs	r3, #64	; 0x40
1a007c60:	2000      	movs	r0, #0
1a007c62:	6023      	str	r3, [r4, #0]
1a007c64:	b016      	add	sp, #88	; 0x58
1a007c66:	bd70      	pop	{r4, r5, r6, pc}

1a007c68 <__smakebuf_r>:
1a007c68:	898b      	ldrh	r3, [r1, #12]
1a007c6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a007c6c:	079d      	lsls	r5, r3, #30
1a007c6e:	4606      	mov	r6, r0
1a007c70:	460c      	mov	r4, r1
1a007c72:	d507      	bpl.n	1a007c84 <__smakebuf_r+0x1c>
1a007c74:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a007c78:	6023      	str	r3, [r4, #0]
1a007c7a:	6123      	str	r3, [r4, #16]
1a007c7c:	2301      	movs	r3, #1
1a007c7e:	6163      	str	r3, [r4, #20]
1a007c80:	b002      	add	sp, #8
1a007c82:	bd70      	pop	{r4, r5, r6, pc}
1a007c84:	ab01      	add	r3, sp, #4
1a007c86:	466a      	mov	r2, sp
1a007c88:	f7ff ffca 	bl	1a007c20 <__swhatbuf_r>
1a007c8c:	9900      	ldr	r1, [sp, #0]
1a007c8e:	4605      	mov	r5, r0
1a007c90:	4630      	mov	r0, r6
1a007c92:	f7ff fdeb 	bl	1a00786c <_malloc_r>
1a007c96:	b948      	cbnz	r0, 1a007cac <__smakebuf_r+0x44>
1a007c98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007c9c:	059a      	lsls	r2, r3, #22
1a007c9e:	d4ef      	bmi.n	1a007c80 <__smakebuf_r+0x18>
1a007ca0:	f023 0303 	bic.w	r3, r3, #3
1a007ca4:	f043 0302 	orr.w	r3, r3, #2
1a007ca8:	81a3      	strh	r3, [r4, #12]
1a007caa:	e7e3      	b.n	1a007c74 <__smakebuf_r+0xc>
1a007cac:	4b0d      	ldr	r3, [pc, #52]	; (1a007ce4 <__smakebuf_r+0x7c>)
1a007cae:	62b3      	str	r3, [r6, #40]	; 0x28
1a007cb0:	89a3      	ldrh	r3, [r4, #12]
1a007cb2:	6020      	str	r0, [r4, #0]
1a007cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a007cb8:	81a3      	strh	r3, [r4, #12]
1a007cba:	9b00      	ldr	r3, [sp, #0]
1a007cbc:	6163      	str	r3, [r4, #20]
1a007cbe:	9b01      	ldr	r3, [sp, #4]
1a007cc0:	6120      	str	r0, [r4, #16]
1a007cc2:	b15b      	cbz	r3, 1a007cdc <__smakebuf_r+0x74>
1a007cc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a007cc8:	4630      	mov	r0, r6
1a007cca:	f7f8 fdbf 	bl	1a00084c <_isatty_r>
1a007cce:	b128      	cbz	r0, 1a007cdc <__smakebuf_r+0x74>
1a007cd0:	89a3      	ldrh	r3, [r4, #12]
1a007cd2:	f023 0303 	bic.w	r3, r3, #3
1a007cd6:	f043 0301 	orr.w	r3, r3, #1
1a007cda:	81a3      	strh	r3, [r4, #12]
1a007cdc:	89a3      	ldrh	r3, [r4, #12]
1a007cde:	431d      	orrs	r5, r3
1a007ce0:	81a5      	strh	r5, [r4, #12]
1a007ce2:	e7cd      	b.n	1a007c80 <__smakebuf_r+0x18>
1a007ce4:	1a007615 	.word	0x1a007615

1a007ce8 <__malloc_lock>:
1a007ce8:	4770      	bx	lr

1a007cea <__malloc_unlock>:
1a007cea:	4770      	bx	lr

1a007cec <__sfputc_r>:
1a007cec:	6893      	ldr	r3, [r2, #8]
1a007cee:	3b01      	subs	r3, #1
1a007cf0:	2b00      	cmp	r3, #0
1a007cf2:	b410      	push	{r4}
1a007cf4:	6093      	str	r3, [r2, #8]
1a007cf6:	da08      	bge.n	1a007d0a <__sfputc_r+0x1e>
1a007cf8:	6994      	ldr	r4, [r2, #24]
1a007cfa:	42a3      	cmp	r3, r4
1a007cfc:	db01      	blt.n	1a007d02 <__sfputc_r+0x16>
1a007cfe:	290a      	cmp	r1, #10
1a007d00:	d103      	bne.n	1a007d0a <__sfputc_r+0x1e>
1a007d02:	f85d 4b04 	ldr.w	r4, [sp], #4
1a007d06:	f7ff becb 	b.w	1a007aa0 <__swbuf_r>
1a007d0a:	6813      	ldr	r3, [r2, #0]
1a007d0c:	1c58      	adds	r0, r3, #1
1a007d0e:	6010      	str	r0, [r2, #0]
1a007d10:	7019      	strb	r1, [r3, #0]
1a007d12:	4608      	mov	r0, r1
1a007d14:	f85d 4b04 	ldr.w	r4, [sp], #4
1a007d18:	4770      	bx	lr

1a007d1a <__sfputs_r>:
1a007d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a007d1c:	4606      	mov	r6, r0
1a007d1e:	460f      	mov	r7, r1
1a007d20:	4614      	mov	r4, r2
1a007d22:	18d5      	adds	r5, r2, r3
1a007d24:	42ac      	cmp	r4, r5
1a007d26:	d101      	bne.n	1a007d2c <__sfputs_r+0x12>
1a007d28:	2000      	movs	r0, #0
1a007d2a:	e007      	b.n	1a007d3c <__sfputs_r+0x22>
1a007d2c:	463a      	mov	r2, r7
1a007d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
1a007d32:	4630      	mov	r0, r6
1a007d34:	f7ff ffda 	bl	1a007cec <__sfputc_r>
1a007d38:	1c43      	adds	r3, r0, #1
1a007d3a:	d1f3      	bne.n	1a007d24 <__sfputs_r+0xa>
1a007d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a007d3e:	Address 0x000000001a007d3e is out of bounds.


1a007d40 <_vfiprintf_r>:
1a007d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a007d44:	460c      	mov	r4, r1
1a007d46:	b09d      	sub	sp, #116	; 0x74
1a007d48:	4617      	mov	r7, r2
1a007d4a:	461d      	mov	r5, r3
1a007d4c:	4606      	mov	r6, r0
1a007d4e:	b118      	cbz	r0, 1a007d58 <_vfiprintf_r+0x18>
1a007d50:	6983      	ldr	r3, [r0, #24]
1a007d52:	b90b      	cbnz	r3, 1a007d58 <_vfiprintf_r+0x18>
1a007d54:	f7ff fc7a 	bl	1a00764c <__sinit>
1a007d58:	4b7c      	ldr	r3, [pc, #496]	; (1a007f4c <_vfiprintf_r+0x20c>)
1a007d5a:	429c      	cmp	r4, r3
1a007d5c:	d158      	bne.n	1a007e10 <_vfiprintf_r+0xd0>
1a007d5e:	6874      	ldr	r4, [r6, #4]
1a007d60:	89a3      	ldrh	r3, [r4, #12]
1a007d62:	0718      	lsls	r0, r3, #28
1a007d64:	d55e      	bpl.n	1a007e24 <_vfiprintf_r+0xe4>
1a007d66:	6923      	ldr	r3, [r4, #16]
1a007d68:	2b00      	cmp	r3, #0
1a007d6a:	d05b      	beq.n	1a007e24 <_vfiprintf_r+0xe4>
1a007d6c:	2300      	movs	r3, #0
1a007d6e:	9309      	str	r3, [sp, #36]	; 0x24
1a007d70:	2320      	movs	r3, #32
1a007d72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a007d76:	2330      	movs	r3, #48	; 0x30
1a007d78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a007d7c:	9503      	str	r5, [sp, #12]
1a007d7e:	f04f 0b01 	mov.w	fp, #1
1a007d82:	46b8      	mov	r8, r7
1a007d84:	4645      	mov	r5, r8
1a007d86:	f815 3b01 	ldrb.w	r3, [r5], #1
1a007d8a:	b10b      	cbz	r3, 1a007d90 <_vfiprintf_r+0x50>
1a007d8c:	2b25      	cmp	r3, #37	; 0x25
1a007d8e:	d154      	bne.n	1a007e3a <_vfiprintf_r+0xfa>
1a007d90:	ebb8 0a07 	subs.w	sl, r8, r7
1a007d94:	d00b      	beq.n	1a007dae <_vfiprintf_r+0x6e>
1a007d96:	4653      	mov	r3, sl
1a007d98:	463a      	mov	r2, r7
1a007d9a:	4621      	mov	r1, r4
1a007d9c:	4630      	mov	r0, r6
1a007d9e:	f7ff ffbc 	bl	1a007d1a <__sfputs_r>
1a007da2:	3001      	adds	r0, #1
1a007da4:	f000 80c2 	beq.w	1a007f2c <_vfiprintf_r+0x1ec>
1a007da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a007daa:	4453      	add	r3, sl
1a007dac:	9309      	str	r3, [sp, #36]	; 0x24
1a007dae:	f898 3000 	ldrb.w	r3, [r8]
1a007db2:	2b00      	cmp	r3, #0
1a007db4:	f000 80ba 	beq.w	1a007f2c <_vfiprintf_r+0x1ec>
1a007db8:	2300      	movs	r3, #0
1a007dba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a007dbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a007dc2:	9304      	str	r3, [sp, #16]
1a007dc4:	9307      	str	r3, [sp, #28]
1a007dc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a007dca:	931a      	str	r3, [sp, #104]	; 0x68
1a007dcc:	46a8      	mov	r8, r5
1a007dce:	2205      	movs	r2, #5
1a007dd0:	f818 1b01 	ldrb.w	r1, [r8], #1
1a007dd4:	485e      	ldr	r0, [pc, #376]	; (1a007f50 <_vfiprintf_r+0x210>)
1a007dd6:	f000 fa53 	bl	1a008280 <memchr>
1a007dda:	9b04      	ldr	r3, [sp, #16]
1a007ddc:	bb78      	cbnz	r0, 1a007e3e <_vfiprintf_r+0xfe>
1a007dde:	06d9      	lsls	r1, r3, #27
1a007de0:	bf44      	itt	mi
1a007de2:	2220      	movmi	r2, #32
1a007de4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a007de8:	071a      	lsls	r2, r3, #28
1a007dea:	bf44      	itt	mi
1a007dec:	222b      	movmi	r2, #43	; 0x2b
1a007dee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a007df2:	782a      	ldrb	r2, [r5, #0]
1a007df4:	2a2a      	cmp	r2, #42	; 0x2a
1a007df6:	d02a      	beq.n	1a007e4e <_vfiprintf_r+0x10e>
1a007df8:	9a07      	ldr	r2, [sp, #28]
1a007dfa:	46a8      	mov	r8, r5
1a007dfc:	2000      	movs	r0, #0
1a007dfe:	250a      	movs	r5, #10
1a007e00:	4641      	mov	r1, r8
1a007e02:	f811 3b01 	ldrb.w	r3, [r1], #1
1a007e06:	3b30      	subs	r3, #48	; 0x30
1a007e08:	2b09      	cmp	r3, #9
1a007e0a:	d969      	bls.n	1a007ee0 <_vfiprintf_r+0x1a0>
1a007e0c:	b360      	cbz	r0, 1a007e68 <_vfiprintf_r+0x128>
1a007e0e:	e024      	b.n	1a007e5a <_vfiprintf_r+0x11a>
1a007e10:	4b50      	ldr	r3, [pc, #320]	; (1a007f54 <_vfiprintf_r+0x214>)
1a007e12:	429c      	cmp	r4, r3
1a007e14:	d101      	bne.n	1a007e1a <_vfiprintf_r+0xda>
1a007e16:	68b4      	ldr	r4, [r6, #8]
1a007e18:	e7a2      	b.n	1a007d60 <_vfiprintf_r+0x20>
1a007e1a:	4b4f      	ldr	r3, [pc, #316]	; (1a007f58 <_vfiprintf_r+0x218>)
1a007e1c:	429c      	cmp	r4, r3
1a007e1e:	bf08      	it	eq
1a007e20:	68f4      	ldreq	r4, [r6, #12]
1a007e22:	e79d      	b.n	1a007d60 <_vfiprintf_r+0x20>
1a007e24:	4621      	mov	r1, r4
1a007e26:	4630      	mov	r0, r6
1a007e28:	f7ff fe8c 	bl	1a007b44 <__swsetup_r>
1a007e2c:	2800      	cmp	r0, #0
1a007e2e:	d09d      	beq.n	1a007d6c <_vfiprintf_r+0x2c>
1a007e30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a007e34:	b01d      	add	sp, #116	; 0x74
1a007e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007e3a:	46a8      	mov	r8, r5
1a007e3c:	e7a2      	b.n	1a007d84 <_vfiprintf_r+0x44>
1a007e3e:	4a44      	ldr	r2, [pc, #272]	; (1a007f50 <_vfiprintf_r+0x210>)
1a007e40:	1a80      	subs	r0, r0, r2
1a007e42:	fa0b f000 	lsl.w	r0, fp, r0
1a007e46:	4318      	orrs	r0, r3
1a007e48:	9004      	str	r0, [sp, #16]
1a007e4a:	4645      	mov	r5, r8
1a007e4c:	e7be      	b.n	1a007dcc <_vfiprintf_r+0x8c>
1a007e4e:	9a03      	ldr	r2, [sp, #12]
1a007e50:	1d11      	adds	r1, r2, #4
1a007e52:	6812      	ldr	r2, [r2, #0]
1a007e54:	9103      	str	r1, [sp, #12]
1a007e56:	2a00      	cmp	r2, #0
1a007e58:	db01      	blt.n	1a007e5e <_vfiprintf_r+0x11e>
1a007e5a:	9207      	str	r2, [sp, #28]
1a007e5c:	e004      	b.n	1a007e68 <_vfiprintf_r+0x128>
1a007e5e:	4252      	negs	r2, r2
1a007e60:	f043 0302 	orr.w	r3, r3, #2
1a007e64:	9207      	str	r2, [sp, #28]
1a007e66:	9304      	str	r3, [sp, #16]
1a007e68:	f898 3000 	ldrb.w	r3, [r8]
1a007e6c:	2b2e      	cmp	r3, #46	; 0x2e
1a007e6e:	d10e      	bne.n	1a007e8e <_vfiprintf_r+0x14e>
1a007e70:	f898 3001 	ldrb.w	r3, [r8, #1]
1a007e74:	2b2a      	cmp	r3, #42	; 0x2a
1a007e76:	d138      	bne.n	1a007eea <_vfiprintf_r+0x1aa>
1a007e78:	9b03      	ldr	r3, [sp, #12]
1a007e7a:	1d1a      	adds	r2, r3, #4
1a007e7c:	681b      	ldr	r3, [r3, #0]
1a007e7e:	9203      	str	r2, [sp, #12]
1a007e80:	2b00      	cmp	r3, #0
1a007e82:	bfb8      	it	lt
1a007e84:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a007e88:	f108 0802 	add.w	r8, r8, #2
1a007e8c:	9305      	str	r3, [sp, #20]
1a007e8e:	4d33      	ldr	r5, [pc, #204]	; (1a007f5c <_vfiprintf_r+0x21c>)
1a007e90:	f898 1000 	ldrb.w	r1, [r8]
1a007e94:	2203      	movs	r2, #3
1a007e96:	4628      	mov	r0, r5
1a007e98:	f000 f9f2 	bl	1a008280 <memchr>
1a007e9c:	b140      	cbz	r0, 1a007eb0 <_vfiprintf_r+0x170>
1a007e9e:	2340      	movs	r3, #64	; 0x40
1a007ea0:	1b40      	subs	r0, r0, r5
1a007ea2:	fa03 f000 	lsl.w	r0, r3, r0
1a007ea6:	9b04      	ldr	r3, [sp, #16]
1a007ea8:	4303      	orrs	r3, r0
1a007eaa:	f108 0801 	add.w	r8, r8, #1
1a007eae:	9304      	str	r3, [sp, #16]
1a007eb0:	f898 1000 	ldrb.w	r1, [r8]
1a007eb4:	482a      	ldr	r0, [pc, #168]	; (1a007f60 <_vfiprintf_r+0x220>)
1a007eb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a007eba:	2206      	movs	r2, #6
1a007ebc:	f108 0701 	add.w	r7, r8, #1
1a007ec0:	f000 f9de 	bl	1a008280 <memchr>
1a007ec4:	2800      	cmp	r0, #0
1a007ec6:	d037      	beq.n	1a007f38 <_vfiprintf_r+0x1f8>
1a007ec8:	4b26      	ldr	r3, [pc, #152]	; (1a007f64 <_vfiprintf_r+0x224>)
1a007eca:	bb1b      	cbnz	r3, 1a007f14 <_vfiprintf_r+0x1d4>
1a007ecc:	9b03      	ldr	r3, [sp, #12]
1a007ece:	3307      	adds	r3, #7
1a007ed0:	f023 0307 	bic.w	r3, r3, #7
1a007ed4:	3308      	adds	r3, #8
1a007ed6:	9303      	str	r3, [sp, #12]
1a007ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a007eda:	444b      	add	r3, r9
1a007edc:	9309      	str	r3, [sp, #36]	; 0x24
1a007ede:	e750      	b.n	1a007d82 <_vfiprintf_r+0x42>
1a007ee0:	fb05 3202 	mla	r2, r5, r2, r3
1a007ee4:	2001      	movs	r0, #1
1a007ee6:	4688      	mov	r8, r1
1a007ee8:	e78a      	b.n	1a007e00 <_vfiprintf_r+0xc0>
1a007eea:	2300      	movs	r3, #0
1a007eec:	f108 0801 	add.w	r8, r8, #1
1a007ef0:	9305      	str	r3, [sp, #20]
1a007ef2:	4619      	mov	r1, r3
1a007ef4:	250a      	movs	r5, #10
1a007ef6:	4640      	mov	r0, r8
1a007ef8:	f810 2b01 	ldrb.w	r2, [r0], #1
1a007efc:	3a30      	subs	r2, #48	; 0x30
1a007efe:	2a09      	cmp	r2, #9
1a007f00:	d903      	bls.n	1a007f0a <_vfiprintf_r+0x1ca>
1a007f02:	2b00      	cmp	r3, #0
1a007f04:	d0c3      	beq.n	1a007e8e <_vfiprintf_r+0x14e>
1a007f06:	9105      	str	r1, [sp, #20]
1a007f08:	e7c1      	b.n	1a007e8e <_vfiprintf_r+0x14e>
1a007f0a:	fb05 2101 	mla	r1, r5, r1, r2
1a007f0e:	2301      	movs	r3, #1
1a007f10:	4680      	mov	r8, r0
1a007f12:	e7f0      	b.n	1a007ef6 <_vfiprintf_r+0x1b6>
1a007f14:	ab03      	add	r3, sp, #12
1a007f16:	9300      	str	r3, [sp, #0]
1a007f18:	4622      	mov	r2, r4
1a007f1a:	4b13      	ldr	r3, [pc, #76]	; (1a007f68 <_vfiprintf_r+0x228>)
1a007f1c:	a904      	add	r1, sp, #16
1a007f1e:	4630      	mov	r0, r6
1a007f20:	f3af 8000 	nop.w
1a007f24:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a007f28:	4681      	mov	r9, r0
1a007f2a:	d1d5      	bne.n	1a007ed8 <_vfiprintf_r+0x198>
1a007f2c:	89a3      	ldrh	r3, [r4, #12]
1a007f2e:	065b      	lsls	r3, r3, #25
1a007f30:	f53f af7e 	bmi.w	1a007e30 <_vfiprintf_r+0xf0>
1a007f34:	9809      	ldr	r0, [sp, #36]	; 0x24
1a007f36:	e77d      	b.n	1a007e34 <_vfiprintf_r+0xf4>
1a007f38:	ab03      	add	r3, sp, #12
1a007f3a:	9300      	str	r3, [sp, #0]
1a007f3c:	4622      	mov	r2, r4
1a007f3e:	4b0a      	ldr	r3, [pc, #40]	; (1a007f68 <_vfiprintf_r+0x228>)
1a007f40:	a904      	add	r1, sp, #16
1a007f42:	4630      	mov	r0, r6
1a007f44:	f000 f888 	bl	1a008058 <_printf_i>
1a007f48:	e7ec      	b.n	1a007f24 <_vfiprintf_r+0x1e4>
1a007f4a:	bf00      	nop
1a007f4c:	1a008ecc 	.word	0x1a008ecc
1a007f50:	1a008f10 	.word	0x1a008f10
1a007f54:	1a008eec 	.word	0x1a008eec
1a007f58:	1a008eac 	.word	0x1a008eac
1a007f5c:	1a008f16 	.word	0x1a008f16
1a007f60:	1a008f1a 	.word	0x1a008f1a
1a007f64:	00000000 	.word	0x00000000
1a007f68:	1a007d1b 	.word	0x1a007d1b

1a007f6c <_printf_common>:
1a007f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a007f70:	4691      	mov	r9, r2
1a007f72:	461f      	mov	r7, r3
1a007f74:	688a      	ldr	r2, [r1, #8]
1a007f76:	690b      	ldr	r3, [r1, #16]
1a007f78:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a007f7c:	4293      	cmp	r3, r2
1a007f7e:	bfb8      	it	lt
1a007f80:	4613      	movlt	r3, r2
1a007f82:	f8c9 3000 	str.w	r3, [r9]
1a007f86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a007f8a:	4606      	mov	r6, r0
1a007f8c:	460c      	mov	r4, r1
1a007f8e:	b112      	cbz	r2, 1a007f96 <_printf_common+0x2a>
1a007f90:	3301      	adds	r3, #1
1a007f92:	f8c9 3000 	str.w	r3, [r9]
1a007f96:	6823      	ldr	r3, [r4, #0]
1a007f98:	0699      	lsls	r1, r3, #26
1a007f9a:	bf42      	ittt	mi
1a007f9c:	f8d9 3000 	ldrmi.w	r3, [r9]
1a007fa0:	3302      	addmi	r3, #2
1a007fa2:	f8c9 3000 	strmi.w	r3, [r9]
1a007fa6:	6825      	ldr	r5, [r4, #0]
1a007fa8:	f015 0506 	ands.w	r5, r5, #6
1a007fac:	d107      	bne.n	1a007fbe <_printf_common+0x52>
1a007fae:	f104 0a19 	add.w	sl, r4, #25
1a007fb2:	68e3      	ldr	r3, [r4, #12]
1a007fb4:	f8d9 2000 	ldr.w	r2, [r9]
1a007fb8:	1a9b      	subs	r3, r3, r2
1a007fba:	42ab      	cmp	r3, r5
1a007fbc:	dc28      	bgt.n	1a008010 <_printf_common+0xa4>
1a007fbe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a007fc2:	6822      	ldr	r2, [r4, #0]
1a007fc4:	3300      	adds	r3, #0
1a007fc6:	bf18      	it	ne
1a007fc8:	2301      	movne	r3, #1
1a007fca:	0692      	lsls	r2, r2, #26
1a007fcc:	d42d      	bmi.n	1a00802a <_printf_common+0xbe>
1a007fce:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a007fd2:	4639      	mov	r1, r7
1a007fd4:	4630      	mov	r0, r6
1a007fd6:	47c0      	blx	r8
1a007fd8:	3001      	adds	r0, #1
1a007fda:	d020      	beq.n	1a00801e <_printf_common+0xb2>
1a007fdc:	6823      	ldr	r3, [r4, #0]
1a007fde:	68e5      	ldr	r5, [r4, #12]
1a007fe0:	f8d9 2000 	ldr.w	r2, [r9]
1a007fe4:	f003 0306 	and.w	r3, r3, #6
1a007fe8:	2b04      	cmp	r3, #4
1a007fea:	bf08      	it	eq
1a007fec:	1aad      	subeq	r5, r5, r2
1a007fee:	68a3      	ldr	r3, [r4, #8]
1a007ff0:	6922      	ldr	r2, [r4, #16]
1a007ff2:	bf0c      	ite	eq
1a007ff4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a007ff8:	2500      	movne	r5, #0
1a007ffa:	4293      	cmp	r3, r2
1a007ffc:	bfc4      	itt	gt
1a007ffe:	1a9b      	subgt	r3, r3, r2
1a008000:	18ed      	addgt	r5, r5, r3
1a008002:	f04f 0900 	mov.w	r9, #0
1a008006:	341a      	adds	r4, #26
1a008008:	454d      	cmp	r5, r9
1a00800a:	d11a      	bne.n	1a008042 <_printf_common+0xd6>
1a00800c:	2000      	movs	r0, #0
1a00800e:	e008      	b.n	1a008022 <_printf_common+0xb6>
1a008010:	2301      	movs	r3, #1
1a008012:	4652      	mov	r2, sl
1a008014:	4639      	mov	r1, r7
1a008016:	4630      	mov	r0, r6
1a008018:	47c0      	blx	r8
1a00801a:	3001      	adds	r0, #1
1a00801c:	d103      	bne.n	1a008026 <_printf_common+0xba>
1a00801e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a008022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a008026:	3501      	adds	r5, #1
1a008028:	e7c3      	b.n	1a007fb2 <_printf_common+0x46>
1a00802a:	18e1      	adds	r1, r4, r3
1a00802c:	1c5a      	adds	r2, r3, #1
1a00802e:	2030      	movs	r0, #48	; 0x30
1a008030:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a008034:	4422      	add	r2, r4
1a008036:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a00803a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a00803e:	3302      	adds	r3, #2
1a008040:	e7c5      	b.n	1a007fce <_printf_common+0x62>
1a008042:	2301      	movs	r3, #1
1a008044:	4622      	mov	r2, r4
1a008046:	4639      	mov	r1, r7
1a008048:	4630      	mov	r0, r6
1a00804a:	47c0      	blx	r8
1a00804c:	3001      	adds	r0, #1
1a00804e:	d0e6      	beq.n	1a00801e <_printf_common+0xb2>
1a008050:	f109 0901 	add.w	r9, r9, #1
1a008054:	e7d8      	b.n	1a008008 <_printf_common+0x9c>
1a008056:	Address 0x000000001a008056 is out of bounds.


1a008058 <_printf_i>:
1a008058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00805c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
1a008060:	460c      	mov	r4, r1
1a008062:	7e09      	ldrb	r1, [r1, #24]
1a008064:	b085      	sub	sp, #20
1a008066:	296e      	cmp	r1, #110	; 0x6e
1a008068:	4617      	mov	r7, r2
1a00806a:	4606      	mov	r6, r0
1a00806c:	4698      	mov	r8, r3
1a00806e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a008070:	f000 80b3 	beq.w	1a0081da <_printf_i+0x182>
1a008074:	d822      	bhi.n	1a0080bc <_printf_i+0x64>
1a008076:	2963      	cmp	r1, #99	; 0x63
1a008078:	d036      	beq.n	1a0080e8 <_printf_i+0x90>
1a00807a:	d80a      	bhi.n	1a008092 <_printf_i+0x3a>
1a00807c:	2900      	cmp	r1, #0
1a00807e:	f000 80b9 	beq.w	1a0081f4 <_printf_i+0x19c>
1a008082:	2958      	cmp	r1, #88	; 0x58
1a008084:	f000 8083 	beq.w	1a00818e <_printf_i+0x136>
1a008088:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a00808c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a008090:	e032      	b.n	1a0080f8 <_printf_i+0xa0>
1a008092:	2964      	cmp	r1, #100	; 0x64
1a008094:	d001      	beq.n	1a00809a <_printf_i+0x42>
1a008096:	2969      	cmp	r1, #105	; 0x69
1a008098:	d1f6      	bne.n	1a008088 <_printf_i+0x30>
1a00809a:	6820      	ldr	r0, [r4, #0]
1a00809c:	6813      	ldr	r3, [r2, #0]
1a00809e:	0605      	lsls	r5, r0, #24
1a0080a0:	f103 0104 	add.w	r1, r3, #4
1a0080a4:	d52a      	bpl.n	1a0080fc <_printf_i+0xa4>
1a0080a6:	681b      	ldr	r3, [r3, #0]
1a0080a8:	6011      	str	r1, [r2, #0]
1a0080aa:	2b00      	cmp	r3, #0
1a0080ac:	da03      	bge.n	1a0080b6 <_printf_i+0x5e>
1a0080ae:	222d      	movs	r2, #45	; 0x2d
1a0080b0:	425b      	negs	r3, r3
1a0080b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
1a0080b6:	486f      	ldr	r0, [pc, #444]	; (1a008274 <_printf_i+0x21c>)
1a0080b8:	220a      	movs	r2, #10
1a0080ba:	e039      	b.n	1a008130 <_printf_i+0xd8>
1a0080bc:	2973      	cmp	r1, #115	; 0x73
1a0080be:	f000 809d 	beq.w	1a0081fc <_printf_i+0x1a4>
1a0080c2:	d808      	bhi.n	1a0080d6 <_printf_i+0x7e>
1a0080c4:	296f      	cmp	r1, #111	; 0x6f
1a0080c6:	d020      	beq.n	1a00810a <_printf_i+0xb2>
1a0080c8:	2970      	cmp	r1, #112	; 0x70
1a0080ca:	d1dd      	bne.n	1a008088 <_printf_i+0x30>
1a0080cc:	6823      	ldr	r3, [r4, #0]
1a0080ce:	f043 0320 	orr.w	r3, r3, #32
1a0080d2:	6023      	str	r3, [r4, #0]
1a0080d4:	e003      	b.n	1a0080de <_printf_i+0x86>
1a0080d6:	2975      	cmp	r1, #117	; 0x75
1a0080d8:	d017      	beq.n	1a00810a <_printf_i+0xb2>
1a0080da:	2978      	cmp	r1, #120	; 0x78
1a0080dc:	d1d4      	bne.n	1a008088 <_printf_i+0x30>
1a0080de:	2378      	movs	r3, #120	; 0x78
1a0080e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0080e4:	4864      	ldr	r0, [pc, #400]	; (1a008278 <_printf_i+0x220>)
1a0080e6:	e055      	b.n	1a008194 <_printf_i+0x13c>
1a0080e8:	6813      	ldr	r3, [r2, #0]
1a0080ea:	1d19      	adds	r1, r3, #4
1a0080ec:	681b      	ldr	r3, [r3, #0]
1a0080ee:	6011      	str	r1, [r2, #0]
1a0080f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a0080f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a0080f8:	2301      	movs	r3, #1
1a0080fa:	e08c      	b.n	1a008216 <_printf_i+0x1be>
1a0080fc:	681b      	ldr	r3, [r3, #0]
1a0080fe:	6011      	str	r1, [r2, #0]
1a008100:	f010 0f40 	tst.w	r0, #64	; 0x40
1a008104:	bf18      	it	ne
1a008106:	b21b      	sxthne	r3, r3
1a008108:	e7cf      	b.n	1a0080aa <_printf_i+0x52>
1a00810a:	6813      	ldr	r3, [r2, #0]
1a00810c:	6825      	ldr	r5, [r4, #0]
1a00810e:	1d18      	adds	r0, r3, #4
1a008110:	6010      	str	r0, [r2, #0]
1a008112:	0628      	lsls	r0, r5, #24
1a008114:	d501      	bpl.n	1a00811a <_printf_i+0xc2>
1a008116:	681b      	ldr	r3, [r3, #0]
1a008118:	e002      	b.n	1a008120 <_printf_i+0xc8>
1a00811a:	0668      	lsls	r0, r5, #25
1a00811c:	d5fb      	bpl.n	1a008116 <_printf_i+0xbe>
1a00811e:	881b      	ldrh	r3, [r3, #0]
1a008120:	4854      	ldr	r0, [pc, #336]	; (1a008274 <_printf_i+0x21c>)
1a008122:	296f      	cmp	r1, #111	; 0x6f
1a008124:	bf14      	ite	ne
1a008126:	220a      	movne	r2, #10
1a008128:	2208      	moveq	r2, #8
1a00812a:	2100      	movs	r1, #0
1a00812c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a008130:	6865      	ldr	r5, [r4, #4]
1a008132:	60a5      	str	r5, [r4, #8]
1a008134:	2d00      	cmp	r5, #0
1a008136:	f2c0 8095 	blt.w	1a008264 <_printf_i+0x20c>
1a00813a:	6821      	ldr	r1, [r4, #0]
1a00813c:	f021 0104 	bic.w	r1, r1, #4
1a008140:	6021      	str	r1, [r4, #0]
1a008142:	2b00      	cmp	r3, #0
1a008144:	d13d      	bne.n	1a0081c2 <_printf_i+0x16a>
1a008146:	2d00      	cmp	r5, #0
1a008148:	f040 808e 	bne.w	1a008268 <_printf_i+0x210>
1a00814c:	4665      	mov	r5, ip
1a00814e:	2a08      	cmp	r2, #8
1a008150:	d10b      	bne.n	1a00816a <_printf_i+0x112>
1a008152:	6823      	ldr	r3, [r4, #0]
1a008154:	07db      	lsls	r3, r3, #31
1a008156:	d508      	bpl.n	1a00816a <_printf_i+0x112>
1a008158:	6923      	ldr	r3, [r4, #16]
1a00815a:	6862      	ldr	r2, [r4, #4]
1a00815c:	429a      	cmp	r2, r3
1a00815e:	bfde      	ittt	le
1a008160:	2330      	movle	r3, #48	; 0x30
1a008162:	f805 3c01 	strble.w	r3, [r5, #-1]
1a008166:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a00816a:	ebac 0305 	sub.w	r3, ip, r5
1a00816e:	6123      	str	r3, [r4, #16]
1a008170:	f8cd 8000 	str.w	r8, [sp]
1a008174:	463b      	mov	r3, r7
1a008176:	aa03      	add	r2, sp, #12
1a008178:	4621      	mov	r1, r4
1a00817a:	4630      	mov	r0, r6
1a00817c:	f7ff fef6 	bl	1a007f6c <_printf_common>
1a008180:	3001      	adds	r0, #1
1a008182:	d14d      	bne.n	1a008220 <_printf_i+0x1c8>
1a008184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a008188:	b005      	add	sp, #20
1a00818a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00818e:	4839      	ldr	r0, [pc, #228]	; (1a008274 <_printf_i+0x21c>)
1a008190:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a008194:	6813      	ldr	r3, [r2, #0]
1a008196:	6821      	ldr	r1, [r4, #0]
1a008198:	1d1d      	adds	r5, r3, #4
1a00819a:	681b      	ldr	r3, [r3, #0]
1a00819c:	6015      	str	r5, [r2, #0]
1a00819e:	060a      	lsls	r2, r1, #24
1a0081a0:	d50b      	bpl.n	1a0081ba <_printf_i+0x162>
1a0081a2:	07ca      	lsls	r2, r1, #31
1a0081a4:	bf44      	itt	mi
1a0081a6:	f041 0120 	orrmi.w	r1, r1, #32
1a0081aa:	6021      	strmi	r1, [r4, #0]
1a0081ac:	b91b      	cbnz	r3, 1a0081b6 <_printf_i+0x15e>
1a0081ae:	6822      	ldr	r2, [r4, #0]
1a0081b0:	f022 0220 	bic.w	r2, r2, #32
1a0081b4:	6022      	str	r2, [r4, #0]
1a0081b6:	2210      	movs	r2, #16
1a0081b8:	e7b7      	b.n	1a00812a <_printf_i+0xd2>
1a0081ba:	064d      	lsls	r5, r1, #25
1a0081bc:	bf48      	it	mi
1a0081be:	b29b      	uxthmi	r3, r3
1a0081c0:	e7ef      	b.n	1a0081a2 <_printf_i+0x14a>
1a0081c2:	4665      	mov	r5, ip
1a0081c4:	fbb3 f1f2 	udiv	r1, r3, r2
1a0081c8:	fb02 3311 	mls	r3, r2, r1, r3
1a0081cc:	5cc3      	ldrb	r3, [r0, r3]
1a0081ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
1a0081d2:	460b      	mov	r3, r1
1a0081d4:	2900      	cmp	r1, #0
1a0081d6:	d1f5      	bne.n	1a0081c4 <_printf_i+0x16c>
1a0081d8:	e7b9      	b.n	1a00814e <_printf_i+0xf6>
1a0081da:	6813      	ldr	r3, [r2, #0]
1a0081dc:	6825      	ldr	r5, [r4, #0]
1a0081de:	6961      	ldr	r1, [r4, #20]
1a0081e0:	1d18      	adds	r0, r3, #4
1a0081e2:	6010      	str	r0, [r2, #0]
1a0081e4:	0628      	lsls	r0, r5, #24
1a0081e6:	681b      	ldr	r3, [r3, #0]
1a0081e8:	d501      	bpl.n	1a0081ee <_printf_i+0x196>
1a0081ea:	6019      	str	r1, [r3, #0]
1a0081ec:	e002      	b.n	1a0081f4 <_printf_i+0x19c>
1a0081ee:	066a      	lsls	r2, r5, #25
1a0081f0:	d5fb      	bpl.n	1a0081ea <_printf_i+0x192>
1a0081f2:	8019      	strh	r1, [r3, #0]
1a0081f4:	2300      	movs	r3, #0
1a0081f6:	6123      	str	r3, [r4, #16]
1a0081f8:	4665      	mov	r5, ip
1a0081fa:	e7b9      	b.n	1a008170 <_printf_i+0x118>
1a0081fc:	6813      	ldr	r3, [r2, #0]
1a0081fe:	1d19      	adds	r1, r3, #4
1a008200:	6011      	str	r1, [r2, #0]
1a008202:	681d      	ldr	r5, [r3, #0]
1a008204:	6862      	ldr	r2, [r4, #4]
1a008206:	2100      	movs	r1, #0
1a008208:	4628      	mov	r0, r5
1a00820a:	f000 f839 	bl	1a008280 <memchr>
1a00820e:	b108      	cbz	r0, 1a008214 <_printf_i+0x1bc>
1a008210:	1b40      	subs	r0, r0, r5
1a008212:	6060      	str	r0, [r4, #4]
1a008214:	6863      	ldr	r3, [r4, #4]
1a008216:	6123      	str	r3, [r4, #16]
1a008218:	2300      	movs	r3, #0
1a00821a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a00821e:	e7a7      	b.n	1a008170 <_printf_i+0x118>
1a008220:	6923      	ldr	r3, [r4, #16]
1a008222:	462a      	mov	r2, r5
1a008224:	4639      	mov	r1, r7
1a008226:	4630      	mov	r0, r6
1a008228:	47c0      	blx	r8
1a00822a:	3001      	adds	r0, #1
1a00822c:	d0aa      	beq.n	1a008184 <_printf_i+0x12c>
1a00822e:	6823      	ldr	r3, [r4, #0]
1a008230:	079b      	lsls	r3, r3, #30
1a008232:	d413      	bmi.n	1a00825c <_printf_i+0x204>
1a008234:	68e0      	ldr	r0, [r4, #12]
1a008236:	9b03      	ldr	r3, [sp, #12]
1a008238:	4298      	cmp	r0, r3
1a00823a:	bfb8      	it	lt
1a00823c:	4618      	movlt	r0, r3
1a00823e:	e7a3      	b.n	1a008188 <_printf_i+0x130>
1a008240:	2301      	movs	r3, #1
1a008242:	464a      	mov	r2, r9
1a008244:	4639      	mov	r1, r7
1a008246:	4630      	mov	r0, r6
1a008248:	47c0      	blx	r8
1a00824a:	3001      	adds	r0, #1
1a00824c:	d09a      	beq.n	1a008184 <_printf_i+0x12c>
1a00824e:	3501      	adds	r5, #1
1a008250:	68e3      	ldr	r3, [r4, #12]
1a008252:	9a03      	ldr	r2, [sp, #12]
1a008254:	1a9b      	subs	r3, r3, r2
1a008256:	42ab      	cmp	r3, r5
1a008258:	dcf2      	bgt.n	1a008240 <_printf_i+0x1e8>
1a00825a:	e7eb      	b.n	1a008234 <_printf_i+0x1dc>
1a00825c:	2500      	movs	r5, #0
1a00825e:	f104 0919 	add.w	r9, r4, #25
1a008262:	e7f5      	b.n	1a008250 <_printf_i+0x1f8>
1a008264:	2b00      	cmp	r3, #0
1a008266:	d1ac      	bne.n	1a0081c2 <_printf_i+0x16a>
1a008268:	7803      	ldrb	r3, [r0, #0]
1a00826a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a00826e:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a008272:	e76c      	b.n	1a00814e <_printf_i+0xf6>
1a008274:	1a008f21 	.word	0x1a008f21
1a008278:	1a008f32 	.word	0x1a008f32
1a00827c:	ffffffff 	.word	0xffffffff

1a008280 <memchr>:
1a008280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a008284:	2a10      	cmp	r2, #16
1a008286:	db2b      	blt.n	1a0082e0 <memchr+0x60>
1a008288:	f010 0f07 	tst.w	r0, #7
1a00828c:	d008      	beq.n	1a0082a0 <memchr+0x20>
1a00828e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a008292:	3a01      	subs	r2, #1
1a008294:	428b      	cmp	r3, r1
1a008296:	d02d      	beq.n	1a0082f4 <memchr+0x74>
1a008298:	f010 0f07 	tst.w	r0, #7
1a00829c:	b342      	cbz	r2, 1a0082f0 <memchr+0x70>
1a00829e:	d1f6      	bne.n	1a00828e <memchr+0xe>
1a0082a0:	b4f0      	push	{r4, r5, r6, r7}
1a0082a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a0082a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a0082aa:	f022 0407 	bic.w	r4, r2, #7
1a0082ae:	f07f 0700 	mvns.w	r7, #0
1a0082b2:	2300      	movs	r3, #0
1a0082b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a0082b8:	3c08      	subs	r4, #8
1a0082ba:	ea85 0501 	eor.w	r5, r5, r1
1a0082be:	ea86 0601 	eor.w	r6, r6, r1
1a0082c2:	fa85 f547 	uadd8	r5, r5, r7
1a0082c6:	faa3 f587 	sel	r5, r3, r7
1a0082ca:	fa86 f647 	uadd8	r6, r6, r7
1a0082ce:	faa5 f687 	sel	r6, r5, r7
1a0082d2:	b98e      	cbnz	r6, 1a0082f8 <memchr+0x78>
1a0082d4:	d1ee      	bne.n	1a0082b4 <memchr+0x34>
1a0082d6:	bcf0      	pop	{r4, r5, r6, r7}
1a0082d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a0082dc:	f002 0207 	and.w	r2, r2, #7
1a0082e0:	b132      	cbz	r2, 1a0082f0 <memchr+0x70>
1a0082e2:	f810 3b01 	ldrb.w	r3, [r0], #1
1a0082e6:	3a01      	subs	r2, #1
1a0082e8:	ea83 0301 	eor.w	r3, r3, r1
1a0082ec:	b113      	cbz	r3, 1a0082f4 <memchr+0x74>
1a0082ee:	d1f8      	bne.n	1a0082e2 <memchr+0x62>
1a0082f0:	2000      	movs	r0, #0
1a0082f2:	4770      	bx	lr
1a0082f4:	3801      	subs	r0, #1
1a0082f6:	4770      	bx	lr
1a0082f8:	2d00      	cmp	r5, #0
1a0082fa:	bf06      	itte	eq
1a0082fc:	4635      	moveq	r5, r6
1a0082fe:	3803      	subeq	r0, #3
1a008300:	3807      	subne	r0, #7
1a008302:	f015 0f01 	tst.w	r5, #1
1a008306:	d107      	bne.n	1a008318 <memchr+0x98>
1a008308:	3001      	adds	r0, #1
1a00830a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a00830e:	bf02      	ittt	eq
1a008310:	3001      	addeq	r0, #1
1a008312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a008316:	3001      	addeq	r0, #1
1a008318:	bcf0      	pop	{r4, r5, r6, r7}
1a00831a:	3801      	subs	r0, #1
1a00831c:	4770      	bx	lr
1a00831e:	bf00      	nop
1a008320:	54524155 	.word	0x54524155
1a008324:	2043505f 	.word	0x2043505f
1a008328:	666e6f63 	.word	0x666e6f63
1a00832c:	72756769 	.word	0x72756769
1a008330:	2e616461 	.word	0x2e616461
1a008334:	00000a0d 	.word	0x00000a0d
1a008338:	54524155 	.word	0x54524155
1a00833c:	554c425f 	.word	0x554c425f
1a008340:	4f4f5445 	.word	0x4f4f5445
1a008344:	70204854 	.word	0x70204854
1a008348:	20617261 	.word	0x20617261
1a00834c:	75646f6d 	.word	0x75646f6d
1a008350:	42206f6c 	.word	0x42206f6c
1a008354:	7465756c 	.word	0x7465756c
1a008358:	68746f6f 	.word	0x68746f6f
1a00835c:	6e6f6320 	.word	0x6e6f6320
1a008360:	75676966 	.word	0x75676966
1a008364:	61646172 	.word	0x61646172
1a008368:	000a0d2e 	.word	0x000a0d2e
1a00836c:	65636552 	.word	0x65636552
1a008370:	42657669 	.word	0x42657669
1a008374:	00000054 	.word	0x00000054
1a008378:	4d6d7770 	.word	0x4d6d7770
1a00837c:	726f746f 	.word	0x726f746f
1a008380:	00000000 	.word	0x00000000
1a008384:	6b736964 	.word	0x6b736964
1a008388:	00000000 	.word	0x00000000
1a00838c:	65766173 	.word	0x65766173
1a008390:	64536e49 	.word	0x64536e49
1a008394:	ffffff00 	.word	0xffffff00
1a008398:	63696e49 	.word	0x63696e49
1a00839c:	696c6169 	.word	0x696c6169
1a0083a0:	646e617a 	.word	0x646e617a
1a0083a4:	000a0d6f 	.word	0x000a0d6f
1a0083a8:	3a434453 	.word	0x3a434453
1a0083ac:	00000000 	.word	0x00000000
1a0083b0:	6e204453 	.word	0x6e204453
1a0083b4:	6964206f 	.word	0x6964206f
1a0083b8:	6e6f7073 	.word	0x6e6f7073
1a0083bc:	656c6269 	.word	0x656c6269
1a0083c0:	00000a0d 	.word	0x00000a0d
1a0083c4:	6f6c6156 	.word	0x6f6c6156
1a0083c8:	57502072 	.word	0x57502072
1a0083cc:	64253a4d 	.word	0x64253a4d
1a0083d0:	000a0d20 	.word	0x000a0d20
1a0083d4:	3a434453 	.word	0x3a434453
1a0083d8:	676f6c2f 	.word	0x676f6c2f
1a0083dc:	7478742e 	.word	0x7478742e
1a0083e0:	00000000 	.word	0x00000000
1a0083e4:	72637345 	.word	0x72637345
1a0083e8:	6f696269 	.word	0x6f696269
1a0083ec:	726f6320 	.word	0x726f6320
1a0083f0:	74636572 	.word	0x74636572
1a0083f4:	6e656d61 	.word	0x6e656d61
1a0083f8:	0a0d6574 	.word	0x0a0d6574
1a0083fc:	00000020 	.word	0x00000020
1a008400:	6f727245 	.word	0x6f727245
1a008404:	6c612072 	.word	0x6c612072
1a008408:	63736520 	.word	0x63736520
1a00840c:	69626972 	.word	0x69626972
1a008410:	200a0d72 	.word	0x200a0d72
1a008414:	00000000 	.word	0x00000000
1a008418:	6f727245 	.word	0x6f727245
1a00841c:	6c612072 	.word	0x6c612072
1a008420:	72626120 	.word	0x72626120
1a008424:	65207269 	.word	0x65207269
1a008428:	7261206c 	.word	0x7261206c
1a00842c:	76696863 	.word	0x76696863
1a008430:	000a0d6f 	.word	0x000a0d6f

1a008434 <ExCvt>:
1a008434:	41455543 43414141 49454545 41414949     CUEAAAACEEEIIIAA
1a008444:	4f929245 55554f4f 4f554f59 9f9e4f9c     E..OOOUUYOUO.O..
1a008454:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
1a008464:	b3b2b1b0 414141b4 bbbab9b8 bfbebdbc     .....AAA........
1a008474:	c3c2c1c0 4141c5c4 cbcac9c8 cfcecdcc     ......AA........
1a008484:	4545d1d1 49494945 dbdad949 df49dddc     ..EEEIIII.....I.
1a008494:	4f4fe14f e8e64f4f 555555e8 efee5959     O.OOOO...UUUYY..
1a0084a4:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

1a0084b4 <LfnOfs>:
1a0084b4:	07050301 12100e09 1c181614 ffffff1e     ................

1a0084c4 <VolumeStr>:
1a0084c4:	1a0084f8 1a0084fc 459076eb 54414658     .........v.EXFAT
1a0084d4:	00202020 00544146 33544146 ffff0032        .FAT.FAT32...
1a0084e4:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
1a0084f4:	ff005d5b 00434453 00425355              []..SDC.USB.

1a008500 <cvt1.5491>:
1a008500:	031a0061 031700e0 030700f8 000100ff     a...............
1a008510:	01000178 01320130 01390106 014a0110     x...0.2...9...J.
1a008520:	0179012e 01800106 0243004d 01820181     ..y.....M.C.....
1a008530:	01840182 01860184 01870187 018a0189     ................
1a008540:	018b018b 018e018d 0190018f 01910191     ................
1a008550:	01940193 019601f6 01980197 023d0198     ..............=.
1a008560:	019c019b 0220019d 01a0019f 01a201a0     ...... .........
1a008570:	01a401a2 01a601a4 01a701a7 01aa01a9     ................
1a008580:	01ac01ab 01ae01ac 01af01af 01b201b1     ................
1a008590:	01b301b3 01b501b5 01b801b7 01ba01b8     ................
1a0085a0:	01bc01bb 01be01bc 01c001f7 01c201c1     ................
1a0085b0:	01c401c3 01c401c5 01c801c7 01ca01c7     ................
1a0085c0:	01ca01cb 011001cd 000101dd 01de018e     ................
1a0085d0:	01f30112 01f10003 01f401f4 012801f8     ..............(.
1a0085e0:	01120222 0009023a 023b2c65 023d023b     "...:...e,;.;.=.
1a0085f0:	023f2c66 02410240 02460241 0253010a     f,?.@.A.A.F...S.
1a008600:	01810040 02550186 018a0189 018f0258     @.....U.....X...
1a008610:	0190025a 025d025c 025f025e 02610193     Z...\.].^._...a.
1a008620:	01940262 02650264 02670266 01960197     b...d.e.f.g.....
1a008630:	2c62026a 026d026c 019c026e 02710270     j.b,l.m.n...p.q.
1a008640:	0273019d 019f0274 02770276 02790278     ..s.t...v.w.x.y.
1a008650:	027b027a 2c64027c 027f027e 028101a6     z.{.|.d,~.......
1a008660:	01a90282 02850284 02870286 024401ae     ..............D.
1a008670:	01b201b1 028d0245 028f028e 02910290     ....E...........
1a008680:	037b01b7 03fd0003 03ff03fe 000403ac     ..{.............
1a008690:	03880386 038a0389 031103b1 000203c2     ................
1a0086a0:	03a303a3 030803c4 000303cc 038e038c     ................
1a0086b0:	03d8038f 03f20118 03f9000a 03f403f3     ................
1a0086c0:	03f603f5 03f703f7 03fa03f9 043003fa     ..............0.
1a0086d0:	04500320 04600710 048a0122 04c10136      .P...`."...6...
1a0086e0:	04cf010e 04c00001 014404d0 04260561     ..........D.a.&.
1a0086f0:	ffff0000                                ....

1a0086f4 <cvt2.5492>:
1a0086f4:	00011d7d 1e002c63 1ea00196 1f00015a     }...c,......Z...
1a008704:	1f100608 1f200606 1f300608 1f400608     ...... ...0...@.
1a008714:	1f510606 1f590007 1f5b1f52 1f5d1f54     ..Q...Y.R.[.T.].
1a008724:	1f5f1f56 06081f60 000e1f70 1fbb1fba     V._.`...p.......
1a008734:	1fc91fc8 1fcb1fca 1fdb1fda 1ff91ff8     ................
1a008744:	1feb1fea 1ffb1ffa 06081f80 06081f90     ................
1a008754:	06081fa0 00041fb0 1fb91fb8 1fbc1fb2     ................
1a008764:	00011fcc 1fd01fc3 1fe00602 1fe50602     ................
1a008774:	1fec0001 00011ff3 214e1ffc 21320001     ..........N!..2!
1a008784:	02102170 00012184 24d02183 2c30051a     p!...!...!.$..0,
1a008794:	2c60042f 2c670102 2c750106 2c800102     /.`,..g,..u,...,
1a0087a4:	2d000164 ff410826 0000031a              d..-&.A.....

1a0087b0 <uc850>:
1a0087b0:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
1a0087c0:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
1a0087d0:	00e600c9 00f400c6 00f200f6 00f900fb     ................
1a0087e0:	00d600ff 00f800dc 00d800a3 019200d7     ................
1a0087f0:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
1a008800:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
1a008810:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
1a008820:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
1a008830:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
1a008840:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
1a008850:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
1a008860:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
1a008870:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
1a008880:	00da00de 00d900db 00dd00fd 00b400af     ................
1a008890:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
1a0088a0:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..
1a0088b0:	6c707041 74616369 206e6f69 6c6c614d     Application Mall
1a0088c0:	4620636f 656c6961 6f482064 0d216b6f     oc Failed Hook!.
1a0088d0:	00000000 7362696c 6572662f 6f747265     ....libs/freerto
1a0088e0:	6f732f73 65637275 6f6f682f 632e736b     s/source/hooks.c
1a0088f0:	ffffff00 70410a0d 63696c70 6f697461     ......Applicatio
1a008900:	7453206e 206b6361 7265764f 776f6c66     n Stack Overflow
1a008910:	6f202121 6154206e 203a6b73 0a0d7325     !! on Task: %s..
1a008920:	ffffff00 41760a0d 72657373 6c614374     ......vAssertCal
1a008930:	2864656c 200a0d29 4c4c2020 20656e69     led()..   LLine 
1a008940:	626d754e 3d207265 0d642520 2020200a     Number = %d..   
1a008950:	656c6946 6d614e20 203d2065 0a0d7325     File Name = %s..
1a008960:	ff000a0d 454c4449 ffffff00 51726d54     ....IDLE....TmrQ
1a008970:	ffffff00 20726d54 00637653 44535346     ....Tmr Svc.FSSD
1a008980:	5b203a43 74696e49 6f4e205d 72616320     C: [Init] No car
1a008990:	6e692064 636f7320 2e74656b 00000a0d     d in socket.....
1a0089a0:	44535346 5b203a43 74696e49 6e49205d     FSSDC: [Init] In
1a0089b0:	61697469 617a696c 6e6f6974 67656220     itialization beg
1a0089c0:	2e736e69 00000a0d 44535346 5b203a43     ins.....FSSDC: [
1a0089d0:	74696e49 654e205d 61632077 73206472     Init] New card s
1a0089e0:	75746174 4e203a73 76697461 6f4d2065     tatus: Native Mo
1a0089f0:	0d2e6564 0000000a 44535346 5b203a43     de......FSSDC: [
1a008a00:	74696e49 654e205d 61632077 73206472     Init] New card s
1a008a10:	75746174 49203a73 6974696e 7a696c61     tatus: Initializ
1a008a20:	2e676e69 00000a0d 44535346 5b203a43     ing.....FSSDC: [
1a008a30:	74696e49 654e205d 61632077 73206472     Init] New card s
1a008a40:	75746174 52203a73 79646165 61462820     tatus: Ready (Fa
1a008a50:	43207473 6b636f6c 0a0d2e29 00000000     st Clock).......
1a008a60:	44535346 5b203a43 74696e49 654e205d     FSSDC: [Init] Ne
1a008a70:	61632077 73206472 75746174 45203a73     w card status: E
1a008a80:	726f7272 6f4e2820 6e492074 61697469     rror (Not Initia
1a008a90:	657a696c 0d2e2964 ffff000a 44535346     lized)......FSSD
1a008aa0:	5b203a43 74434f49 43205d6c 20647261     C: [IOCtl] Card 
1a008ab0:	20746f6e 74696e69 696c6169 2e64657a     not initialized.
1a008ac0:	00000a0d 44535346 5b203a43 74434f49     ....FSSDC: [IOCt
1a008ad0:	52205d6c 72757465 676e696e 72724520     l] Returning Err
1a008ae0:	0d2e726f ffff000a 44535346 5b203a43     or......FSSDC: [
1a008af0:	64616552 6143205d 6e206472 6920746f     Read] Card not i
1a008b00:	6974696e 7a696c61 0d2e6465 ffff000a     nitialized......
1a008b10:	44535346 5b203a43 74697257 43205d65     FSSDC: [Write] C
1a008b20:	20647261 20746f6e 74696e69 696c6169     ard not initiali
1a008b30:	2e64657a 00000a0d 44535346 5b203a43     zed.....FSSDC: [
1a008b40:	74697257 43205d65 20647261 77207369     Write] Card is w
1a008b50:	65746972 6f727020 74636574 0d2e6465     rite protected..
1a008b60:	ffff000a 44535346 5b203a43 74696e49     ....FSSDC: [Init
1a008b70:	5d495053 77654e20 72616320 74732064     SPI] New card st
1a008b80:	73757461 6e49203a 74726573 0d2e6465     atus: Inserted..
1a008b90:	ffff000a                                ....

1a008b94 <ExtRateIn>:
1a008b94:	00000000                                ....

1a008b98 <GpioButtons>:
1a008b98:	08000400 09010900                       ........

1a008ba0 <GpioLeds>:
1a008ba0:	01050005 0e000205 0c010b01              ............

1a008bac <GpioPorts>:
1a008bac:	03030003 0f050403 05031005 07030603     ................
1a008bbc:	ffff0802                                ....

1a008bc0 <OscRateIn>:
1a008bc0:	00b71b00                                ....

1a008bc4 <InitClkStates>:
1a008bc4:	01010f01                                ....

1a008bc8 <pinmuxing>:
1a008bc8:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a008bd8:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a008be8:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a008bf8:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a008c08:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a008c18:	00d50301 00d50401 00160107 00560207     ..............V.
1a008c28:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a008c38:	00570206                                ..W.

1a008c3c <UART_BClock>:
1a008c3c:	01a201c2 01620182                       ......b.

1a008c44 <UART_PClock>:
1a008c44:	00820081 00a200a1 08040201 0f0f0f03     ................
1a008c54:	ffff00ff                                ....

1a008c58 <periph_to_base>:
1a008c58:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a008c68:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a008c78:	000100e0 01000100 01200003 00060120     .......... . ...
1a008c88:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a008c98:	01820013 00120182 01a201a2 01c20011     ................
1a008ca8:	001001c2 01e201e2 0202000f 000e0202     ................
1a008cb8:	02220222 0223000d 001c0223              "."...#.#...

1a008cc4 <InitClkStates>:
1a008cc4:	00010100 00010909 0001090a 01010701     ................
1a008cd4:	00010902 00010906 0101090c 0001090d     ................
1a008ce4:	0001090e 0001090f 00010910 00010911     ................
1a008cf4:	00010912 00010913 00011114 00011119     ................
1a008d04:	0001111a 0001111b                       ........

1a008d0c <SCTdataList>:
1a008d0c:	01040204 03040a02 0b020c02 0c060506     ................
1a008d1c:	04010301 00000501 04070507              ............

1a008d28 <lpcUarts>:
1a008d28:	40081000 06020406 00180205 40081000     ...@...........@
1a008d38:	09070509 00180706 40082000 00000000     ......... .@....
1a008d48:	00190000 400c1000 07060107 001a0602     .......@........
1a008d58:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a008d68:	02020302 001b0204                       ........

1a008d70 <pwmMap>:
1a008d70:	000a0c01 02070d03 ff060405              ............

1a008d7c <gpioPinsInit>:
1a008d7c:	02000104 00050701 05010d03 04080100     ................
1a008d8c:	02020002 02000304 00000403 04070002     ................
1a008d9c:	030c0300 09050402 05040103 04030208     ................
1a008dac:	04020305 06040504 0802000c 03000b06     ................
1a008dbc:	00090607 07060503 060f0504 03030004     ................
1a008dcc:	02000404 00050404 06040502 04060200     ................
1a008ddc:	0c050408 05040a04 0003010e 14010a00     ................
1a008dec:	010f0000 0d000012 00001101 0010010c     ................
1a008dfc:	07070300 000f0300 01000001 00000000     ................
1a008e0c:	000a0600 08060603 06100504 04030005     ................
1a008e1c:	03000106 04090400 04010d05 010b0000     ................
1a008e2c:	0200000f 00000001 00010104 02010800     ................
1a008e3c:	01090000 09010006 05040002 04010200     ................
1a008e4c:	02020105 02020504 0e00000a 01000b02     ................
1a008e5c:	000c020b ffff0c01 7778797a 73747576     ........zyxwvuts
1a008e6c:	6f707172 6b6c6d6e 6768696a 63646566     rqponmlkjihgfedc
1a008e7c:	38396162 34353637 30313233 34333231     ba98765432101234
1a008e8c:	38373635 63626139 67666564 6b6a6968     56789abcdefghijk
1a008e9c:	6f6e6d6c 73727170 77767574 007a7978     lmnopqrstuvwxyz.

1a008eac <__sf_fake_stderr>:
	...

1a008ecc <__sf_fake_stdin>:
	...

1a008eec <__sf_fake_stdout>:
	...

1a008f0c <_global_impure_ptr>:
1a008f0c:	1000006c 2b302d23 6c680020 6665004c     l...#-0+ .hlL.ef
1a008f1c:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a008f2c:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a008f3c:	64636261 ff006665                       abcdef..
